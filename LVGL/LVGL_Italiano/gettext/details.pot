# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021-2025, LVGL Kft
# This file is distributed under the same license as the LVGL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: LVGL 9.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-16 20:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:5
msgid "File Explorer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:7
msgid "``lv_file_explorer`` provides a UI enabling the end user to browse the contents of a file system.  Its main area is called the \"Browsing Area\" and provides the list of files contained in the currently-viewed directory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:11
msgid "When enabled, there is also a \"Quick-Access\" panel on the left, which provides a convenient way to reach parts of the file system that are frequently accessed. Available \"Quick-Access\" destinations are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:15
msgid "File System,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:16
msgid "HOME,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:17
msgid "Video,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:18
msgid "Pictures,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:19
msgid "Music, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:20
msgid "Documents."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:22
msgid "You specify what paths these lead to during ``lv_file_explorer``\\ 's initialization."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:24
msgid "``lv_file_explorer`` only provides the file browsing and events caused by user activity (e.g. clicking a file), but does not provide the actual file operations. Client code must hook various events and decide what to do when they are emitted (e.g. a click or double-click on a file).  The actions taken might to open the file, display it, send it to some other part of the application, etc.. ``lv_file_explorer`` passes the full path and name of file that was clicked to the event callback functions.  What happens next is up to the application designer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:32
msgid "``lv_file_explorer`` uses the :ref:`lv_table` Widget for the \"Browsing Area\", and the :ref:`lv_list` Widget for the \"Quick-Access\" panel when it is enabled.  Thus, :c:macro:`LV_USE_TABLE` macro must be set to a non-zero value in ``lv_conf.h`` in order to use ``lv_file_explorer``, and and :c:macro:`LV_USE_LIST` must be set to a non-zero value to use the \"Quick-Access\" panel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:40
msgid "In order to use File Explorer, :ref:`file_system` has to be set up and know about all the drive letters you use when passing paths to File System (described below)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:47
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:100
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:21
#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:19
#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:13
#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:30
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:19
#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:16
#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:40
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:21
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:20
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:21
#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:12
#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:21
#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:16
#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:12
#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:11
#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:39
#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:16
msgid "Prerequisites"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:49
msgid "If you haven't already done so, you will need to learn about the LVGL :ref:`File System abstraction <file_system>`, since it must be set up and be functional for File Explorer to work."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:58
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:21
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:30
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:42
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:21
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:17
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:18
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:17
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:85
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:41
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:15
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:20
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:26
#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:28
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:28
#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:61
#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:29
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ft81x.rst:14
#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:47
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:33
#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:22
#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:46
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:35
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:34
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:35
#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:56
#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:26
#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:53
#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:91
#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:60
#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:31
#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:17
#: ../../lvgl/docs/intermediate/details/libs/arduino_sd.rst:17
#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:16
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:63
#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:85
#: ../../lvgl/docs/intermediate/details/libs/fs.rst:27
#: ../../lvgl/docs/intermediate/details/libs/gif.rst:14
#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:16
#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:48
#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:40
#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:19
#: ../../lvgl/docs/intermediate/details/libs/rle.rst:74
#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:52
#: ../../lvgl/docs/intermediate/details/libs/svg.rst:15
#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:17
#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:34
#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:26
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:28
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:34
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:23
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:34
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:30
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:38
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:48
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:28
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:33
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:67
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:30
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:32
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:32
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:32
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:24
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:24
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:35
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:30
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:39
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:42
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:43
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:35
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:39
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:38
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:28
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:41
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:38
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:41
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:48
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:36
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:35
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:21
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:17
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:22
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:28
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:30
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:82
#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:17
msgid "Usage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:60
msgid "Set :c:macro:`LV_USE_FILE_EXPLORER` to a non-zero value in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:62
msgid "First use :cpp:expr:`lv_file_explorer_create(lv_screen_active())` to create a File Explorer.  The default size is the screen size.  After that, you can customize the style like any Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:66
msgid "The size of the ``current_path`` buffer is set by :c:macro:`LV_FILE_EXPLORER_PATH_MAX_LEN` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:69
msgid "The object hierarchy of a freshly-created File Explorer looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:71
msgid "``File Explorer``:  occupies full area of parent Widget, typically a Screen (Flex-Flow COLUMN)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:73
msgid "``Container``:  occupies full area of File Explorer (Flex grow 1)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:75
msgid "``Quick-Access Panel``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:77
msgid "``Device List``:  grows to accommodate children"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:79
msgid "``File System``:  button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:81
msgid "``Places List``:  grows to accommodate children"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:83
msgid "``HOME``:  button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:84
msgid "``Video``:  button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:85
msgid "``Pictures``:  button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:86
msgid "``Music``:  button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:87
msgid "``Documents``:  button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:89
msgid "``Browser Panel``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:91
msgid "``Header``:  14% of ``Browser Panel`` height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:93
msgid "``Current Path``:  label"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:95
msgid "``File Table``:  with 1 column, 86% of ``Browser Panel`` height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:97
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:84
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:96
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:107
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:119
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:131
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:142
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:154
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:163
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:170
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:182
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:193
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:201
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:212
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:226
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:235
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:244
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:254
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:263
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:271
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:280
msgid "Fields:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:99
msgid "``home_dir`` = NULL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:100
msgid "``video_dir`` = NULL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:101
msgid "``pictures_dir`` = NULL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:102
msgid "``music_dir`` = NULL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:103
msgid "``docs_dir`` = NULL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:104
msgid "``fs_dir`` = NULL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:105
msgid "``current_path`` = [empty buffer]"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:106
msgid "``sel_fn`` (selected file)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:107
msgid "``sort`` (default :cpp:enumerator:`LV_EXPLORER_SORT_NONE`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:111
msgid "Accessing the Parts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:113
msgid "This list of functions provides access to the parts shown in diagram above:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:115
msgid ":cpp:expr:`lv_file_explorer_get_selected_file_name(explorer)`  (pointer to NUL-terminated string containing file-path user selected; typically used inside an :cpp:enumerator:`LV_EVENT_CLICKED` event)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:118
msgid ":cpp:expr:`lv_file_explorer_get_current_path(explorer)` (pointer to ``current_path`` ``char`` buffer)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:119
msgid ":cpp:expr:`lv_file_explorer_get_file_table(explorer)`  (pointer to ``File Table`` :ref:`lv_table` Widget)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:120
msgid ":cpp:expr:`lv_file_explorer_get_header(explorer)`  (pointer to ``Header`` :ref:`base_widget` Widget)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:121
msgid ":cpp:expr:`lv_file_explorer_get_path_label(explorer)`  (pointer to ``Current Path Label`` :ref:`lv_label` Widget)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:122
msgid ":cpp:expr:`lv_file_explorer_get_quick_access_area(explorer)`  (pointer to ``Quick-Access Panel`` :ref:`base_widget`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:123
msgid ":cpp:expr:`lv_file_explorer_get_places_list(explorer)`    (pointer to ``Places List`` :ref:`lv_list` Widget)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:124
msgid ":cpp:expr:`lv_file_explorer_get_device_list(explorer)`    (pointer to ``Device List`` :ref:`lv_list` Widget)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:128
msgid "Quick-Access Panel"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:130
msgid "The ``Quick-Access Panel`` behaves like a typical navigation panel and appears on the left, while the ``Browser Panel`` appears on the right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:133
msgid "This panel is optional.  If you set :c:macro:`LV_FILE_EXPLORER_QUICK_ACCESS` to ``0`` in ``lv_conf.h``, the ``Quick-Access Panel`` will not be created.  This saves only a little bit of memory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:137
msgid "Soon after the File Explorer is created, you typically use :cpp:expr:`lv_file_explorer_set_quick_access_path(explorer, LV_EXPLORER_XXX_DIR, \"path\")` to set the path that will be navigated to when the buttons in the ``Quick-Access Panel`` are clicked, which is currently a fixed list.  The corresponding values you will need to pass as the 2nd argument are the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:143
msgid ":cpp:enumerator:`LV_EXPLORER_HOME_DIR`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:144
msgid ":cpp:enumerator:`LV_EXPLORER_MUSIC_DIR`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:145
msgid ":cpp:enumerator:`LV_EXPLORER_PICTURES_DIR`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:146
msgid ":cpp:enumerator:`LV_EXPLORER_VIDEO_DIR`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:147
msgid ":cpp:enumerator:`LV_EXPLORER_DOCS_DIR`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:148
msgid ":cpp:enumerator:`LV_EXPLORER_FS_DIR`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:154
msgid "Sort"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:156
msgid "You can use :cpp:expr:`lv_file_explorer_set_sort(explorer, LV_EXPLORER_SORT_XX)` to set the sorting method."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:160
msgid "These are the possible sorting methods:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:162
msgid ":cpp:enumerator:`LV_EXPLORER_SORT_NONE` (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:163
msgid ":cpp:enumerator:`LV_EXPLORER_SORT_KIND`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:165
msgid ":cpp:expr:`lv_file_explorer_get_sort(explorer)` returns the current sorting method."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:172
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:5
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:80
#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:60
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:54
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:148
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:79
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:81
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:39
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:126
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:116
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:88
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:364
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:67
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:139
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:203
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:74
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:108
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:191
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:55
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:59
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:58
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:98
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:127
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:107
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:84
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:271
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:101
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:153
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:68
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:44
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:73
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:93
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:97
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:220
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:61
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:100
#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:5
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:84
msgid "Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:174
msgid ":cpp:enumerator:`LV_EVENT_READY` Sent when a directory is opened, which can happen:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:176
msgid "when the File Explorer is initially opened,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:177
msgid "after a user clicks on a ``Quick-Access Panel`` navigation button, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:178
msgid "after the user clicks on a directory displayed in the ``Browser Panel``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:180
msgid "You can use it to, for example, customize the file sort."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:182
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent once when any item (file) in the ``Browser Panel``\\ 's file list is clicked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:185
msgid ":cpp:enumerator:`LV_EVENT_CLICKED` Sent twice when an item in the ``Browser Panel`` is clicked:  once as a result of the input-device :cpp:enumerator:`LV_EVENT_RELEASED` event and a second as a result of the input device :cpp:enumerator:`LV_EVENT_CLICKED` event.  This applies to files, directories, and the \"< Back\" item in the ``Browser Panel``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:190
msgid "In these events you can use :cpp:func:`lv_file_explorer_get_current_path` to get the current path and :cpp:func:`lv_file_explorer_get_selected_file_name` to get the name of the currently selected file in the event processing function. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:208
msgid "You can also save the obtained **path** and **file** name into an array through functions such as :cpp:func:`strcpy` and :cpp:func:`strcat` for later use."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:216
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:128
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:83
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:122
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:44
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:52
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:76
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:92
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:686
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:211
#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:235
#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:86
#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:86
#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:53
#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:50
#: ../../lvgl/docs/intermediate/details/libs/gif.rst:60
#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:25
#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:68
#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:61
#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:54
#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:44
#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:299
#: ../../lvgl/docs/intermediate/details/libs/svg.rst:29
#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:48
#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:66
#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:349
#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:373
#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:68
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:82
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:179
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:93
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:109
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:71
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:172
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:172
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:116
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:394
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:102
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:172
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:233
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:107
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:153
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:221
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:83
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:87
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:86
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:126
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:167
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:136
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:114
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:305
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:135
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:181
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:103
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:74
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:103
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:131
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:128
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:261
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:91
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:129
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:69
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:42
#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:126
#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:26
msgid "Example"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/file_explorer/index.rst:3
msgid "Simple File Explorer"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/file_explorer/index.rst:9
msgid "Control File Explorer"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/file_explorer/index.rst:15
msgid "Custom sort"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:225
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:137
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:92
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:92
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:131
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:53
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:61
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:278
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:600
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:85
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:164
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:101
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:695
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:624
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:298
#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:81
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:231
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:227
#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:330
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:594
#: ../../lvgl/docs/intermediate/details/debugging/log.rst:73
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:161
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:107
#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:66
#: ../../lvgl/docs/intermediate/details/integration/renderers/espressif_ppa.rst:6
#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:110
#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_g2d.rst:6
#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_pxp.rst:6
#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_vglite_gpu.rst:6
#: ../../lvgl/docs/intermediate/details/integration/renderers/sdl.rst:6
#: ../../lvgl/docs/intermediate/details/integration/renderers/stm32_dma2d.rst:6
#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:6
#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:73
#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:23
#: ../../lvgl/docs/intermediate/details/libs/arduino_sd.rst:24
#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:62
#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:59
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:98
#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:158
#: ../../lvgl/docs/intermediate/details/libs/gif.rst:69
#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:63
#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:77
#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:70
#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:63
#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:53
#: ../../lvgl/docs/intermediate/details/libs/rle.rst:102
#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:308
#: ../../lvgl/docs/intermediate/details/libs/svg.rst:58
#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:57
#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:75
#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:384
#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:154
#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:157
#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events.rst:26
#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:28
#: ../../lvgl/docs/intermediate/details/main-modules/display/index.rst:27
#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:72
#: ../../lvgl/docs/intermediate/details/main-modules/display/redraw_area.rst:33
#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:70
#: ../../lvgl/docs/intermediate/details/main-modules/display/resolution.rst:21
#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:104
#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:93
#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:202
#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:62
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:81
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:690
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:194
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:201
#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:556
#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:397
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:653
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:694
#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:224
#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:76
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:91
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:188
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:100
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:118
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:80
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:181
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:181
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:125
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:403
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:111
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:181
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:242
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:116
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:162
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:230
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:92
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:96
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:95
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:135
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:176
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:145
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:123
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:314
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:144
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:190
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:112
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:83
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:112
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:145
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:137
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:270
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:100
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:138
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:5
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:244
#: ../../lvgl/docs/intermediate/details/xml/test.rst:131
msgid "API"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:229
msgid ":ref:`others/file_explorer/lv_file_explorer.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/file_explorer.rst:231
msgid ":ref:`others/file_explorer/lv_file_explorer_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:5
msgid "Font Manager"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:7
msgid "The font manager is a secondary encapsulation of the LVGL font engine, which facilitates the use and management of fonts for applications. The font management functions currently provided include:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:11
msgid "Font resource reference counting (reduces repeated creation of font resources)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:12
msgid "Font resource concatenation (font fallback)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:13
msgid "Font resource recycling mechanism (buffers recently deleted font resources to reduce the time overhead of repeated creation)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:23
msgid "Enable FreeType and Font Manager in ``lv_conf.h`` by setting the :c:macro:`LV_USE_FONT_MANAGER` macros to non-zero values, and configure :c:macro:`LV_FONT_MANAGER_NAME_MAX_LEN` to set the maximum length of the font name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:29
msgid "Initialize Font Manager"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:31
msgid "Use :cpp:func:`lv_font_manager_create` to create a font manager, where the :cpp:func:`recycle_cache_size` parameter is used to set the number of font recycling caches, which can improve font creation efficiency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:35
msgid "Use :cpp:func:`lv_font_manager_add_src_static` to add a mapping between font names and font resources to tell the font manager how to access the font resources. Note that if the font resource description structure is not statically allocated (for example, allocated from a local variable), use :cpp:func:`lv_font_manager_add_src` to add the resource. This function will copy the contents of the structure itself."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:41
msgid "Use :cpp:func:`lv_font_manager_remove_src` to remove the font resource mapping."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:43
msgid "It should be noted that the ``src`` parameter must strictly correspond to ``class_p``. ``class_p`` will affect the way the font manager interprets src. If an incompatible parameter is passed, the program may fail. For currently supported font classes, please refer to the example code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:64
msgid "Create Font from Font Manager"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:66
msgid "The parameters will be passed to the font creation function of the font backend, such as :cpp:func:`lv_freetype_font_create` and :cpp:func:`lv_tiny_ttf_create_file`. The font backend will select the supported parameters by itself and ignore the unsupported parameters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:70
msgid "The ``font_family`` parameter can be filled with the names of multiple fonts (separated by ``,``) to achieve font concatenation (when the corresponding glyph is not found in a font file, it will automatically search from the next concatenated font)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:98
msgid "Delete Font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:100
msgid "Use :cpp:func:`lv_font_manager_delete_font` to delete the font when it is no longer needed. The font manager will mark the font resource as a recyclable font so that it has the possibility of being more quickly created next time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:104
msgid "Note that you need to delete any Widgets that used the font first, and then delete the font to avoid accessing wild pointers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:115
msgid "Delete Font Manager"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:117
msgid "Use :cpp:func:`lv_font_manager_delete` to destroy the entire font manager. It should be noted that before destruction, it is necessary to ensure that the application has deleted all fonts using :cpp:func:`lv_font_manager_delete_font`.  The font manager will check the reference status of all allocated fonts.  If there are still fonts being referenced, the font manager will fail to be destroyed and the function will return false."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/font_manager/index.rst:3
msgid "Create FreeType Font"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/font_manager/index.rst:9
msgid "Create Font Family"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/font_manager/index.rst:15
msgid "Create Custom Image Font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:140
#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:565
msgid ":ref:`others/font_manager/lv_font_manager.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/font_manager.rst:142
#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:567
msgid ":ref:`others/font_manager/lv_font_manager_recycle.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:5
msgid "Fragment"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:7
msgid "Fragment is a concept copied from `Android <https://developer.android.com/guide/fragments>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:10
msgid "It represents a reusable portion of your app's UI. A fragment defines and manages its own layout, has its own lifecycle, and can handle its own events. Like Android's Fragment that must be hosted by an activity or another fragment, Fragment in LVGL needs to be hosted by a Widget, or another fragment. The fragment's view hierarchy becomes part of, or attaches to, the host's view hierarchy."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:17
msgid "Such concept also has some similarities to `UiViewController on iOS <https://developer.apple.com/documentation/uikit/uiviewcontroller>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:20
msgid "Fragment Manager is a manager holding references to fragments attached to it, and has an internal stack to achieve forward and backwards navigation. You can use fragment manager to build a navigation stack, or a multi-pane application easily."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:32
msgid "Enable :c:macro:`LV_USE_FRAGMENT` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:35
msgid "Create Fragment Class"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:56
msgid "Use ``lv_fragment_manager``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:66
msgid "Fragment Based Navigation"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/fragment/index.rst:3
msgid "Basic fragment usage"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/fragment/index.rst:9
msgid "Stack navigation example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:95
msgid ":ref:`others/fragment/lv_fragment.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/fragment.rst:97
msgid ":ref:`others/fragment/lv_fragment_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:5
msgid "Grid navigation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:7
msgid "Grid navigation (gridnav for short) is a feature that moves focus among a set of child Widgets via arrow-key presses."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:10
msgid "If the child Widgets are arranged into a grid-like layout then the up, down, left and right arrows move focus to the nearest sibling in the respective direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:14
msgid "It doesn't matter how the children are positioned, as only the current x and y coordinates are considered. This means that gridnav works with manually positioned children, as well as :ref:`flex` and :ref:`grid` layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:19
msgid "Gridnav also works if the children are arranged into a single row or column. This is useful, for example, to simplify navigation among items in a :ref:`List Widget <lv_list>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:23
msgid "Gridnav assumes that the Widget to which gridnav is added is part of a :ref:`group <indev_groups>`. This way, if the Widget with gridnav has focus, the arrow key presses are automatically forwarded to the Widget so that gridnav can process the arrow keys."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:28
msgid "To move the focus to the next widget of the group use :cpp:enumerator:`LV_KEY_NEXT` or :cpp:enumerator:`LV_KEY_PREV`. Optionally you can also use :cpp:func:`lv_group_focus_next` or :cpp:func:`lv_group_focus_prev` or the ``TAB`` key on keyboard as usual."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:34
msgid "If the container is scrollable and the focused child is out of the view, gridnav will automatically scroll the child into view."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:44
msgid "To add gridnav behavior to any Widget (e.g. one serving as a container for child Widgets that the end user will navigate among using arrow keys) use :cpp:expr:`lv_gridnav_add(container, flags)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:48
msgid "The ``flags`` argument controls the navigation behavior:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:50
msgid ":cpp:enumerator:`LV_GRIDNAV_CTRL_NONE`: Default settings"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:51
msgid ":cpp:enumerator:`LV_GRIDNAV_CTRL_ROLLOVER`: If there is no next/previous Widget in a direction, the focus goes to the Widget in the next/previous row (on left/right keys) or first/last row (on up/down keys)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:54
msgid ":cpp:enumerator:`LV_GRIDNAV_CTRL_SCROLL_FIRST`: If an arrow is pressed and the focused Widget can be scrolled in that direction then it will be scrolled instead of going to the next/previous Widget. If there is no more room for scrolling the next/previous Widget will receive focus normally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:58
msgid ":cpp:enumerator:`LV_GRIDNAV_CTRL_HORIZONTAL_MOVE_ONLY`: Only use the left/right keys for grid navigation. Up/down key events will be sent to the Widget that has focus."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:60
msgid ":cpp:enumerator:`LV_GRIDNAV_CTRL_VERTICAL_MOVE_ONLY`: Only use the up/down keys for grid navigation. Left/right key events will be sent to the Widget that has focus."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:63
msgid "While the above behaviors can be combined by bit-wise OR-ing the above values together, :cpp:enumerator:`LV_GRIDNAV_CTRL_HORIZONTAL_MOVE_ONLY` and :cpp:enumerator:`LV_GRIDNAV_CTRL_VERTICAL_MOVE_ONLY` should not be used together."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:67
msgid ":cpp:expr:`lv_gridnav_remove(container)` Removes gridnav behavior from a Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:72
msgid "Focusable Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:74
msgid "A Widget needs to be clickable or click focusable (:cpp:enumerator:`LV_OBJ_FLAG_CLICKABLE` or :cpp:enumerator:`LV_OBJ_FLAG_CLICK_FOCUSABLE`) and not hidden (:cpp:enumerator:`LV_OBJ_FLAG_HIDDEN`) to receive focus via gridnav."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:83
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer_examples.rst:5
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:617
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:290
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:211
#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:321
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:575
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:40
#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:293
#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:60
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:89
#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:149
#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:377
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:187
msgid "Examples"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/gridnav/index.rst:3
msgid "Basic grid navigation"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/gridnav/index.rst:9
msgid "Grid navigation on a list"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/gridnav/index.rst:15
msgid "Nested grid navigations"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/gridnav/index.rst:21
msgid "Simple navigation on a list widget"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/gridnav/index.rst:27
msgid "Grid navigation for only one axis"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/gridnav.rst:96
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:232
msgid ":ref:`others/gridnav/lv_gridnav.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:5
msgid "Pinyin IME"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:7
msgid "Pinyin IME provides an API to provide Chinese Pinyin input method (Chinese input) for a Keyboard Widget, which supports both 26-key and 9-key input modes. You can think of ``lv_ime_pinyin`` as a Pinyin input method plug-in for the Keyboard Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:12
msgid "Normally, an environment where :ref:`lv_keyboard` can run can also run ``lv_ime_pinyin``. There are two main influencing factors: the size of the font file and the size of the dictionary."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:23
msgid "Enable :c:macro:`LV_USE_IME_PINYIN` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:25
msgid "First use :cpp:expr:`lv_ime_pinyin_create(lv_screen_active())` to create a Pinyin input-method plug-in, then use :cpp:expr:`lv_ime_pinyin_set_keyboard(pinyin_ime, kb)` to add the Keyboard Widget you created to the Pinyin input method plug-in. You can use :cpp:expr:`lv_ime_pinyin_set_dict(pinyin_ime, your_dict)` to use a custom dictionary.  If you don't want to use the built-in dictionary, you can disable :c:macro:`LV_IME_PINYIN_USE_DEFAULT_DICT` in ``lv_conf.h``, which can save a lot of memory space."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:34
msgid "The built-in thesaurus is customized based on the **LV_FONT_SOURCE_HAN_SANS_SC_16_CJK** font library, which currently has more than 1,000 of the most common CJK radicals, so it is recommended to use a custom font and thesaurus."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:39
msgid "In the process of using the Pinyin input method plug-in, you can change the Keyboard and dictionary at any time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:45
msgid "Custom Dictionary"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:47
msgid "If you don't want to use the built-in Pinyin dictionary, or if you feel that the built-in phonetic dictionary consumes too much memory, you can use a custom dictionary."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:50
msgid "Customizing the dictionary is very simple."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:52
msgid "First, set :c:macro:`LV_IME_PINYIN_USE_DEFAULT_DICT` to ``0`` in ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:54
msgid "Then, write a dictionary in the following format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:58
msgid "Dictionary format"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:60
msgid "The arrangement order of each pinyin syllable is very important. If you need to customize your own thesaurus according to the Hanyu Pinyin syllable table, you can read `here <https://baike.baidu.com/item/%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E9%9F%B3%E8%8A%82/9167981>`__ to learn about the Hanyu Pinyin syllables and the syllable table."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:66
msgid "Then, write your own dictionary according to the following format:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:82
msgid "**The last item** must be ``{null, null}``, or it will not work properly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:89
msgid "Applying a new dictionary"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:91
msgid "After writing a dictionary according to the above dictionary format, you only need to call this function to set up and use your dictionary:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:104
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:65
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:35
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:70
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:109
msgid "Modes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:106
msgid "lv_ime_pinyin has the following modes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:108
msgid ":cpp:enumerator:`LV_IME_PINYIN_MODE_K26`: Pinyin 26-key input mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:109
msgid ":cpp:enumerator:`LV_IME_PINYIN_MODE_K9`: Pinyin 9-key input mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:110
msgid ":cpp:enumerator:`LV_IME_PINYIN_MODE_K9_NUMBER`: Numeric keypad mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:112
msgid "The Keyboard's ``TEXT``-mode layout contains buttons to change mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:114
msgid "To set the mode manually, use :cpp:expr:`lv_ime_pinyin_set_mode(pinyin_ime, mode)`. The default mode is :cpp:enumerator:`LV_IME_PINYIN_MODE_K26`."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/ime/index.rst:3
msgid "Pinyin IME 26 key input"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/ime/index.rst:9
msgid "Pinyin IME 9 key input"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:135
msgid ":ref:`others/ime/lv_ime_pinyin.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/ime_pinyin.rst:137
msgid ":ref:`others/ime/lv_ime_pinyin_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:5
msgid "Image font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:7
msgid "Draw image in **label** or **span** obj with :cpp:type:`lv_imgfont`. This is often used to display Unicode emoji icons in text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:10
msgid "Supported image formats: determined by enabled LVGL :ref:`image decoders <overview_image_decoder>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:19
msgid "Enable :c:macro:`LV_USE_IMGFONT` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:21
msgid "To create a new *imgfont*:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:29
msgid "``height`` Font size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:30
msgid "``path_cb`` A function to get the image path of a character. Pass ``NULL`` if no image should be shown, but the character itself."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:32
msgid "``user_data`` Pointer to user data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:34
msgid "To use the *imgfont* in a label, reference it: :cpp:expr:`lv_obj_set_style_text_font(label, imgfont, LV_PART_MAIN)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:37
msgid "To destroy the *imgfont* that is no longer used, use :cpp:expr:`lv_imgfont_destroy(imgfont)`."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/imgfont/index.rst:2
msgid "Use emojis in a text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/imgfont.rst:56
msgid ":ref:`others/imgfont/lv_imgfont.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/index.rst:5
msgid "Auxiliary Modules"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:5
msgid "Monkey"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:7
msgid "The Monkey module provides LVGL applications with a simple monkey test.  Monkey Testing is a technique where the user tests the application or system by providing random inputs and checking the behavior or seeing whether the application or system will crash.  This module provides this service as simulated random input to stress test an LVGL application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:20
msgid "First, enable :c:macro:`LV_USE_MONKEY` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:22
msgid "Next, declare a variable (it can be local) of type :c:type:`lv_monkey_config_t` to define the configuration structure, initialize it using :cpp:expr:`lv_monkey_config_init(cfg)` then set its ``type`` member to the desired type of :ref:`input device <indev>`, and set the ``min`` and ``max`` values for its ``period_range`` and ``input_range`` members to set the time ranges (in milliseconds) and input ranges the Monkey module will use to generate random input at random times."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:29
msgid "Next, call :cpp:expr:`lv_monkey_create(cfg)` to create the Monkey.  It returns a pointer to the ``lv_monkey_t`` created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:32
msgid "Finally call :cpp:expr:`lv_monkey_set_enable(monkey, true)` to enable Monkey."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:34
msgid "If you want to pause the monkey, call :cpp:expr:`lv_monkey_set_enable(monkey, false)`. To delete it, call :cpp:expr:`lv_monkey_delete(monkey)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:38
msgid "Note that ``input_range`` has different meanings depending on the ``type`` input device:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:40
msgid ":cpp:enumerator:`LV_INDEV_TYPE_POINTER`: No effect, click randomly within the pixels of the screen resolution."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:41
msgid ":cpp:enumerator:`LV_INDEV_TYPE_ENCODER`: The minimum and maximum values of ``enc_diff``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:42
msgid ":cpp:enumerator:`LV_INDEV_TYPE_BUTTON`: The minimum and maximum values of ``btn_id``. Use :cpp:func:`lv_monkey_get_indev` to get the input device, and use :cpp:func:`lv_indev_set_button_points` to map the key ID to the coordinates."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:45
msgid ":cpp:enumerator:`LV_INDEV_TYPE_KEYPAD`: No effect, Send random :ref:`indev_keys`."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/monkey/index.rst:3
msgid "Touchpad monkey example"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/monkey/index.rst:9
msgid "Encoder monkey example"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/monkey/index.rst:15
msgid "Button monkey example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/monkey.rst:65
msgid ":ref:`others/monkey/lv_monkey.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:5
msgid "Widget ID"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:7
msgid "Widgets can optionally have identifiers added to their functionality if needed for the application.  Exactly how that happens is designed to be flexible, and can morph with the needs of the application.  It can even be a timestamp or other data current at the time the Widget was created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:19
msgid "Enable Widget ID functionality by setting :c:macro:`LV_USE_OBJ_ID` to ``1`` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:21
msgid "Once enabled, several things change:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:23
msgid "each Widget will now have a ``void *`` field called ``id``;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:24
msgid "these two API functions become available:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:26
msgid ":cpp:expr:`lv_obj_get_id(widget)`,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:27
msgid ":cpp:expr:`lv_obj_find_by_id(widget, id)`;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:29
msgid "several more Widget-ID-related API functions become available if :c:macro:`LV_USE_OBJ_ID_BUILTIN` is non-zero (more on this below);"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:31
msgid "two additional configuration macros both :c:macro:`LV_OBJ_ID_AUTO_ASSIGN` and :c:macro:`LV_USE_OBJ_ID_BUILTIN` now have meaning."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:36
msgid ":c:macro:`LV_OBJ_ID_AUTO_ASSIGN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:38
msgid "This macro  in ``lv_conf.h`` defaults to whatever value :c:macro:`LV_USE_OBJ_ID` equates to.  You can change this if you wish.  Either way, if it equates to a non-zero value, it causes two things to happen:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:42
msgid ":cpp:expr:`lv_obj_assign_id(class_p, widget)` will be called at the end of each Widget's creation, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:44
msgid ":cpp:expr:`lv_obj_free_id(widget)` will be called at the end of the sequence when each Widget is deleted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:47
msgid "Because of this timing, custom versions of these functions can be used according to the below, and they can even be used like \"event hooks\" to implement a trace operation that occurs when each Widget is created and deleted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:52
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:73
msgid ":cpp:expr:`lv_obj_assign_id(class_p, widget)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:54
msgid "This function (whether provided by LVGL or by you --- more on this below) is responsible for assigning a value to the Widget's ``id`` field, and possibly do other things, depending on the implementation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:59
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:74
msgid ":cpp:expr:`lv_obj_free_id(widget)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:61
msgid "This function (whether provided by LVGL or by you --- more on this below) is responsible for doing the clean-up of any resources allocated by :cpp:func:`lv_obj_assign_id()`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:67
msgid ":c:macro:`LV_USE_OBJ_ID_BUILTIN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:69
msgid "This macro  in ``lv_conf.h`` equates to ``1`` by default.  You can change this if you wish.  When it equates to a non-zero value the following function implementations are provided by LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:75
msgid ":cpp:expr:`lv_obj_set_id(widget, id)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:76
msgid ":cpp:expr:`lv_obj_stringify_id(widget, buf, len)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:77
msgid ":cpp:expr:`lv_obj_id_compare(id1, id2)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:79
msgid "These supply the default implementation for Widget IDs, namely that for each Widget created, :cpp:expr:`lv_obj_stringify_id(widget, buf, len)` will produce a unique string for it.  Example:  if the following 6 Widgets are created in this sequence:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:83
msgid "Screen"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:84
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:86
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:87
msgid "Label"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:85
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:31
msgid "Button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:88
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:911
msgid "Image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:90
msgid "the strings produced by :cpp:expr:`lv_obj_stringify_id(widget, buf, len)` would be"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:92
msgid "obj1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:93
msgid "label1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:94
msgid "btn1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:95
msgid "label2"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:96
msgid "label3"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:97
msgid "image1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:99
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:104
msgid "respectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:105
msgid "Using a custom ID generator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:107
msgid "If you wish, you can provide custom implementations for several Widget-ID related functions.  You do this by first setting :c:macro:`LV_USE_OBJ_ID_BUILTIN` to `0` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:111
msgid "You will then need to provide implementations for the following functions (and link them with LVGL):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:119
msgid "If :c:macro:`LV_OBJ_ID_AUTO_ASSIGN` equates to a non-zero value (or if you otherwise simply need to use them), you will also need to provide implementations for:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:127
msgid "If :c:macro:`LV_BUILD_TEST` equates to a non-zero value and you are including LVGL test code in your compile (or if you otherwise simply need to use them), you will also need to provide an implementation for:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:136
msgid "Examples of implementations of these functions exist in ``lv_obj_id_builtin.c``, but you are free to use a different design if needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:139
msgid ":cpp:func:`lv_obj_stringify_id` converts the passed ``widget`` to a string representation (typically incorporating the ``id`` field) and writes it into the buffer provided in its ``buf`` argument."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:143
msgid ":cpp:func:`lv_obj_id_compare` compares 2 ``void * id`` values and returns ``0`` when they are considered equal, and non-zero otherwise."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:146
msgid "If :c:macro:`LV_OBJ_ID_AUTO_ASSIGN` equates to a non-zero value, :cpp:func:`lv_obj_assign_id` is called when a Widget is created.  It is responsible for assigning a value to the Widget's ``id`` field.  A pointer to the Widget's final class is passed in its ``class_p`` argument in case it is needed for determining the value for the ``id`` field, or for other possible needs related to your design for Widget IDs.  Note that this pointer may be different than :cpp:expr:`widget->class_p` which is the class of the Widget currently being created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:154
msgid "If :c:macro:`LV_OBJ_ID_AUTO_ASSIGN` equates to a non-zero value, :cpp:func:`lv_obj_free_id` is called when a Widget is deleted.  It needs to perform the clean-up for any resources allocated by :cpp:func:`lv_obj_assign_id`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:160
msgid "Dumping a Widget Tree"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:162
msgid "Regardless of the state of any of the above macros, the function :cpp:expr:`lv_obj_dump_tree(widget)` provides a \"dump\" of the Widget Tree for the specified Widget (that Widget plus all its children recursively) using the currently-configured method used by the :c:macro:`LV_LOG_USER` macro.  If NULL is passed instead of a pointer to a \"root\" Widget, the dump will include the Widget Tree for all :ref:`Screens`, for all :ref:`Displays <display>` in the system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:169
msgid "For :c:macro:`LV_LOG_USER` to produce output, the following needs to be true in ``lv_conf.h``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:172
msgid ":c:macro:`LV_USE_LOG` must equate to a non-zero value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:173
msgid ":c:macro:`LV_LOG_LEVEL` <= :c:macro:`LV_LOG_LEVEL_USER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:175
msgid "It will recursively walk through all that Widget's children (starting with the Widget itself) and print the Widget's parent's address, the Widget's address, and if :c:macro:`LV_USE_OBJ_ID` equates to a non-zero value, will also print the output of :cpp:func:`lv_obj_stringify_id` for that Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:180
msgid "This can be useful in the event of a UI crash.  From that log you can examine the state of the Widget Tree when :cpp:expr:`lv_obj_dump_tree(widget)` was called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:183
msgid "For example, if a pointer to a deleted Widget is stored in a Timer's :cpp:expr:`timer->user_data` field when the timer event callback is called, attempted use of that pointer will likely cause a crash because the pointer is not valid any more.  However, a timely dump of the Widget Tree right before that point will show that the Widget no longer exists."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:191
msgid "Find child by ID"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:194
msgid "``lv_obj_find_by_id(widget, id)`` is deprecated. To find a widget use ``obj_name``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_id.rst:196
msgid ":cpp:expr:`lv_obj_find_by_id(widget, id)` will perform a recursive walk through ``widget``\\ 's children and return the first child encountered having the given ID."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:5
msgid "Widget Properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:7
msgid "Widget Properties provides a way to greatly reduce the size of the interface between LVGL and whatever logic layer is just above it, to get and set the most important properties of Widgets.  It's intended use is to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:11
msgid "simplify (decreasing development time) writing bindings for LVGL in another language, such as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:14
msgid "Micropython,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:15
msgid "Lua,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:16
msgid "Python,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:17
msgid "Perl,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:18
msgid ".NET"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:20
msgid "make it possible to control the UI (or parts of it, e.g. animation) via external input, without modifying firmware, such as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:23
msgid "an external text file (YAML, JSON, XML, custom)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:24
msgid "any external input source (e.g. serial)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:26
msgid "While using it consumes more program space and more CPU overhead while setting and getting Widget properties, it is designed so minimize that additional CPU overhead."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:32
msgid "What is a Widget Property?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:34
msgid "A Widget's properties are the combined set of :ref:`styles` plus additional properties that are unique to each type of Widget, that determine what the Widget looks like and how it behaves.  Examples:  size, position, color, are properties of all Widgets whereas text, long-mode, selection-start, and selection-end, are properties unique to Label Widgets.  A Widget's :ref:`local styles <style_local>` are also valid properties in this context."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:41
msgid "The non-style Widget properties available for a given Widget are implemented at the top of that Widget's primary ``.c`` file as a ``const`` id-to-function-pointer lookup array, like this example for the Label Widget:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:72
msgid "This array is attached to the ``properties`` field of the Widget's class, so all Widgets of the same type share the same id-to-function-pointer lookup array."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:75
msgid "Some properties are read-only.  When this is the case, only the ``getter`` field in the corresponding array element will be initialized with a function pointer. Example:  an object's child-Widget count or scroll position must be controlled via other types of input, but their values are readable through this API."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:87
msgid "By default, this feature of LVGL is turned off.  It can be turned on by configuring :c:macro:`LV_USE_OBJ_PROPERTY` to ``1`` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:90
msgid "The 3 functions that then become available are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:92
msgid ":cpp:type:`lv_result_t`  :cpp:expr:`lv_obj_set_property(widget, lv_property_t * value)` Sets specified property of Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:94
msgid ":cpp:type:`lv_property_t`  :cpp:expr:`lv_obj_get_property(widget, lv_prop_id_t id)` Reads property value from Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:96
msgid ":cpp:type:`lv_result_t`  :cpp:expr:`lv_obj_set_properties(widget, lv_property_t * values, count)` Sets multiple Widget properties from an array of :cpp:type:`lv_property_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:99
msgid "An ``lv_prop_id_t`` is a :ref:`widget_property_id`, whereas an ``lv_property_t`` is a struct that pairs a :ref:`widget_property_id` with a :ref:`widget_property_value`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:102
msgid "The following is an example of an array that could be used as the ``values`` argument in :cpp:func:`lv_obj_set_properties`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:116
msgid "Alternately, :cpp:expr:`lv_obj_set_property(widget, value)` could be called using this array's individual ``value`` elements inside a loop."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:123
msgid "Property ID"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:125
msgid ":cpp:type:`lv_prop_id_t` identifies which property to get/set.  It is an enum value defined in the primary ``.h`` file for the Widget in question.  Because the actual names are \"assembled\" by a preprocessor string-concatenation macro and are thus hard to visualize, you can also find the names in the Widget's primary ``.c`` file in the ``properties[]`` array initializing the ``.id`` fields in the array.  For example, ``LV_PROPERTY_LABEL_TEXT`` is one found in ``lv_label.c``, and the properties available to all Widgets are found near the top of the ``lv_obj.c`` file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:133
msgid "That array is attached to the Widget's class, enabling \"getter\" and \"setter\" functions to be looked up for each type of Widget where Widget properties has been implemented. (Note:  this is done internally so you don't have to.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:137
msgid "If the property you need to set or get using this API is not implemented yet, you can add your own Widget property ID following same rules and using one of two helper macros in the ``enum`` in the Widget's primary ``.h`` file.  In both cases, the \"assembled\" value is a 32-bit value:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:142
msgid ":c:macro:`LV_PROPERTY_ID` (for single values -- see :ref:`Single Values` below)`; bits ``<31:28>`` contain the property's value type and bits ``<27:0>`` contain the property ID."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:145
msgid ":c:macro:`LV_PROPERTY_ID2` (for paired values -- see :ref:`Paired Values` below)`; bits ``<31:28>`` contain the type for the property's 1st value, bits ``<27:24>`` contain the type for the 2nd value, and bits ``<23:0>`` contain the property ID."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:149
msgid "Just make sure the ID is unique across all Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:151
msgid "Note that :cpp:type:`lv_style_prop_t` (enumerator values beginning with ``LV_PROPERTY_STYLE_...``) are also valid property IDs, and can be used to set or get a Widget's style values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:158
msgid "Property Value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:160
msgid ":cpp:type:`lv_property_t` is a struct that begins with an ``id`` field whose meaning is the same as property ID described above, paired with a value, which is a union of all possible property types including integer, pointer and color.  The ``value`` field is also capable of carrying the different value types for styles.  It does this by being a union of all the different types that might be needed.  The list of \"union-ed\" fields at this writing are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:170
msgid "Single Values"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:210
msgid "Paired Values"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:229
msgid "You can find the current :cpp:type:`lv_property_t` struct in the `lv_obj_property.h <https://github.com/lvgl/lvgl/blob/master/src/core/lv_obj_property.h>`__ file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:234
msgid "Property ID Lookup by Name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:236
msgid "Setting configuration macro :c:macro:`LV_USE_OBJ_PROPERTY_NAME` to ``1`` enables the following functions to look up property IDs by passing property name (a string):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:239
msgid ":cpp:type:`lv_prop_id_t` :cpp:expr:`lv_obj_property_get_id(widget, name)` Gets property ID by recursively searching for ``name`` in Widget's class hierarchy, and if still not found, then searches style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:243
msgid ":cpp:type:`lv_prop_id_t` :cpp:expr:`lv_obj_class_property_get_id(class_p, name)` Gets property ID by doing a non-recursive search for ``name`` directly in Widget class properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:247
msgid ":cpp:type:`lv_prop_id_t` :cpp:expr:`lv_style_property_get_id(name)` Gets style property ID by name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:250
msgid "The latter two functions are useful when you already know ``name`` is among the properties of a specific Widget class, or is a style name, since a property name may exist in both lists.  Because of the search sequence in :cpp:expr:`lv_obj_property_get_id(widget, name)`, if a name does exist in both lists, then using this function forces the name in the Widget's class hierarchy properties to have precedence over the style name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:257
msgid "You can tell which names are available by looking in the ``.c`` files in the ``./src/widgets/property/`` directory.  Note that to support binary name searches, these arrays are generated so that they are guaranteed to be in alphabetical order. If you need to add a property that is not present, it is recommended to add it in the ``enum`` near the top of the Widget's primary ``.h`` file, and re-generate these lists using ``./scripts/properties.py`` to ensure alphabetical ordering is preserved."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:267
msgid "Additional Notes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:269
msgid "For the ``lv_property_t * value`` argument of the :cpp:func:`lv_obj_set_property` function, the language used to call that function (e.g. in a static or dynamically-loaded library) may need additional code to convert values from their local data type (e.g. dict, table, etc.) to a C struct before passing it to the :cpp:func:`lv_obj_set_property` function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/obj_property.rst:281
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:748
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:685
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:192
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:275
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:171
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:239
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:130
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:151
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:273
msgid ":ref:`widgets/property/lv_obj_property_names.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/index.rst:5
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:168
msgid "Observer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:5
#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:24
msgid "How to Use"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:10
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:8
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:8
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:9
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:10
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:10
#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:9
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:9
#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:8
#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:10
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:8
#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:8
#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:6
#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:8
#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:6
#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:19
#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:5
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:8
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:10
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:9
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:12
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:20
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:8
#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:8
#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:8
#: ../../lvgl/docs/intermediate/details/xml/overview/index.rst:5
#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:8
#: ../../lvgl/docs/intermediate/details/xml/test.rst:8
msgid "Overview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:14
msgid "The ``lv_observer`` module is an implementation of the `Observer Pattern`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:16
msgid "This implementation consists of:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "Subjects"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:18
msgid "(in global memory or heap) are \"logic packages\", each containing the value being \"observed\" and its type (integer (``int32_t``), a string, a pointer, an :cpp:type:`lv_color_t`, a ``float``, or a group);"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "Observers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:22
msgid "(zero or more per Subject, always dynamically-allocated) are always attached to exactly one Subject, and provide user-defined notifications each the time Subject's value changes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:26
msgid "A Subject and its Observers can be used in various ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:28
msgid "Simply subscribe to a Subject and get notified when the Subject's value changes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:30
msgid "Subscribe to a group Subject (connects a group of Subjects) to get notified when any of the Subjects' values change in the group."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:33
msgid "Bind Widgets to Subjects to automatically match the Widget's value with the Subject (e.g. a Label's text or an Arc's value)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:43
msgid "Using Observer first requires :c:macro:`LV_USE_OBSERVER` be configured to ``1``. (It is ``1`` by default, and can be set to ``0`` to save some program space if you will not be using Observer.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:47
msgid "A typical use case looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:104
msgid "Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:107
msgid "Subject Initialization"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:109
msgid "Subjects have to be static or global variables, or dynamically-allocated :cpp:type:`lv_subject_t` objects.  Reason:  their content must remain valid through the life of the Subject."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:113
msgid "To initialize a Subject use ``lv_subject_init_<type>(&subject, params, init_value)``. The following initialization functions exist, one for each of the Subject types:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "Integer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:116
msgid "void :cpp:expr:`lv_subject_init_int(subject, int_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "Float"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:117
msgid "void :cpp:expr:`lv_subject_init_float(subject, float_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "String"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:118
msgid "void :cpp:expr:`lv_subject_init_string(subject, buf, prev_buf, buf_size, initial_string)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "Pointer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:119
msgid "void :cpp:expr:`lv_subject_init_pointer(subject, ptr)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:27
msgid "Color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:120
msgid "void :cpp:expr:`lv_subject_init_color(subject, color)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "Group"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:121
msgid "void :cpp:expr:`lv_subject_init_group(group_subject, subject_list[], count)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:125
msgid "Setting a Subject's Value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:127
msgid "The following functions are used to update a Subject's value:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:129
msgid "void :cpp:expr:`lv_subject_set_int(subject, int_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:130
msgid "void :cpp:expr:`lv_subject_copy_string(subject, buf)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:131
msgid "void :cpp:expr:`lv_subject_set_pointer(subject, ptr)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:132
msgid "void :cpp:expr:`lv_subject_set_color(subject, color)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:134
msgid "At the end of each of these calls, if the new value differs from the previous value, a notification is sent to all current Observers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:139
msgid "Getting a Subject's Value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:141
msgid "The following functions are used to get a Subject's current value:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:144
msgid "int32_t      :cpp:expr:`lv_subject_get_int(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:145
msgid "float        :cpp:expr:`lv_subject_get_float(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:146
msgid "const char * :cpp:expr:`lv_subject_get_string(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:147
msgid "const void * :cpp:expr:`lv_subject_get_pointer(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:148
msgid "lv_color_t   :cpp:expr:`lv_subject_get_color(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:152
msgid "Getting a Subject's Previous Value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:154
msgid "The following functions are used to get a Subject's previous value:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:157
msgid "int32_t      :cpp:expr:`lv_subject_get_previous_int(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:158
msgid "float        :cpp:expr:`lv_subject_get_previous_float(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:159
msgid "const char * :cpp:expr:`lv_subject_get_previous_string(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:160
msgid "const void * :cpp:expr:`lv_subject_get_previous_pointer(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:161
msgid "lv_color_t   :cpp:expr:`lv_subject_get_previous_color(subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:172
msgid "Subscribing to a Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:174
msgid "The action of subscribing to a Subject:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:176
msgid "dynamically allocates an Observer object,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:177
msgid "attaches it to the Subject,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:178
msgid "performs an initial notification to the Observer (allowing the Observer to update itself with the Subject's current value), and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:180
msgid "returns a pointer to the newly-created Observer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:182
msgid "Thereafter the Observer will receive a notification each time the Subject's value changes, as long as that Observer remains attached (subscribed) to that Subject."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:185
msgid "Notifications are performed by calling the callback function provided when subscribing to the Subject."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:189
msgid "Simple Subscription"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:191
msgid "To subscribe to a Subject one of the ``lv_subject_add_observer...()`` functions are used. This is covered below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:194
msgid "Alternately, if you want to bind a Subject's value to a Widget's property, one of the ``lv_<widget_type>_bind_...()`` functions can be used.  See :ref:`observer_widget_binding` for more details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:198
msgid "By using  ``lv_obj_add_subject_...()`` it's also possible to change a subject's value on a trigger. It's covered in :ref:`change_subject_on_event`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:202
msgid "For the most basic use case, subscribe to a Subject by using the following function:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:204
msgid "lv_observer_t * observer =  :cpp:expr:`lv_subject_add_observer(&some_subject, some_observer_cb, user_data)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:206
msgid "where the Observer's notification callback should look like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:215
msgid "This function returns a pointer to the newly-created Observer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:217
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:233
msgid "When using this method of subscribing, it is the responsibility of the user to call :cpp:expr:`lv_observer_remove(observer)` when the Observer is no longer needed, which both unsubscribes it from the Subject and deletes it from the LVGL heap."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:222
msgid "Subscribing While Associating Observer with a Non-Widget Object"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:224
msgid "The function subscribes to a Subject additionally associates the Observer with a pointer to any type of object, a copy of which is saved in the Observer's ``target`` field.  This function should be used when the pointer *does not* point to a Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:228
msgid "lv_observer_t * observer =  :cpp:expr:`lv_subject_add_observer_with_target(&some_subject, some_observer_cb, some_pointer, user_data)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:230
msgid "A copy of the passed pointer can be retrieved by calling :cpp:expr:`lv_observer_get_target(observer)`, e.g. inside the callback function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:238
msgid "Subscribing While Associating Observer with a Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:240
msgid "The function below associates a Widget with an Observer while subscribing to a Subject.  A copy of the pointer to that Widget is saved in the Observer's ``target`` field.  This works exactly like the above method except that when the Widget is deleted, the Observer thus created will be automatically unsubscribed from the Subject and deleted from the LVGL heap.  Note this is different from :ref:`observer_widget_binding`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:247
msgid "lv_observer_t * observer =  :cpp:expr:`lv_subject_add_observer_obj(&some_subject, some_observer_cb, widget, user_data)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:249
msgid "Any number of Observers can be created and be associated with a Widget this way."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:251
msgid "A copy of the pointer to the Widget can be retrieved by calling :cpp:expr:`lv_observer_get_target_obj(observer)`, e.g. inside the callback function. Note that this function returns the stored pointer as a ``lv_obj_t *`` type, as opposed to the ``void *`` type returned by :cpp:expr:`lv_observer_get_target_obj(observer)`. (:cpp:expr:`lv_observer_get_target(observer)` can still be used if you need that pointer as a ``void *`` type for any reason, but in practice, this would be rare.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:260
msgid "Unsubscribing from a Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:262
msgid "When an Observer and its associated events are no longer needed, you can remove it from memory using any of the methods below, depending on the effect you want to create:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:265
msgid "If Widget needs to be deleted, simply delete the Widget, which will automatically gracefully remove the Observer (and its events) from the Subject, while deleting the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:269
msgid "If Widget does NOT need to be deleted:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:271
msgid ":cpp:expr:`lv_obj_remove_from_subject(widget, subject)` deletes all Observers associated with ``widget``.  ``subject`` can be NULL to unsubscribe the Widget from all associated Subjects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:274
msgid ":cpp:expr:`lv_subject_deinit(subject)` gracefully disconnects ``subject`` from all associated Observers and Widget events.  This includes subscriptions made using any of the :ref:`observer_widget_binding` functions covered below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:277
msgid ":cpp:expr:`lv_observer_remove(observer)` deletes that specific Observer and gracefully disconnects it from its ``subject`` and any associated Widgets, where ``observer`` is the return value any of the above ``lv_subject_add_observer_...()`` functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:286
msgid "Subject Groups"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:288
msgid "When something in your system relies on more than one value (i.e. it needs to be notified when any of a SET of two or more values changes), it can be made an Observer of a Subject Group."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:292
msgid "Let us consider an example of an instrument which measures either voltage or current. To display the measured value on a label, 3 things are required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:295
msgid "What is being measured (current or voltage)?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:296
msgid "What is the measured value?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:297
msgid "What is the range or unit (\"mV\", \"V\", \"mA\", \"A\")?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:299
msgid "When any of these 3 input values change, the label needs to be updated, and it needs to know all 3 values to compose its text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:302
msgid "To handle this you can create an array from the addresses of all the Subjects that are relied upon, and pass that array as a parameter when you initialize a Subject with GROUP type."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:311
msgid "Observers are then added to Subject Groups (e.g. ``subject_all``) in the usual way. When this is done, a change to the value of any of the Subjects in the group triggers a notification to all Observers subscribed to the Subject Group (e.g. ``subject_all``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:315
msgid "As an example, the above scenario with Voltage/Current measurement might look like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:355
msgid "Widget Binding"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:357
msgid "The following methods of subscribing to an integer-type Subject associate the Observer with ONE of a Widget's properties as thought that property itself were the Observer.  Any of the following Widget properties can be thus bound to an Subject's integer value:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:362
msgid "flag (or OR-ed combination of flags) from from the ``LV_OBJ_FLAG_...`` enumeration values;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:363
msgid "state (or OR-ed combination of states) from the ``LV_STATE_...`` enumeration values;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:364
msgid "text value for Label Widgets;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:365
msgid "integer value for these Widget types:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:367
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1047
msgid "Arc"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:368
msgid "Drop-Down"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:369
msgid "Roller"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:370
msgid "Slider"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:372
msgid "Any number of Observers can be created for a single Widget, each bound to ONE of the above properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:375
msgid "For all of the ``lv_..._bind_...()`` functions covered below, they are similar to :cpp:expr:`lv_subject_add_observer_obj(&some_subject, some_observer_cb, widget, user_data)` in that they create an Observer and associates the Widget with it.  What is different is that updates to the Widget's property thus bound are handled internally -- the user *does not supply callback functions* for any of these subscribing methods -- the callback methods are supplied by the Observer subsystem."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:384
msgid "While the examples below show saving a reference to the created Observer objects for the various ``lv_..._bind_...()`` functions, it is not necessary to do so unless you need them for some purpose, because the created Observer objects will be automatically deleted when the Widget is deleted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:391
msgid "Any Widget Type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:394
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:448
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:561
msgid "Flags"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:396
msgid "The following methods of subscribing to an integer Subject affect a Widget's flag (or OR-ed combination of flags).  When the subscribing occurs, and each time the Subject's value is changed thereafter, the Subject's value is compared with the specified reference value, and the specified flag(s) is (are):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:401
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:423
msgid "SET when the Subject's integer value fulfills the indicated condition, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:402
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:424
msgid "CLEARED otherwise."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:404
msgid "Here are the functions that carry out this method of subscribing to a Subject.  The ``flags`` argument can contain a single, or bit-wise OR-ed combination of any of the ``LV_OBJ_FLAG_...`` enumeration values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "equal"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:408
msgid ":cpp:expr:`lv_obj_bind_flag_if_eq(widget, &subject, flags, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "not equal"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:409
msgid ":cpp:expr:`lv_obj_bind_flag_if_not_eq(widget, &subject, flags, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "greater than"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:410
msgid ":cpp:expr:`lv_obj_bind_flag_if_gt(widget, &subject, flags, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "greater than or equal"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:411
msgid ":cpp:expr:`lv_obj_bind_flag_if_ge(widget, &subject, flags, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "less than"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:412
msgid ":cpp:expr:`lv_obj_bind_flag_if_lt(widget, &subject, flags, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "less than or equal"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:413
msgid ":cpp:expr:`lv_obj_bind_flag_if_le(widget, &subject, flags, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:416
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:413
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:37
msgid "States"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:418
msgid "The following methods of subscribing to an integer Subject affect a Widget's states (or OR-ed combination of states).  When the subscribing occurs, and each time the Subject's value is changed thereafter, the Subject's value is compared with the specified reference value, and the specified state(s) is (are):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:426
msgid "Here are the functions that carry out this method of subscribing to a Subject.  The ``states`` argument can contain a single, or bit-wise OR-ed combination of any of the ``LV_STATE_...`` enumeration values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:430
msgid ":cpp:expr:`lv_obj_bind_state_if_eq(widget, &subject, states, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:431
msgid ":cpp:expr:`lv_obj_bind_state_if_not_eq(widget, &subject, states, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:432
msgid ":cpp:expr:`lv_obj_bind_state_if_gt(widget, &subject, states, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:433
msgid ":cpp:expr:`lv_obj_bind_state_if_ge(widget, &subject, states, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:434
msgid ":cpp:expr:`lv_obj_bind_state_if_lt(widget, &subject, states, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:435
msgid ":cpp:expr:`lv_obj_bind_state_if_le(widget, &subject, states, ref_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:438
msgid "Checked State"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:440
msgid "The following method of subscribing to an integer Subject affects a Widget's :cpp:enumerator:`LV_STATE_CHECKED` state.  When the subscribing occurs, and each time the Subject's value is changed thereafter, the Subject's value is compared to a reference value of ``0``, and the :cpp:enumerator:`LV_STATE_CHECKED` state is:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:445
msgid "CLEARED when the Subject's value is 0, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:446
msgid "SET when the Subject's integer value is non-zero."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:448
msgid "Note that this is a two-way binding (Subject <===> Widget) so direct (or programmatic) interaction with the Widget that causes its :cpp:enumerator:`LV_STATE_CHECKED` state to be SET or CLEARED also causes the Subject's value to be set to ``1`` or ``0`` respectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:453
msgid ":cpp:expr:`lv_obj_bind_checked(widget, &subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:457
msgid "Label Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:461
msgid "This method of subscribing to an integer Subject affects a Label Widget's ``text``.  The Subject can be an STRING, POINTER or INTEGER type."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:464
msgid "When the subscribing occurs, and each time the Subject's value is changed thereafter, the Subject's value is used to update the Label's text as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "string Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:467
msgid "Subject's string is used to directly update the Label's text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "pointer Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:469
msgid "If NULL is passed as the ``format_string`` argument when subscribing, the Subject's pointer value is assumed to point to a NUL-terminated string. and is used to directly update the Label's text.  See :ref:`observer_format_string` for other options."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "integer Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:474
msgid "Subject's integer value is used with the ``format_string`` argument. See See :ref:`observer_format_string` for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:477
msgid "Note that this is a one-way binding (Subject ===> Widget)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:479
msgid ":cpp:expr:`lv_label_bind_text(label, &subject, format_string)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:484
msgid "The ``format_string`` Argument"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:486
msgid "The ``format_string`` argument is optional and if provided, must contain exactly 1 printf-like format specifier and be one of the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "string or pointer Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:489
msgid "\"%s\" to format the new pointer value as a string or \"%p\" to format the pointer as a pointer (typically the pointer's address value is spelled out with 4, 8 or 16 hexadecimal characters depending on the platform)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:494
msgid "\"%d\" format specifier (``\"%\" PRIdxx`` --- a cross-platform equivalent where ``xx`` can be ``8``, ``16``, ``32`` or ``64``, depending on the platform)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:0
msgid "float Subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:498
msgid "\"%f\" format specifier, or e.g. \"%0.2f\" to display two digits after the decimal point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:501
msgid "If ``NULL`` is passed for the ``format_string`` argument:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:503
msgid "Updates expect the pointer to point to a NUL-terminated string."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:504
msgid "The Label will simply display the number. Equivalent to \"%d\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:505
msgid "The Label will display the value with \"%0.1f\" format string."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:507
msgid "**Example:**  \"%d |deg|\\C\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:511
msgid "Arc Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:513
msgid "This method of subscribing to an integer Subject affects an Arc Widget's integer value directly.  Note that this is a two-way binding (Subject <===> Widget) so an end user's direct interaction with the Arc Widget updates the Subject's value and vice versa.  (Requires :c:macro:`LV_USE_ARC` to be configured to ``1``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:518
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:532
msgid "It support integer and float subjects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:521
msgid ":cpp:expr:`lv_arc_bind_value(arc, &subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:525
msgid "Slider Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:527
msgid "This method of subscribing to an integer Subject affects a Slider Widget's integer value directly.  Note that this is a two-way binding (Subject <===> Widget) so an end user's direct interaction with the Slider Widget updates the Subject's value and vice versa.  (Requires :c:macro:`LV_USE_SLIDER` to be configured to ``1``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:534
msgid ":cpp:expr:`lv_slider_bind_value(slider, &subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:538
msgid "Roller Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:540
msgid "This method of subscribing to an integer Subject affects a Roller Widget's integer value directly.  Note that this is a two-way binding (Subject <===> Widget) so an end user's direct interaction with the Slider Widget updates the Subject's value and vice versa.  (Requires :c:macro:`LV_USE_ROLLER` to be configured to ``1``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:545
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:558
msgid "It support only integer subjects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:547
msgid ":cpp:expr:`lv_roller_bind_value(roller, &subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:551
msgid "Drop-Down Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:553
msgid "This method of subscribing to an integer Subject affects a Drop-Down Widget's integer value directly.  Note that this is a two-way binding (Subject <===> Widget) so an end user's direct interaction with the Drop-Down Widget updates the Subject's value and vice versa.  (Requires :c:macro:`LV_USE_DROPDOWN` to be configured to ``1``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:560
msgid ":cpp:expr:`lv_dropdown_bind_value(dropdown, &subject)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:566
msgid "Change Subject on Event"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:568
msgid "It's a common requirement to update a subject based on a user action (trigger). To simplify this, *subject set* and *increment* actions can be attached directly to any widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:571
msgid "Internally, these are implemented as special event callbacks. Note: these callbacks are **not** automatically removed when a subject is deinited."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:575
msgid "Increment"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:577
msgid ":cpp:expr:`lv_obj_add_subject_increment_event(obj, subject, step, min, max)` Increments the subject's value by `step`, clamped between `min` and `max`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:580
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:158
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:59
#: ../../lvgl/docs/intermediate/details/debugging/log.rst:43
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:74
#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:39
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:92
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:118
#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:45
#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:192
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:40
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:139
msgid "For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:582
msgid ":cpp:expr:`lv_obj_add_subject_increment_event(button1, subject1, LV_EVENT_CLICKED, 5, -10, 80)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:584
msgid "This will increment `subject1` by 5 when `button1` is clicked. The resulting value will be constrained to the range -10 to 80."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:587
msgid "Using a negative `step` will decrement the value instead."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:590
msgid "Set to a Value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:592
msgid ":cpp:expr:`lv_obj_add_subject_set_int_event(obj, subject, trigger, value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:593
msgid ":cpp:expr:`lv_obj_add_subject_set_string_event(obj, subject, trigger, text)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:595
msgid "These functions set the given subject (integer or string) to a fixed value when the specified trigger event occurs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:603
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:744
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:191
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:186
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:233
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:128
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:149
msgid ":ref:`others/observer/lv_observer.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/observer/observer.rst:605
msgid ":ref:`others/observer/lv_observer_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/observer/index.rst:3
msgid "Bind a slider's value to a label"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/observer/index.rst:9
msgid "Handling login and its states"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/observer/index.rst:15
msgid "Set time with 12/24 mode and AM/PM"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/observer/index.rst:21
msgid "Custom tab view with state management"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/observer/index.rst:27
msgid "Firmware update process"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/observer/index.rst:33
msgid "Modular style update on theme change"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:5
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:678
msgid "Snapshot"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:7
msgid "Snapshot provides an API to take a snapshot image for an LVGL Widget together with its children.  The image will look exactly like the Widget on the display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:17
msgid "Simply call function :cpp:expr:`lv_snapshot_take(widget, color_format)` to generate the image descriptor which can be used as an Image Widget's image source using :cpp:func:`lv_image_set_src`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:21
msgid "Note, only following color formats are supported at this time:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:23
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:147
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:221
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_RGB565`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:24
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:146
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:218
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_RGB888`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:25
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:143
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:219
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_XRGB8888`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:26
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:144
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:220
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_ARGB8888`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:29
msgid "Freeing the Image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:31
msgid "The memory :cpp:func:`lv_snapshot_take` uses is dynamically allocated using :cpp:func:`lv_draw_buf_create`. Use :cpp:func:`lv_draw_buf_destroy` to free the memory it allocated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:35
msgid "The snapshot image which is the draw buffer returned by :cpp:func:`lv_snapshot_take` normally won't be added to the cache because it can be drawn directly. So you don't need to invalidate the cache by calling :cpp:func:`lv_image_cache_drop` before destroying the draw buffer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:40
msgid "The below code snippet demonstrates correct use of :cpp:func:`lv_snapshot_take`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:55
msgid "Using an Existing Buffer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:57
msgid "If the snapshot needs to be updated repeatedly, or if the caller provides the draw buffer, use :cpp:expr:`lv_snapshot_take_to_draw_buf(widget, color_format, draw_buf)`. In this case, the caller is responsible for creating and destroying the draw buffer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:61
msgid "If snapshot is generated successfully, the image descriptor is updated, the image data will be stored to the provided ``draw_buf``, and the function will return :cpp:enumerator:`LV_RESULT_OK`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:65
msgid "Note that snapshot may fail if the provided buffer is not large enough, which can happen if the Widget's size changes.  It's recommended to use :cpp:expr:`lv_snapshot_reshape_draw_buf(widget, draw_buf)` to first ensure the buffer is large enough, and if it fails, destroy the existing draw buffer and call `lv_snapshot_take` directly."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/snapshot/index.rst:2
msgid "Simple snapshot example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/snapshot.rst:89
msgid ":ref:`others/snapshot/lv_snapshot.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:5
msgid "System Monitor (sysmon)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:7
msgid "The System Monitor module provides real-time monitoring of system performance metrics directly on your display. It supports both performance monitoring (CPU usage and FPS) and memory monitoring (used memory and fragmentation)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:12
#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:20
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:33
msgid "Dependencies"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:13
msgid "Requires ``LV_USE_LABEL = 1`` in lv_conf.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:14
msgid "Requires ``LV_USE_OBSERVER = 1`` in lv_conf.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:15
msgid "Requires ``LV_USE_SYSMON = 1`` in lv_conf.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:23
#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:19
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:5
#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:62
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:99
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:88
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:44
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:56
#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:15
msgid "Configuration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:24
msgid "Enable in ``lv_conf.h``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:44
msgid "Creating Monitors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:57
msgid "Performance Monitor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:58
msgid "Tracks: - FPS (Frames Per Second) - CPU usage (%) - Render time (ms) - Flush time (ms) - Self CPU usage (%) if enabled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:65
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:89
msgid "Display format: .. code-block::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:71
msgid "Where: - Line 1: FPS, Total CPU% - Line 2: Total time (Render | Flush)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:76
#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:115
msgid "Pause and Resume"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:78
msgid ":cpp:expr:`lv_sysmon_performance_pause(disp)` pauses the perf monitor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:80
msgid ":cpp:expr:`lv_sysmon_performance_resume(disp)` resumes the perf monitor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:83
msgid "Memory Monitor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:84
msgid "Displays: - Current memory usage (kB and %) - Peak memory usage (kB) - Fragmentation (%)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:96
msgid "Positioning"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:97
msgid "Configure positions in lv_conf.h:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:109
msgid "Implementation Details"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:112
msgid "Initialization"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:113
msgid "Maintains: - Global memory monitor (``sysmon_mem``) - Per-display performance structures"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:118
msgid "Performance Measurement"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:119
msgid "Event-based collection:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:122
msgid "Event"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:122
msgid "Measurement"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:124
msgid "LV_EVENT_REFR_START"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:124
msgid "Refresh interval start"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:126
msgid "LV_EVENT_REFR_READY"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:126
msgid "Record refresh duration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:128
msgid "LV_EVENT_RENDER_START"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:128
msgid "Render time start"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:130
msgid "LV_EVENT_RENDER_READY"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:130
msgid "Record render duration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:132
msgid "LV_EVENT_FLUSH_*"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:132
msgid "Measure flush operations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:136
msgid "Timers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:137
msgid "Performance: ``perf_update_timer_cb``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:138
msgid "Memory: ``mem_update_timer_cb``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/sysmon.rst:139
msgid "Default period: 300ms (``LV_SYSMON_REFR_PERIOD_DEF``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:5
#: ../../lvgl/docs/intermediate/details/xml/test.rst:5
msgid "UI Testing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:10
msgid "The Test module provides functions to emulate clicks, key presses, encoder turns, time passing, and compare the UI with reference images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:13
msgid "These functions can be easily used in any test framework (such as Unity, GoogleTest, etc.), and assertions can be performed to check if, for example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:16
msgid "A widget's value is different from the expected value after emulating user inputs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:17
msgid "The values are incorrect after some time has passed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:18
msgid "The screen's content is different from the reference image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:19
msgid "Some event functions are not triggered."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:20
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:42
msgid "Etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:22
msgid "Note that it is assumed the tests are performed on a desktop or server environment, where there are no memory constraints."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:28
msgid "The Test module can be enabled by configuring ``LV_USE_TEST`` to a non-zero value, and it consists of the following components:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:31
#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:37
msgid "Helpers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:32
msgid "Display emulation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:33
msgid "Input device emulation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:34
msgid "Screenshot comparison"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:40
msgid "Time"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:42
msgid "To emulate elapsed time, two functions can be used:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:44
msgid ":cpp:expr:`lv_test_wait(ms)`: Emulates that ``ms`` milliseconds have elapsed, but it also calls ``lv_timer_handler`` after each millisecond. This is useful to check if events (e.g., long press, long press repeat) and timers were triggered correctly over time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:46
msgid ":cpp:expr:`lv_test_fast_forward(ms)`: Jumps ``ms`` milliseconds ahead and calls ``lv_timer_handler`` only once at the end."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:48
msgid ":cpp:expr:`lv_refr_now(NULL)` is called at the end of both functions to ensure that animations and widget coordinates are recalculated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:51
msgid ":cpp:expr:`lv_refr_now(NULL)` can also be called manually to force LVGL to refresh the emulated display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:54
msgid "Memory Usage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:56
msgid "If ``LV_USE_STDLIB_MALLOC`` is set to ``LV_STDLIB_BUILTIN``, memory usage and memory leaks can be monitored."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:65
msgid "It might make sense to create and delete items in a loop many times and add a small tolerance to the memory leakage test. This might be needed due to potential memory fragmentation. Empirically, a tolerance of 32 bytes is recommended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:74
msgid "Display Emulation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:76
msgid "By calling :cpp:expr:`lv_test_display_create(hor_res, ver_res)`, a dummy display can be created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:78
msgid "It functions like any other normal display, but its content exists only in memory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:80
msgid "When creating this display, the horizontal and vertical resolutions must be passed. Internally, a framebuffer will be allocated for this size, and ``XRGB8888`` color format will be set."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:83
msgid "The resolution and color format can be changed at any time by calling :cpp:func:`lv_display_set_resolution` and :cpp:func:`lv_display_set_color_format`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:87
msgid "Input Device Emulation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:89
msgid "By calling :cpp:func:`lv_test_indev_create_all`, three test input devices will be created:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:91
msgid "A pointer (for touch or mouse)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:92
msgid "A keypad"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:93
msgid "An encoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:95
msgid "For example, this is how a scroll gesture can be emulated:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:107
msgid "It is recommended to add :cpp:func:`lv_test_wait` after user actions to ensure that the new state and coordinates are read and applied from the input device."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:110
msgid "After that, the user can check if the given widget was really scrolled by getting the Y coordinate of a child."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:120
msgid "Please refer to :ref:`others/test/lv_test_indev.h` for the list of supported input device emulation functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:124
msgid "Screenshot Comparison"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:126
msgid "``bool lv_test_screenshot_compare(const char * fn_ref)`` is a useful function to compare the content of the emulated display with reference PNG images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:130
msgid "This function works in a practical way:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:132
msgid "If the folder(s) referenced in ``fn_ref`` do not exist, they will be created automatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:133
msgid "If the reference image is not found, it will be created automatically from the rendered screen."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:134
msgid "If the comparison fails, an ``<image_name>_err.png`` file will be created with the rendered content next to the reference image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:135
msgid "If the comparison fails, the X and Y coordinates of the first divergent pixel, along with the actual and expected colors, will also be printed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:137
msgid "The reference PNG images should have a **32-bit color format** and match the display size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:139
msgid "The test display's content will be converted to ``XRGB8888`` to simplify comparison with the reference images. The conversion is supported from the following formats (i.e., the test display should have a color format in this list):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:145
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_ARGB8888_PREMULTIPLIED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:148
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_RGB565_SWAPPED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:149
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_L8`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:150
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_AL88`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:151
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:214
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_I1`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:153
msgid "To read and decode PNG images and to store the converted rendered image, a few MBs of RAM are dynamically allocated using the standard ``malloc`` (not :cpp:expr:`lv_malloc`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:157
msgid "The screenshot comparison uses ``lodepng`` which is built-in to LVGL and just needs to be ebnabled with ``LV_USE_LODEPNG``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:160
msgid "To avoid making the entire Test module dependent on ``lodepng``, screenshot comparison can be individually enabled by ``LV_USE_TEST_SCREENSHOT_COMPARE``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:167
#: ../../lvgl/docs/intermediate/details/xml/test.rst:134
msgid ":ref:`others/test/lv_test_display.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:169
#: ../../lvgl/docs/intermediate/details/xml/test.rst:136
msgid ":ref:`others/test/lv_test_helpers.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:171
#: ../../lvgl/docs/intermediate/details/xml/test.rst:138
msgid ":ref:`others/test/lv_test_indev.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:173
#: ../../lvgl/docs/intermediate/details/xml/test.rst:140
msgid ":ref:`others/test/lv_test_indev_gesture.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:175
#: ../../lvgl/docs/intermediate/details/xml/test.rst:142
msgid ":ref:`others/test/lv_test_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/test.rst:177
#: ../../lvgl/docs/intermediate/details/xml/test.rst:144
msgid ":ref:`others/test/lv_test_screenshot_compare.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:5
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:399
msgid "Translation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:10
msgid "LVGL supports two ways of handling translations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:12
msgid "`lv_i18n <https://github.com/lvgl/lv_i18n>`_: A comprehensive tool that extracts translatable strings from C files into YAML files, and generates C translation files from them. It also supports plural forms. See its README for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:14
msgid "``lv_translation``: A simpler yet more flexible solution that allows adding translations statically or dynamically. This is the method documented here."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:19
msgid "Add Translations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:23
msgid "Static Translations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:25
msgid "If most translations are known at compile time, they can be defined using string arrays:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:40
msgid "This method uses only a little extra RAM, as only the pointers to the strings are stored."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:44
msgid "Dynamic Translations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:46
msgid "If translations are only available at runtime (e.g., from files, serial ports, or online sources), they can be added dynamically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:48
msgid "This approach involves memory allocation. See the example at the bottom of this page for reference."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:53
msgid "Select a Language"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:55
msgid "Once translations are registered, use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:57
msgid ":cpp:expr:`lv_translation_set_language(\"language\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:59
msgid "to set the current language. The parameter must match one of the language names provided during registration."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:64
msgid "Translate Strings"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:66
msgid "To retrieve a translation for a given tag, use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:68
msgid ":cpp:expr:`lv_translation_get(\"tag\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:69
msgid "or the shorthand: :cpp:expr:`lv_tr(\"tag\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:71
msgid "These return a translated string which can be used with widgets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:80
msgid "Fallbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:82
msgid "If a tag exists but the translation for the selected language is missing the tag itself will be returned."
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:85
msgid "If the tag is not found at all, the tag itself will be used as a fallback as well."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/others/translation/index.rst:2
msgid "Simple translation example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:104
msgid ":ref:`others/translation/lv_translation.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/auxiliary-modules/translation.rst:106
msgid ":ref:`others/translation/lv_translation_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:5
msgid "Widget Basics"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:10
msgid "What is a Widget?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:11
msgid "A Widget is the **basic building block** of the LVGL user interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:13
msgid "Examples of Widgets:  :ref:`Base Widget (and Screen) <base_widget>`, :ref:`Button <lv_button>`, :ref:`Label <lv_label>`, :ref:`Image <lv_image>`, :ref:`List <lv_list>`, :ref:`Chart <lv_chart>` and :ref:`Text Area <lv_textarea>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:18
msgid "See :ref:`widgets` to see all Widget types."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:20
msgid "All Widgets are referenced using an :cpp:type:`lv_obj_t` pointer as a handle. This pointer can later be used to read or change the Widget's attributes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:28
#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:39
msgid "Attributes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:32
msgid "Basic attributes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:34
msgid "All Widget types share some basic attributes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:36
msgid "Position"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:37
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:295
msgid "Size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:38
msgid "Parent"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:39
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/index.rst:5
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:5
msgid "Styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:40
msgid "Events it emits"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:41
msgid "Flags like *Clickable*, *Scrollable*, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:44
msgid "You can set/get these attributes with ``lv_obj_set_...`` and ``lv_obj_get_...`` functions. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:53
msgid "For complete details on position, size, coordinates and layouts, see :ref:`coord`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:57
msgid "Widget-specific attributes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:59
msgid "The Widget types have special attributes as well. For example, a slider has"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:61
msgid "Minimum and maximum values"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:62
msgid "Current value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:64
msgid "For these special attributes, every Widget type may have unique API functions. For example for a slider:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:73
msgid "The API of the widgets is described in their :ref:`Documentation <widgets>` but you can also check the respective header files (e.g. *widgets/lv_slider.h*)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:81
msgid "Parents and children"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:83
msgid "A Widget's parent is set when the widget is created --- the parent is passed to the creation function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:86
msgid "To get a Widget's current parent, use :cpp:expr:`lv_obj_get_parent(widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:88
msgid "You can move the Widget to a new parent with :cpp:expr:`lv_obj_set_parent(widget, new_parent)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:90
msgid "To get a specific child of a parent use :cpp:expr:`lv_obj_get_child(parent, idx)`. Some examples for ``idx``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:93
msgid "``0`` get the child created first"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:94
msgid "``1`` get the child created second"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:95
msgid "``-1`` get the child created last"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:97
msgid "You can iterate through a parent Widget's children like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:107
msgid ":cpp:expr:`lv_obj_get_index(widget)` returns the index of the Widget in its parent. It is equivalent to the number of older children in the parent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:110
msgid "You can bring a Widget to the foreground or send it to the background with :cpp:expr:`lv_obj_move_foreground(widget)` and :cpp:expr:`lv_obj_move_background(widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:113
msgid "You can change the index of a Widget in its parent using :cpp:expr:`lv_obj_move_to_index(widget, index)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:115
msgid "You can swap the position of two Widgets with :cpp:expr:`lv_obj_swap(widget1, widget2)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:117
msgid "To get a Widget's Screen (highest-level parent) use :cpp:expr:`lv_obj_get_screen(widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:124
msgid "Working Mechanisms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:127
msgid "Parent-child structure"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:129
msgid "A parent Widget can be considered as the container of its children.  Every Widget has exactly one parent Widget (except Screens), but a parent Widget can have any number of children.  There is no limitation for the type of the parent but there are Widgets which are typically a parent (e.g. button) or a child (e.g. label)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:136
msgid "Moving together"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:138
msgid "If the position of a parent changes, the children will move along with it. Therefore, all positions are relative to the parent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:151
msgid "Modify the position of the parent:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:159
msgid "(For simplicity the adjusting of colors of the Widgets is not shown in the example.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:164
msgid "Visibility only on the parent"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:166
msgid "If a child is partially or fully outside its parent then the parts outside will not be visible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:175
msgid "This behavior can be overwritten with :cpp:expr:`lv_obj_add_flag(widget, LV_OBJ_FLAG_OVERFLOW_VISIBLE)` which allows the children to be drawn outside of the parent.  In addition to this, you must register the following event callback (this was not required in previous versions)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:180
msgid "Note: ``ext_width`` should be the maximum absolute width the children will be drawn within."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:192
msgid "Creating and deleting Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:194
msgid "In LVGL, Widgets can be created and deleted dynamically at run time. It means only the currently created (existing) Widgets consume RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:197
msgid "This allows for the creation of a Screen just when a button is clicked to open it, and for deletion of Screens when a new Screen is loaded."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:200
msgid "UIs can be created based on the current environment of the device. For example one can create meters, charts, bars and sliders based on the currently attached sensors."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:204
msgid "Every widget has its own **create** function with a prototype like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:210
msgid "Typically, the create functions only have a ``parent`` parameter telling them on which Widget to create the new Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:213
msgid "The return value is a pointer to the created Widget with :cpp:type:`lv_obj_t` ``*`` type."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:216
msgid "There is a common **delete** function for all Widget types. It deletes the Widget and all of its children."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:223
msgid ":cpp:func:`lv_obj_delete` will delete the Widget immediately. If for any reason you can't delete the Widget immediately you can use :cpp:expr:`lv_obj_delete_async(widget)` which will perform the deletion on the next call of :cpp:func:`lv_timer_handler`. This is useful e.g. if you want to delete the parent of a Widget in the child's :cpp:enumerator:`LV_EVENT_DELETE` handler."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:230
msgid "You can remove all the children of a Widget (but not the Widget itself) using :cpp:expr:`lv_obj_clean(widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:233
msgid "You can use :cpp:expr:`lv_obj_delete_delayed(widget, 1000)` to delete a Widget after some time. The delay is expressed in milliseconds."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:236
msgid "Sometimes you're not sure whether a Widget was deleted and you need some way to check if it's still \"alive\". Anytime before the Widget is deleted, you can use cpp:expr:`lv_obj_null_on_delete(&widget)` to cause your Widget pointer to be set to ``NULL`` when the Widget is deleted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:241
msgid "Make sure the pointer variable itself stays valid until the Widget is deleted. Here is an example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:264
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:5
#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:119
msgid "Screens"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:267
msgid "What are Screens?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:269
msgid "Not to be confused with a :ref:`display`, Screens are simply any Widget created without a parent (i.e. passing NULL for the ``parent`` argument during creation).  As such, they form the \"root\" of a Widget Tree."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:273
msgid "Normally the Base Widget is used for this purpose since it has all the features most Screens need.  But an :ref:`lv_image` Widget can also be used to create a wallpaper background for the Widget Tree."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:277
msgid "All Screens:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:279
msgid "are automatically attached to the :ref:`default_display` current when the Screen was created;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:281
msgid "automatically occupy the full area of the associated display;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:282
msgid "cannot be moved, i.e. functions such as :cpp:func:`lv_obj_set_pos` and :cpp:func:`lv_obj_set_size` cannot be used on screens."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:285
msgid "Each :ref:`display` object can have multiple screens associated with it, but not vice versa.  Thus the relationship::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:300
msgid "Creating Screens"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:302
msgid "Screens are created like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:308
msgid "Screens can be deleted with :cpp:expr:`lv_obj_delete(scr)`, but be sure you do not delete the :ref:`active_screen`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:315
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:373
msgid "Active Screen"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:316
msgid "While each :ref:`display` object can have any number of Screens Widgets associated with it, only one of those Screens is considered \"Active\" at any given time.  That Screen is referred to as the Display's \"Active Screen\".  For this reason, only one Screen and its child Widgets will ever be shown on a display at one time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:321
msgid "When each :ref:`display` object was created, a default screen was created with it and set as its \"Active Screen\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:324
msgid "To get a pointer to the \"Active Screen\", call :cpp:func:`lv_screen_active`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:326
msgid "To set a Screen to be the \"Active Screen\", call :cpp:func:`lv_screen_load` or :cpp:func:`lv_screen_load_anim`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:333
msgid "Loading Screens"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:335
msgid "To load a new screen, use :cpp:expr:`lv_screen_load(scr1)`.  This sets ``scr1`` as the Active Screen."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:339
msgid "Load Screen with Extended Options"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:341
msgid "There is a way to load screens that gives you 2 additional (extended) options, allowing the caller to specify:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:344
msgid "an optional transition method, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:345
msgid "an option to gracefully delete the screen that was being displayed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:347
msgid ":cpp:expr:`lv_screen_load_anim(scr, transition_type, time, delay, auto_del)`.  The following transition types exist:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:350
msgid ":cpp:enumerator:`LV_SCREEN_LOAD_ANIM_NONE`: Switch immediately after ``delay`` milliseconds"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:351
msgid ":cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OVER_LEFT`, :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OVER_RIGHT`, :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OVER_TOP` and :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OVER_BOTTOM`: Move the new screen over the current towards the given direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:352
msgid ":cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OUT_LEFT`, :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OUT_RIGHT`, :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OUT_TOP` and :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_OUT_BOTTOM`: Move out the old screen over the current towards the given direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:353
msgid ":cpp:enumerator:`LV_SCREEN_LOAD_ANIM_MOVE_LEFT`, :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_MOVE_RIGHT`, :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_MOVE_TOP` and :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_MOVE_BOTTOM`: Move both the current and new screens towards the given direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:354
msgid ":cpp:enumerator:`LV_SCREEN_LOAD_ANIM_FADE_IN` and :cpp:enumerator:`LV_SCREEN_LOAD_ANIM_FADE_OUT`: Fade the new screen over the old screen, or vice versa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:356
msgid "Setting ``auto_del`` to ``true`` will automatically delete the old screen when the animation (if any) is finished."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:359
msgid "The new screen will become active (returned by :cpp:func:`lv_screen_active`) when the animation starts after ``delay`` time. All inputs are disabled during the screen animation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:367
#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:5
#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:122
msgid "Layers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:369
msgid "When an ``lv_display_t`` object is created, 4 Screens (layers) are created and attached to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:372
#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:79
msgid "Bottom Layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:374
msgid "Top Layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:375
msgid "System Layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:377
msgid "1, 3 and 4 are independent of the :ref:`active_screen` and they will be shown (if they contain anything that is visible) regardless of which screen is the Active Screen. See :ref:`display_screen_layers` and :ref:`transparent_screens` for more information."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:386
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:171
msgid "Parts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:388
msgid "The widgets are built from multiple parts. For example a :ref:`Base Widget <base_widget>` uses the main and scrollbar parts but a :ref:`Slider <lv_slider>` uses the main, indicator and knob parts. Parts are similar to *pseudo-elements* in CSS."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:393
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:175
msgid "The following predefined parts exist in LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:395
msgid ":cpp:enumerator:`LV_PART_MAIN`: A background like rectangle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:396
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR`: The scrollbar(s)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:397
msgid ":cpp:enumerator:`LV_PART_INDICATOR`: Indicator, e.g. for slider, bar, switch, or the tick box of the checkbox"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:398
msgid ":cpp:enumerator:`LV_PART_KNOB`: Like a handle to grab to adjust the value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:399
msgid ":cpp:enumerator:`LV_PART_SELECTED`: Indicate the currently selected option or section"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:400
msgid ":cpp:enumerator:`LV_PART_ITEMS`: Used if the widget has multiple similar elements (e.g. table cells)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:401
msgid ":cpp:enumerator:`LV_PART_CURSOR`: Mark a specific place e.g. text area's or chart's cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:402
msgid ":cpp:enumerator:`LV_PART_CUSTOM_FIRST`: Custom parts can be added from here."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:404
msgid "The main purpose of parts is to allow styling the \"components\" of the widgets. They are described in more detail in the :ref:`Style overview <styles>` section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:415
msgid "The Widget can be in a combination of the following states:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:417
msgid ":cpp:enumerator:`LV_STATE_DEFAULT`: Normal, released state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:418
msgid ":cpp:enumerator:`LV_STATE_CHECKED`: Toggled or checked state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:419
msgid ":cpp:enumerator:`LV_STATE_FOCUSED`: Focused via keypad or encoder or clicked via touchpad/mouse"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:420
msgid ":cpp:enumerator:`LV_STATE_FOCUS_KEY`: Focused via keypad or encoder but not via touchpad/mouse"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:421
msgid ":cpp:enumerator:`LV_STATE_EDITED`: Edit by an encoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:422
msgid ":cpp:enumerator:`LV_STATE_HOVERED`: Hovered by mouse (not supported now)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:423
msgid ":cpp:enumerator:`LV_STATE_PRESSED`: Being pressed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:424
msgid ":cpp:enumerator:`LV_STATE_SCROLLED`: Being scrolled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:425
msgid ":cpp:enumerator:`LV_STATE_DISABLED`: Disabled state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:426
msgid ":cpp:enumerator:`LV_STATE_USER_1`: Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:427
msgid ":cpp:enumerator:`LV_STATE_USER_2`: Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:428
msgid ":cpp:enumerator:`LV_STATE_USER_3`: Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:429
msgid ":cpp:enumerator:`LV_STATE_USER_4`: Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:431
msgid "The states are usually automatically changed by the library as the user interacts with a Widget (presses, releases, focuses, etc.). However, the states can be changed manually as well. To set or clear given state (but leave the other states untouched) use :cpp:expr:`lv_obj_add_state(widget, LV_STATE_...)` and :cpp:expr:`lv_obj_remove_state(widget, LV_STATE_...)`.  In both cases OR-ed state values can be used as well. E.g. :cpp:expr:`lv_obj_add_state(widget, LV_STATE_PRESSED | LV_PRESSED_CHECKED)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:440
msgid "To learn more about the states, read the related section of :ref:`styles_overview`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:450
msgid "There are some Widget attributes which can be enabled/disabled by :cpp:expr:`lv_obj_add_flag(widget, LV_OBJ_FLAG_...)` and :cpp:expr:`lv_obj_remove_flag(widget, LV_OBJ_FLAG_...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:454
msgid ":cpp:enumerator:`LV_OBJ_FLAG_HIDDEN` Make the Widget hidden. (Like it wasn't there at all)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:455
msgid ":cpp:enumerator:`LV_OBJ_FLAG_CLICKABLE` Make the Widget clickable by input devices"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:456
msgid ":cpp:enumerator:`LV_OBJ_FLAG_CLICK_FOCUSABLE` Add focused state to the Widget when clicked"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:457
msgid ":cpp:enumerator:`LV_OBJ_FLAG_CHECKABLE` Toggle checked state when the Widget is clicked"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:458
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLLABLE` Make the Widget scrollable"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:459
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_ELASTIC` Allow scrolling inside but with slower speed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:460
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_MOMENTUM` Make the Widget scroll further when \"thrown\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:461
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_ONE` Allow scrolling only one snappable children"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:462
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_CHAIN_HOR` Allow propagating the horizontal scroll to a parent"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:463
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_CHAIN_VER` Allow propagating the vertical scroll to a parent"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:464
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_CHAIN` Simple packaging for (:cpp:expr:`LV_OBJ_FLAG_SCROLL_CHAIN_HOR | LV_OBJ_FLAG_SCROLL_CHAIN_VER`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:465
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_ON_FOCUS` Automatically scroll Widget to make it visible when focused"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:466
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SCROLL_WITH_ARROW` Allow scrolling the focused Widget with arrow keys"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:467
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SNAPPABLE` If scroll snap is enabled on the parent it can snap to this Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:468
msgid ":cpp:enumerator:`LV_OBJ_FLAG_PRESS_LOCK` Keep the Widget pressed even if the press slid from the Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:469
msgid ":cpp:enumerator:`LV_OBJ_FLAG_EVENT_BUBBLE` Propagate the events to the parent as well"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:470
msgid ":cpp:enumerator:`LV_OBJ_FLAG_EVENT_TRICKLE` Propagate the events to the children as well"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:471
msgid ":cpp:enumerator:`LV_OBJ_FLAG_STATE_TRICKLE` Propagate the state changes to the children as well"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:472
msgid ":cpp:enumerator:`LV_OBJ_FLAG_GESTURE_BUBBLE` Propagate the gestures to the parent"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:473
msgid ":cpp:enumerator:`LV_OBJ_FLAG_ADV_HITTEST` Allow performing more accurate hit (click) test. E.g. accounting for rounded corners"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:474
msgid ":cpp:enumerator:`LV_OBJ_FLAG_IGNORE_LAYOUT` Make the Widget not positioned by the layouts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:475
msgid ":cpp:enumerator:`LV_OBJ_FLAG_FLOATING` Do not scroll the Widget when the parent scrolls and ignore layout"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:476
msgid ":cpp:enumerator:`LV_OBJ_FLAG_SEND_DRAW_TASK_EVENTS` Enable sending ``LV_EVENT_DRAW_TASK_ADDED`` events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:477
msgid ":cpp:enumerator:`LV_OBJ_FLAG_OVERFLOW_VISIBLE` Do not clip the children's content to the parent's boundary"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:478
msgid ":cpp:enumerator:`LV_OBJ_FLAG_FLEX_IN_NEW_TRACK` Start a new flex track on this item"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:479
msgid ":cpp:enumerator:`LV_OBJ_FLAG_LAYOUT_1` Custom flag, free to use by layouts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:480
msgid ":cpp:enumerator:`LV_OBJ_FLAG_LAYOUT_2` Custom flag, free to use by layouts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:481
msgid ":cpp:enumerator:`LV_OBJ_FLAG_WIDGET_1` Custom flag, free to use by widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:482
msgid ":cpp:enumerator:`LV_OBJ_FLAG_WIDGET_2` Custom flag, free to use by widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:483
msgid ":cpp:enumerator:`LV_OBJ_FLAG_USER_1` Custom flag, free to use by user"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:484
msgid ":cpp:enumerator:`LV_OBJ_FLAG_USER_2` Custom flag, free to use by user"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:485
msgid ":cpp:enumerator:`LV_OBJ_FLAG_USER_3` Custom flag, free to use by user"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:486
msgid ":cpp:enumerator:`LV_OBJ_FLAG_USER_4` Custom flag, free to use by user"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:488
msgid "Some examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:503
msgid "Base-Widget Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:508
msgid "Events from Input Devices"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:509
msgid ":cpp:enumerator:`LV_EVENT_PRESSED`              Widget has been pressed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:510
msgid ":cpp:enumerator:`LV_EVENT_PRESSING`             Widget is being pressed (sent continuously while pressing)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:511
msgid ":cpp:enumerator:`LV_EVENT_PRESS_LOST`           Widget is still being pressed but slid cursor/finger off Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:512
msgid ":cpp:enumerator:`LV_EVENT_SHORT_CLICKED`        Widget was pressed for a short period of time, then released. Not sent if scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:513
msgid ":cpp:enumerator:`LV_EVENT_SINGLE_CLICKED`       Sent for first short click within a small distance and short time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:514
msgid ":cpp:enumerator:`LV_EVENT_DOUBLE_CLICKED`       Sent for second short click within small distance and short time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:515
msgid ":cpp:enumerator:`LV_EVENT_TRIPLE_CLICKED`       Sent for third short click within small distance and short time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:516
msgid ":cpp:enumerator:`LV_EVENT_LONG_PRESSED`         Object has been pressed for at least `long_press_time`.  Not sent if scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:517
msgid ":cpp:enumerator:`LV_EVENT_LONG_PRESSED_REPEAT`  Sent after `long_press_time` in every `long_press_repeat_time` ms.  Not sent if scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:518
msgid ":cpp:enumerator:`LV_EVENT_CLICKED`              Sent on release if not scrolled (regardless to long press)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:519
msgid ":cpp:enumerator:`LV_EVENT_RELEASED`             Sent in every cases when Widget has been released."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:520
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_BEGIN`         Scrolling begins. The event parameter is a pointer to the animation of the scroll. Can be modified."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:521
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_THROW_BEGIN`   Received when scrolling begins."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:522
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_END`           Scrolling ended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:523
msgid ":cpp:enumerator:`LV_EVENT_SCROLL`               Scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:524
msgid ":cpp:enumerator:`LV_EVENT_GESTURE`              A gesture is detected. Get gesture with `lv_indev_get_gesture_dir(lv_indev_active());`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:525
msgid ":cpp:enumerator:`LV_EVENT_KEY`                  A key is sent to Widget. Get key with `lv_indev_get_key(lv_indev_active());`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:526
msgid ":cpp:enumerator:`LV_EVENT_FOCUSED`              Widget received focus,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:527
msgid ":cpp:enumerator:`LV_EVENT_DEFOCUSED`            Widget's focus has been lost."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:528
msgid ":cpp:enumerator:`LV_EVENT_LEAVE`                Widget's focus has been lost but is still selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:529
msgid ":cpp:enumerator:`LV_EVENT_HIT_TEST`             Perform advanced hit-testing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:532
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:168
msgid "Special Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:533
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` when the :cpp:enumerator:`LV_OBJ_FLAG_CHECKABLE` flag is enabled and the Widget was clicked (on transition to/from the checked state)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:537
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:147
msgid "Drawing Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:538
msgid ":cpp:enumerator:`LV_EVENT_DRAW_MAIN`            Performing drawing of main part"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:539
msgid ":cpp:enumerator:`LV_EVENT_DRAW_MAIN_BEGIN`      Starting drawing of main part"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:540
msgid ":cpp:enumerator:`LV_EVENT_DRAW_MAIN_END`        Finishing drawing of main part"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:541
msgid ":cpp:enumerator:`LV_EVENT_DRAW_POST`            Perform the post draw phase (when all children are drawn)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:542
msgid ":cpp:enumerator:`LV_EVENT_DRAW_POST_BEGIN`      Starting the post draw phase (when all children are drawn)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:543
msgid ":cpp:enumerator:`LV_EVENT_DRAW_POST_END`        Finishing the post draw phase (when all children are drawn)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:546
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:177
msgid "Other Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:547
msgid ":cpp:enumerator:`LV_EVENT_DELETE`               Object is being deleted"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:548
msgid ":cpp:enumerator:`LV_EVENT_CHILD_CHANGED`        Child was removed, added, or its size, position were changed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:549
msgid ":cpp:enumerator:`LV_EVENT_CHILD_CREATED`        Child was created, always bubbles up to all parents"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:550
msgid ":cpp:enumerator:`LV_EVENT_CHILD_DELETED`        Child was deleted, always bubbles up to all parents"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:551
msgid ":cpp:enumerator:`LV_EVENT_SIZE_CHANGED`         Object coordinates/size have changed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:552
msgid ":cpp:enumerator:`LV_EVENT_STYLE_CHANGED`        Object's style has changed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:553
msgid ":cpp:enumerator:`LV_EVENT_LAYOUT_CHANGED`       A child's position has changed due to a layout recalculation (when container has flex or grid layout style)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:554
msgid ":cpp:enumerator:`LV_EVENT_GET_SELF_SIZE`        Get internal size of a widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:556
#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:579
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:202
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:201
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:148
#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:183
#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:123
#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:19
#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:86
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:684
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:58
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:73
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:154
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:170
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:85
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:100
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:45
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:62
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:139
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:163
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:124
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:140
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:92
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:107
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:370
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:385
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:71
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:93
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:145
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:163
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:209
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:224
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:79
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:98
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:127
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:144
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:197
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:212
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:59
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:74
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:63
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:78
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:62
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:77
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:102
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:117
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:143
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:158
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:112
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:127
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:88
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:105
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:281
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:296
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:108
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:126
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:157
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:172
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:72
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:94
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:48
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:65
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:77
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:94
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:98
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:122
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:103
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:119
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:236
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:252
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:67
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:82
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:105
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:120
msgid "Further Reading"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:558
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:84
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:62
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:158
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:89
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:49
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:143
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:128
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:96
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:374
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:75
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:149
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:213
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:83
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:131
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:201
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:63
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:67
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:66
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:106
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:147
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:116
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:92
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:285
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:114
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:161
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:78
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:54
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:81
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:102
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:107
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:240
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:71
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:109
msgid "Learn more about :ref:`events`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:565
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:464
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:69
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:165
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:86
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:96
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:56
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:150
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:135
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:103
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:381
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:82
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:156
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:220
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:90
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:138
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:208
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:70
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:74
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:73
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:113
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:154
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:123
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:99
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:292
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:121
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:168
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:85
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:61
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:88
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:109
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:114
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:247
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:78
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:116
msgid "Keys"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:567
msgid "If :cpp:enumerator:`LV_OBJ_FLAG_CHECKABLE` is enabled, :cpp:enumerator:`LV_KEY_RIGHT` and :cpp:enumerator:`LV_KEY_UP` make the Widget checked, and :cpp:enumerator:`LV_KEY_LEFT` and :cpp:enumerator:`LV_KEY_DOWN` make it unchecked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:571
msgid "If :cpp:enumerator:`LV_OBJ_FLAG_SCROLLABLE` is enabled, but the Widget is not editable (as declared by the widget class), the arrow keys (:cpp:enumerator:`LV_KEY_UP`, :cpp:enumerator:`LV_KEY_DOWN`, :cpp:enumerator:`LV_KEY_LEFT`, :cpp:enumerator:`LV_KEY_RIGHT`) scroll the Widget. If the Widget can only scroll vertically, :cpp:enumerator:`LV_KEY_LEFT` and :cpp:enumerator:`LV_KEY_RIGHT` will scroll up/down instead, making it compatible with an encoder input device. See :ref:`Input devices overview <indev>` for more on encoder behaviors and the edit mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:581
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:75
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:172
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:102
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:64
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:165
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:142
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:109
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:387
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:95
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:165
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:226
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:100
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:146
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:214
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:76
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:80
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:79
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:119
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:160
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:129
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:107
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:298
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:128
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:174
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:96
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:67
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:96
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:124
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:121
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:254
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:84
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:122
msgid "Learn more about :ref:`indev_keys`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:588
msgid "Names"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:590
msgid "When a widget is created, its reference can be stored in an :cpp:expr:`lv_obj_t *` pointer variable. To use this widget in multiple places in the code, the variable can be passed as a function parameter or made a global variable. However, this approach has some drawbacks:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:594
msgid "Using global variables is not clean and generally not recommended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:595
msgid "It's not scalable. Passing references to 20 widgets as function parameters is not ideal."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:596
msgid "It's hard to track whether a widget still exists or has been deleted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:600
msgid "Setting names"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:602
msgid "To address these issues, LVGL introduces a powerful widget naming system that can be enabled by setting ``LV_USE_OBJ_NAME`` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:605
msgid "A custom name can be assigned using :cpp:expr:`lv_obj_set_name(obj, \"name\")` or :cpp:expr:`lv_obj_set_name_static(obj, \"name\")`. The \"static\" variant means the passed name must remain valid while the widget exists, as only the pointer is stored. Otherwise, LVGL will allocate memory to store a copy of the name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:610
msgid "If a name ends with ``#``, LVGL will automatically replace it with an index based on the number of siblings with the same base name. If no name is provided, the default is ``<widget_type>_#``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:614
msgid "Below is an example showing how manually- and automatically-assigned names are resolved:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:616
msgid "Main ``lv_obj`` container named ``\"cont\"``: \"cont\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:618
msgid "``lv_obj`` container named ``\"header\"``: \"header\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:620
msgid "``lv_label`` with no name: \"lv_label_0\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:621
msgid "``lv_label`` named ``\"title\"``: \"title\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:622
msgid "``lv_label`` with no name: \"lv_label_1\" (It's the third label, but custom-named widgets are not counted)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:624
msgid "``lv_obj`` container named ``\"buttons\"``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:626
msgid "``lv_button`` with no name: \"lv_button_0\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:627
msgid "``lv_button`` named ``\"second_button\"``: \"second_button\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:628
msgid "``lv_button`` with no name: \"lv_button_1\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:629
msgid "``lv_button`` named ``lv_button_#``: \"lv_button_2\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:630
msgid "``lv_button`` named ``mybtn_#``: \"mybtn_0\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:631
msgid "``lv_button`` with no name: \"lv_button_2\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:632
msgid "``lv_button`` named ``mybtn_#``: \"mybtn_1\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:633
msgid "``lv_button`` named ``mybtn_#``: \"mybtn_2\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:634
msgid "``lv_button`` named ``mybtn_#``: \"mybtn_3\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:638
msgid "Finding widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:640
msgid "Widgets can be found by name in two ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:642
msgid "**Get a direct child by name** using :cpp:expr:`lv_obj_get_child_by_name(parent, \"child_name\")`. Example: :cpp:expr:`lv_obj_get_child_by_name(header, \"title\")` You can also use a \"path\" to find nested children: :cpp:expr:`lv_obj_get_child_by_name(cont, \"buttons/mybtn_2\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:648
msgid "**Find a descendant at any level** using :cpp:expr:`lv_obj_find_by_name(parent, \"child_name\")`. Example: :cpp:expr:`lv_obj_find_by_name(cont, \"mybtn_1\")` Note that ``\"mybtn_1\"`` is a child of ``buttons``, not a direct child of ``cont``. This is useful when you want to ignore hierarchy and search by name alone."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:654
msgid "Since both functions start searching from a specific parent, it’s possible to have multiple widget subtrees with identical names under different parents."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:657
msgid "For example, if ``my_listitem_create(parent)`` creates a widget named ``\"list_item_#\"`` with children like ``\"icon\"``, ``\"title\"``, ``\"ok_button\"``, and ``\"lv_label_0\"``, and it's called 10 times, a specific ``\"ok_button\"`` can be found like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:669
msgid "Names are resolved **when they are retrieved**, not when they are set. This means the indices always reflect the current state of the widget tree at the time the name is used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:680
msgid "A snapshot image can be generated for a Widget together with its children. Check details in :ref:`snapshot`."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/obj/index.rst:3
msgid "Base objects with custom styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/obj/index.rst:9
msgid "Make an object draggable"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/obj/index.rst:15
msgid "Transform object using a 3x3 matrix"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:702
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:321
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:601
msgid ":ref:`core/lv_obj.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:704
msgid ":ref:`core/lv_obj_class.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:706
msgid ":ref:`core/lv_obj_class_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:708
msgid ":ref:`core/lv_obj_draw.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:710
msgid ":ref:`core/lv_obj_draw_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:712
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:323
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:202
msgid ":ref:`core/lv_obj_event.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:714
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:603
msgid ":ref:`core/lv_obj_pos.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:716
msgid ":ref:`core/lv_obj_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:718
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:605
msgid ":ref:`core/lv_obj_scroll.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:720
msgid ":ref:`core/lv_obj_scroll_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:722
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:607
msgid ":ref:`core/lv_obj_style.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:724
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:609
#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:170
msgid ":ref:`core/lv_obj_style_gen.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:726
msgid ":ref:`core/lv_obj_style_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:728
#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:90
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:611
msgid ":ref:`core/lv_obj_tree.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:730
#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:80
msgid ":ref:`core/lv_refr.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:732
msgid ":ref:`core/lv_refr_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:734
#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:327
#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:172
#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events.rst:31
#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:33
#: ../../lvgl/docs/intermediate/details/main-modules/display/index.rst:29
#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:79
#: ../../lvgl/docs/intermediate/details/main-modules/display/redraw_area.rst:39
#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:82
#: ../../lvgl/docs/intermediate/details/main-modules/display/resolution.rst:30
#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:109
#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:106
#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:215
#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:67
msgid ":ref:`display/lv_display.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:736
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:234
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:613
msgid ":ref:`layouts/flex/lv_flex.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:738
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:230
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:615
msgid ":ref:`layouts/grid/lv_grid.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:740
#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:92
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:617
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:671
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:707
#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:227
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:184
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:257
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:165
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:98
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:126
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:148
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:140
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:103
msgid ":ref:`lv_api_map_v8.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:742
#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:84
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:675
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:709
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:184
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:406
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:261
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:147
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:193
msgid ":ref:`lv_api_map_v9_1.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/basics.rst:746
msgid ":ref:`others/xml/parsers/lv_xml_obj_parser.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:5
msgid "Positions, Sizes and Layouts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:11
msgid "Similar to many other parts of LVGL, the concept of setting the coordinates was inspired by CSS. LVGL has by no means a complete implementation of CSS but a comparable subset is implemented (sometimes with minor adjustments)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:16
msgid "In short this means:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:18
msgid "Explicitly set coordinates are stored in styles (position, size, layouts, etc.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:19
msgid "support min-width, max-width, min-height, max-height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:20
msgid "have pixel, percentage, and \"content\" units"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:21
msgid "x=0; y=0 coordinate means the top-left corner of the parent plus the left/top padding plus border width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:22
msgid "width/height means the full size, the \"content area\" is smaller with padding and border width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:23
msgid "a subset of flexbox and grid layouts are supported"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:30
msgid "Length Units"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:32
msgid "When passing \"length units\" (a.k.a. \"distance units\" or \"size units\") as arguments to functions that modify position, size, etc., to make layout of your UI convenient, you have a choice of several different types of units you can use."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "pixels"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:36
msgid "Specify size as pixels:  an integer value < :c:macro:`LV_COORD_MAX` always means pixels.  E.g. :cpp:expr:`lv_obj_set_x(btn, 10)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "percentage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:40
msgid "Specify size as a percentage of the size of the Widget's parent or of itself, depending on the property. :cpp:expr:`lv_pct(value)` converts ``value`` to a percentage. E.g. :cpp:expr:`lv_obj_set_width(btn, lv_pct(50))`.  If you want to avoid the overhead of the call to :cpp:func:`lv_pct`, you can also use the macro :cpp:expr:`LV_PCT(x)` to mean the same thing. Note that when you use this feature, your value is *stored as a percent* so that if/when the size of the parent container (or other positioning factor) changes, this style value dynamically retains its meaning."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "contained content"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:51
msgid "Specify size as a function of the Widget's children.  The macro :c:macro:`LV_SIZE_CONTENT`: passed as a size value has special meaning:  it means to set the width and/or height of a Widget just large enough to include all of its children.  This is similar to ``auto`` in CSS.  E.g. :cpp:expr:`lv_obj_set_width(btn, LV_SIZE_CONTENT)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "inches"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:58
msgid "Specify size as 1/160-th portion of an inch as if it were pixels on a 160-DPI display, even though a display may have a different DPI.  Use :cpp:expr:`lv_dpx(n)` or :cpp:expr:`LV_DPX(n)` to do this.  Examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:64
msgid "n"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:64
msgid "DPI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:64
msgid "Computed Pixels"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:66
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:68
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:70
msgid "40"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:66
msgid "320"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:66
msgid "80 pixels to make 1/4 inch"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:68
msgid "160"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:68
msgid "40 pixels to make 1/4 inch"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:70
#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:72
msgid "130"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:70
msgid "33 pixels to make 1/4 inch"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:72
msgid "80"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:72
msgid "66 pixels to make 1/2 inch"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:75
msgid "See DPI under :ref:`display_attributes`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:82
msgid "Boxing Model"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:84
msgid "LVGL follows CSS's `border-box <https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing>`__ model. A Widget's \"box\" is built from the following parts:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "bounding box"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:87
msgid "the width/height of the elements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "border width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:88
msgid "the width of the border."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "padding"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:89
msgid "space between the sides of the Widget and its children."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
msgid "margin"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:90
msgid "space outside of the Widget (considered only by some layouts)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "content"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:91
msgid "the content area which is the size of the bounding box reduced by the border width and padding."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:93
msgid "The box models of LVGL: The content area is smaller than the bounding box with the padding and border width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:96
msgid "The border is drawn inside the bounding box. Inside the border LVGL keeps a \"padding margin\" when placing a Widget's children."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:99
msgid "The outline is drawn outside the bounding box."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:106
msgid "Important Notes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:108
msgid "This section describes special cases in which LVGL's behavior might be unexpected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:114
msgid "Postponed coordinate calculation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:116
msgid "LVGL doesn't recalculate all the coordinate changes immediately. This is done to improve performance. Instead, the Widgets are marked as \"dirty\" and before redrawing the screen LVGL checks if there are any \"dirty\" Widgets. If so it refreshes their position, size and layout."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:121
msgid "In other words, if you need to get the coordinate of a Widget and the coordinates were just changed, LVGL needs to be forced to recalculate the coordinates. To do this call :cpp:func:`lv_obj_update_layout`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:125
msgid "The size and position might depend on the parent or layout. Therefore :cpp:func:`lv_obj_update_layout` recalculates the coordinates of all Widgets on the screen of ``obj``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:134
msgid "Removing styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:136
msgid "As it's described in the :ref:`coord_using_styles` section, coordinates can also be set via style properties. To be more precise, under the hood every style coordinate related property is stored as a style property. If you use :cpp:expr:`lv_obj_set_x(widget, 20)` LVGL saves ``x=20`` in the local style of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:142
msgid "This is an internal mechanism and doesn't matter much as you use LVGL. However, there is one case in which you need to be aware of the implementation. If the style(s) of a Widget are removed by"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:150
#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:131
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:62
msgid "or"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:156
msgid "the earlier set coordinates will be removed as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:176
msgid "Positioning Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:180
msgid "Direct"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:182
msgid "To simply set the x and y coordinates of a Widget use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:190
msgid "By default, the x and y coordinates are measured from the top left corner of the parent's content area. For example if the parent has five pixels of padding on every side the above code will place ``obj`` at (15, 25) because the content area starts after the padding."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:195
msgid "Percentage values are calculated from the parent's content area size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:203
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:48
msgid "Alignment"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:207
msgid "Inside parent widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:208
msgid "In many cases it is more convenient to tell LVGL to align your object relative to an \"anchor\" in its parent *other* than its upper left corner.  To establish that \"anchor\", call :cpp:expr:`lv_obj_set_align(widget, LV_ALIGN_...)`.  After that call, that \"anchor\" will be remembered until another one is established. In other words, every futire x and y setting for that Widget will be relative to the that \"anchor\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:215
msgid "Example:  Position Widget (10,20) px relative to the center of its parent:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:225
msgid "9 convenient \"anchors\" can be used with these functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:227
msgid ":cpp:enumerator:`LV_ALIGN_TOP_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:228
msgid ":cpp:enumerator:`LV_ALIGN_TOP_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:229
msgid ":cpp:enumerator:`LV_ALIGN_TOP_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:230
msgid ":cpp:enumerator:`LV_ALIGN_BOTTOM_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:231
msgid ":cpp:enumerator:`LV_ALIGN_BOTTOM_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:232
msgid ":cpp:enumerator:`LV_ALIGN_BOTTOM_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:233
msgid ":cpp:enumerator:`LV_ALIGN_LEFT_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:234
msgid ":cpp:enumerator:`LV_ALIGN_RIGHT_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:235
msgid ":cpp:enumerator:`LV_ALIGN_CENTER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:237
msgid "See illustration below to visualize what these mean."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:239
msgid "It's quite common to align a child to the center of its parent, therefore a dedicated function exists:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:249
msgid "If the parent's size changes, the set alignment and position of the children is updated automatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:254
msgid "Relative to another Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:255
msgid "Alternately, you can choose an \"anchor\" on another Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:261
msgid "where ``align`` can be done of the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:263
msgid ":cpp:enumerator:`LV_ALIGN_OUT_TOP_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:264
msgid ":cpp:enumerator:`LV_ALIGN_OUT_TOP_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:265
msgid ":cpp:enumerator:`LV_ALIGN_OUT_TOP_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:266
msgid ":cpp:enumerator:`LV_ALIGN_OUT_BOTTOM_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:267
msgid ":cpp:enumerator:`LV_ALIGN_OUT_BOTTOM_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:268
msgid ":cpp:enumerator:`LV_ALIGN_OUT_BOTTOM_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:269
msgid ":cpp:enumerator:`LV_ALIGN_OUT_LEFT_TOP`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:270
msgid ":cpp:enumerator:`LV_ALIGN_OUT_LEFT_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:271
msgid ":cpp:enumerator:`LV_ALIGN_OUT_LEFT_BOTTOM`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:272
msgid ":cpp:enumerator:`LV_ALIGN_OUT_RIGHT_TOP`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:273
msgid ":cpp:enumerator:`LV_ALIGN_OUT_RIGHT_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:274
msgid ":cpp:enumerator:`LV_ALIGN_OUT_RIGHT_BOTTOM`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:276
msgid "Example:  to horizontally center a label 10 pixels above a button:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:282
msgid "Note that, unlike with :cpp:func:`lv_obj_align`, :cpp:func:`lv_obj_align_to` does not remember the \"anchor\" used, and so will not automatically reposition the aligned widget if the reference widget later moves."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:286
msgid "The following illustration shows the meaning of each \"anchor\" mentioned above."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:298
msgid "Sizing the simple way"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:300
msgid "The width and the height of a Widget can be set easily as well:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:308
msgid "Percentage values are calculated based on the parent's content area size. For example to set the Widget's height to the screen height:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:315
msgid "The size settings support a special value: :c:macro:`LV_SIZE_CONTENT`. It means the Widget's size in the respective direction will be set to the size of its children. Note that only children on the right and bottom sides will be considered and children on the top and left remain cropped. This limitation makes the behavior more predictable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:321
msgid "Widgets with :cpp:enumerator:`LV_OBJ_FLAG_HIDDEN` or :cpp:enumerator:`LV_OBJ_FLAG_FLOATING` will be ignored by the :c:macro:`LV_SIZE_CONTENT` calculation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:324
msgid "The above functions set the size of a Widget's bounding box but the size of the content area can be set as well. This means a Widget's bounding box will be enlarged with the addition of padding."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:333
msgid "The size of the bounding box and the content area can be retrieved with the following functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:347
msgid "Extending the click area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:349
msgid "By default, Widgets can be clicked only within their bounding area.  However, especially with small Widgets, it can be helpful to make a Widget's \"clickable\" area larger.  You can do this with :cpp:expr:`lv_obj_set_ext_click_area(widget, size)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:358
msgid "Using styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:360
msgid "Under the hood the position, size and alignment properties are style properties. The above described \"simple functions\" hide the style related code for the sake of simplicity and set the position, size, and alignment properties in the :ref:`local styles <style_local>` of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:365
msgid "However, using styles to set the coordinates has some great advantages:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:367
msgid "It makes it easy to set the width/height/etc. for several Widgets together. E.g. make all the sliders 100x10 pixels sized."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:369
msgid "It also makes possible to modify the values in one place."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:370
msgid "The values can be partially overwritten by other styles. For example ``style_btn`` makes the Widget ``100x50`` by default but adding ``style_full_width`` overwrites only the width of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:373
msgid "The Widget can have different position or size depending on state. E.g. 100 px wide in :cpp:enumerator:`LV_STATE_DEFAULT` but 120 px in :cpp:enumerator:`LV_STATE_PRESSED`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:376
msgid "Style transitions can be used to make the coordinate changes smooth."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:378
msgid "Here are some examples to set a Widget's size using a style:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:389
msgid "As you will see below there are some other great features of size and position setting. However, to keep the LVGL API lean, only the most common coordinate setting features have a \"simple\" version and the more complex features can be used via styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:401
msgid "Let's say the there are 3 buttons next to each other. Their position is set as described above. Now you want to move a button up a little when it's pressed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:405
msgid "One way to achieve this is by setting a new Y coordinate for the pressed state:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:427
msgid "This works, but it's not really flexible because the pressed coordinate is hard-coded. If the buttons are not at y=100, ``style_pressed`` won't work as expected. Translations can be used to solve this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:450
msgid "Translation is applied from the current position of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:452
msgid "Percentage values can be used in translations as well. The percentage is relative to the size of the Widget (and not to the size of the parent). For example :cpp:expr:`lv_pct(50)` will move the Widget with half of its width/height."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:457
msgid "The translation is applied after the layouts are calculated. Therefore, even laid out Widgets' position can be translated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:460
msgid "The translation actually moves the Widget. That means it makes the scrollbars and :c:macro:`LV_SIZE_CONTENT` sized Widgets react to the position change."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:469
msgid "Transformation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:471
msgid "Similarly to position, a Widget's size can be changed relative to the current size as well. The transformed width and height are added on both sides of the Widget. This means a 10 px transformed width makes the Widget 2x10 pixels wider."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:476
msgid "Unlike position translation, the size transformation doesn't make the Widget \"really\" larger. In other words scrollbars, layouts, and :c:macro:`LV_SIZE_CONTENT` will not react to the transformed size. Hence, size transformation is \"only\" a visual effect."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:481
msgid "This code enlarges a button when it's pressed:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:495
msgid "Min and Max size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:497
msgid "Similarly to CSS, LVGL also supports ``min-width``, ``max-width``, ``min-height`` and ``max-height``. These are limits preventing a Widget's size from becoming smaller/larger than these values. They are especially useful if the size is set by percentage or :c:macro:`LV_SIZE_CONTENT`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:512
msgid "Percentage values can be used as well which are relative to the size of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:529
msgid "Layout"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:533
msgid "Layout overview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:535
msgid "Layouts can update the position and size of a Widget's children. They can be used to automatically arrange the children into a line or column, or in much more complicated forms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:539
msgid "The position and size set by the layout overwrites the \"normal\" x, y, width, and height settings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:542
msgid "There is only one function that is the same for every layout: :cpp:func:`lv_obj_set_layout` ``(widget, <LAYOUT_NAME>)`` sets the layout on a Widget. For further settings of the parent and children see the documentation of the given layout."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:549
msgid "Built-in layouts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:551
msgid "LVGL comes with two very powerful layouts:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:553
msgid "Flexbox: arrange Widgets into rows or columns, with support for wrapping and expanding items."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:554
msgid "Grid: arrange Widgets into fixed positions in 2D table."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:556
msgid "Both are heavily inspired by the CSS layouts with the same name. Layouts are described in detail in their own section of documentation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:563
msgid "There are some flags that can be used on Widgets to affect how they behave with layouts:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:566
msgid ":cpp:enumerator:`LV_OBJ_FLAG_HIDDEN` Hidden Widgets are ignored in layout calculations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:567
msgid ":cpp:enumerator:`LV_OBJ_FLAG_IGNORE_LAYOUT` The Widget is simply ignored by the layouts. Its coordinates can be set as usual."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:568
msgid ":cpp:enumerator:`LV_OBJ_FLAG_FLOATING` Same as :cpp:enumerator:`LV_OBJ_FLAG_IGNORE_LAYOUT` but the Widget with :cpp:enumerator:`LV_OBJ_FLAG_FLOATING` will be ignored in :c:macro:`LV_SIZE_CONTENT` calculations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:570
msgid "These flags can be added/removed with :cpp:expr:`lv_obj_add_flag(widget, FLAG)` and :cpp:expr:`lv_obj_remove_flag(widget, FLAG)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:574
msgid "Adding new layouts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:576
msgid "LVGL can be freely extended by a custom layout like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/coordinates.rst:593
msgid "Custom style properties can be added which can be retrieved and used in the update callback. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:7
msgid "Events are triggered in LVGL when something happens which might be interesting to the user, e.g. when a Widget:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:10
msgid "is clicked"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:11
msgid "is scrolled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:12
msgid "has its value changed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:13
msgid "is redrawn, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:15
msgid "Besides Widgets, events can registered from displays and input devices as well. It is not detailed below, but you can do this by changing the prefix of the functions from ``lv_obj_`` to ``lv_display_`` or ``lv_indev_``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:23
msgid "Adding Events to a Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:25
msgid "The user can assign callback functions to a widget to process events. In practice, it looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:40
msgid "In the example :cpp:enumerator:`LV_EVENT_CLICKED` means that only the click event will call ``my_event_cb``. See the :ref:`list of event codes <events_codes>` for all the options. :cpp:enumerator:`LV_EVENT_ALL` can be used to receive all events."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:44
msgid "The last parameter of :cpp:func:`lv_obj_add_event_cb` is a pointer to any custom data that will be available in the event.  NULL may be passed for this argument if there is no need to use that data when the event is processed.  You can retrieve the pointer passed when setting the callback function like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:55
msgid "More events can be added to a Widget, like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:63
msgid "Even the same event callback can be used on a Widget with different ``user_data``. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:71
msgid "The events will be called in the order as they were added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:73
msgid "Other Widgets can use the same *event callback*."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:75
msgid "In the very same way, events can be attached to input devices and displays like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:84
msgid "Removing Event(s) from Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:102
msgid "Event Codes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:104
msgid "The event codes can be grouped into these categories: - Input device events - Drawing events - Other events - Special events - Custom events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:107
msgid "All Widgets (such as Buttons/Labels/Sliders etc.) regardless their type receive the *Input device*, *Drawing* and *Other* events."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:110
msgid "However, the *Special events* are specific to a particular widget type. See the :ref:`widgets' documentation <widgets>` to learn when they are sent,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:114
msgid "*Custom events* are added by the user and are never sent by LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:116
msgid "The following event codes exist:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:119
msgid "Input Device Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:121
msgid ":cpp:enumerator:`LV_EVENT_PRESSED`: Widget has been pressed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:122
msgid ":cpp:enumerator:`LV_EVENT_PRESSING`: Widget is being pressed (called continuously while pressing)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:123
msgid ":cpp:enumerator:`LV_EVENT_PRESS_LOST`: Widget is still being pressed but slid cursor/finger off Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:124
msgid ":cpp:enumerator:`LV_EVENT_SHORT_CLICKED`: Widget was pressed for a short period of time, and then released without scrolling."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:125
msgid ":cpp:enumerator:`LV_EVENT_SINGLE_CLICKED`: Widget was pressed for a short period of time, and then released without scrolling, for the first time in a click streak. A click streak refers to multiple short clicks within a short period of time and a small distance."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:126
msgid ":cpp:enumerator:`LV_EVENT_DOUBLE_CLICKED`: Widget was pressed for a short period of time, and then released without scrolling, for the second time in a click streak."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:127
msgid ":cpp:enumerator:`LV_EVENT_TRIPLE_CLICKED`: Widget was pressed for a short period of time, and then released without scrolling, for the third time in a click streak."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:128
msgid ":cpp:enumerator:`LV_EVENT_LONG_PRESSED`: Widget has been pressed for at least `long_press_time`.  Not called if scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:129
msgid ":cpp:enumerator:`LV_EVENT_LONG_PRESSED_REPEAT`: Called after `long_press_time` in every `long_press_repeat_time` ms.  Not called if scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:130
msgid ":cpp:enumerator:`LV_EVENT_CLICKED`: Called on release if not scrolled (regardless of long press)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:131
msgid ":cpp:enumerator:`LV_EVENT_RELEASED`: Called in every cases when Widget has been released"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:132
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_BEGIN`: Scrolling begins. The event parameter is a pointer to the animation of the scroll. Can be modified"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:133
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_THROW_BEGIN`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:134
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_END`: Scrolling ends"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:135
msgid ":cpp:enumerator:`LV_EVENT_SCROLL`: Scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:136
msgid ":cpp:enumerator:`LV_EVENT_GESTURE`: A gesture is detected. Get the gesture with :cpp:expr:`lv_indev_get_gesture_dir(lv_indev_active())`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:137
msgid ":cpp:enumerator:`LV_EVENT_KEY`: A key is sent to Widget. Get the key with :cpp:expr:`lv_indev_get_key(lv_indev_active())`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:138
msgid ":cpp:enumerator:`LV_EVENT_FOCUSED`: Widget received focus"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:139
msgid ":cpp:enumerator:`LV_EVENT_DEFOCUSED`: Widget is defocused"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:140
msgid ":cpp:enumerator:`LV_EVENT_LEAVE`: Widget is defocused but still selected"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:141
msgid ":cpp:enumerator:`LV_EVENT_HIT_TEST`: Perform advanced hit-testing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:142
msgid ":cpp:enumerator:`LV_EVENT_INDEV_RESET`: Indev has been reset"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:143
msgid ":cpp:enumerator:`LV_EVENT_HOVER_OVER`: Indev hover over Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:144
msgid ":cpp:enumerator:`LV_EVENT_HOVER_LEAVE`: Indev hover leave Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:149
msgid ":cpp:enumerator:`LV_EVENT_COVER_CHECK`: Check if Widget fully covers an area. The event parameter is :cpp:type:`lv_cover_check_info_t` ``*``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:150
msgid ":cpp:enumerator:`LV_EVENT_REFR_EXT_DRAW_SIZE`: Get the required extra draw area around Widget (e.g. for shadow). The event parameter is :cpp:type:`int32_t` ``*`` to store the size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:151
msgid ":cpp:enumerator:`LV_EVENT_DRAW_MAIN_BEGIN`: Starting the main drawing phase"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:152
msgid ":cpp:enumerator:`LV_EVENT_DRAW_MAIN`: Perform the main drawing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:153
msgid ":cpp:enumerator:`LV_EVENT_DRAW_MAIN_END`: Finishing the main drawing phase"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:154
msgid ":cpp:enumerator:`LV_EVENT_DRAW_POST_BEGIN`: Starting the post draw phase (when all children are drawn)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:155
msgid ":cpp:enumerator:`LV_EVENT_DRAW_POST`: Perform the post draw phase (when all children are drawn)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:156
msgid ":cpp:enumerator:`LV_EVENT_DRAW_POST_END`: Finishing the post draw phase (when all children are drawn)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:157
msgid ":cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED`: Adding a draw task"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:161
msgid "In drawing-event callback functions the rendering sequence has already begun, and during this period, making changes to any Widget's attributes, styles, or creating/deleting  widgets is forbidden.  If you attempt to do so, LVGL will generate an assertion failure with a message indicating that invalidating an area is not allowed during rendering."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:170
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED`: Widget's value has changed (i.e. slider moved)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:171
msgid ":cpp:enumerator:`LV_EVENT_INSERT`: A text is inserted to Widget. The event data is ``char *`` being inserted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:172
msgid ":cpp:enumerator:`LV_EVENT_REFRESH`: Notify Widget to refresh something on it (for the user)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:173
msgid ":cpp:enumerator:`LV_EVENT_READY`: A process has finished"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:174
msgid ":cpp:enumerator:`LV_EVENT_CANCEL`: A process has been cancelled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:179
msgid ":cpp:enumerator:`LV_EVENT_CREATE`: Widget is being created"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:180
msgid ":cpp:enumerator:`LV_EVENT_DELETE`: Widget is being deleted"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:181
msgid ":cpp:enumerator:`LV_EVENT_CHILD_CHANGED`: Child was removed, added, or its size, position were changed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:182
msgid ":cpp:enumerator:`LV_EVENT_CHILD_CREATED`: Child was created, always bubbles up to all parents"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:183
msgid ":cpp:enumerator:`LV_EVENT_CHILD_DELETED`: Child was deleted, always bubbles up to all parents"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:184
msgid ":cpp:enumerator:`LV_EVENT_SCREEN_UNLOAD_START`: A screen unload started, fired immediately when scr_load is called"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:185
msgid ":cpp:enumerator:`LV_EVENT_SCREEN_LOAD_START`: A screen load started, fired when the screen change delay is expired"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:186
msgid ":cpp:enumerator:`LV_EVENT_SCREEN_LOADED`: A screen was loaded"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:187
msgid ":cpp:enumerator:`LV_EVENT_SCREEN_UNLOADED`: A screen was unloaded"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:188
msgid ":cpp:enumerator:`LV_EVENT_SIZE_CHANGED`: Widget coordinates/size have changed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:189
msgid ":cpp:enumerator:`LV_EVENT_STYLE_CHANGED`: Widget's style has changed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:190
msgid ":cpp:enumerator:`LV_EVENT_LAYOUT_CHANGED`: The children position has changed due to a layout recalculation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:191
msgid ":cpp:enumerator:`LV_EVENT_GET_SELF_SIZE`: Get the internal size of a widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:194
#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events.rst:5
msgid "Display Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:9
msgid ":cpp:enumerator:`LV_EVENT_INVALIDATE_AREA` An area is invalidated (marked for redraw). :cpp:expr:`lv_event_get_param(e)` returns a pointer to an :cpp:struct:`lv_area_t` object with the coordinates of the area to be invalidated. The area can be freely modified if needed to adapt it a special requirement of the display. Usually needed with monochrome displays to invalidate ``N x 8`` rows or columns in one pass."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:15
msgid ":cpp:enumerator:`LV_EVENT_RESOLUTION_CHANGED`: Sent when the resolution changes due to :cpp:func:`lv_display_set_resolution` or :cpp:func:`lv_display_set_rotation`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:17
msgid ":cpp:enumerator:`LV_EVENT_COLOR_FORMAT_CHANGED`: Sent as a result of any call to `lv_display_set_color_format()`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:18
msgid ":cpp:enumerator:`LV_EVENT_REFR_REQUEST`: Sent when something happened that requires redraw."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:19
msgid ":cpp:enumerator:`LV_EVENT_REFR_START`: Sent before a refreshing cycle starts. Sent even if there is nothing to redraw."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:21
msgid ":cpp:enumerator:`LV_EVENT_REFR_READY`: Sent when refreshing has been completed (after rendering and calling :ref:`flush_callback`). Sent even if no redraw happened."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:23
msgid ":cpp:enumerator:`LV_EVENT_RENDER_START`: Sent just before rendering begins."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:24
msgid ":cpp:enumerator:`LV_EVENT_RENDER_READY`: Sent after rendering has been completed (before calling :ref:`flush_callback`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:26
msgid ":cpp:enumerator:`LV_EVENT_FLUSH_START`: Sent before :ref:`flush_callback` is called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:27
msgid ":cpp:enumerator:`LV_EVENT_FLUSH_FINISH`: Sent after :ref:`flush_callback` call has returned."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:28
msgid ":cpp:enumerator:`LV_EVENT_FLUSH_WAIT_START`: Sent at the beginning of internal call to `wait_for_flushing()` -- happens whether or not any waiting will actually occur. Call returns immediately if `disp->flushing == 0`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events_list.txt:31
msgid ":cpp:enumerator:`LV_EVENT_FLUSH_WAIT_FINISH`: Sent when the call to `wait_for_flushing()` is about to return, regardless whether any actual waiting occurred."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:200
msgid "Custom Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:202
msgid "Any number of custom event codes can be registered by ``uint32_t MY_EVENT_1 =`` :cpp:func:`lv_event_register_id`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:205
msgid "They can be sent to any Widget with :cpp:expr:`lv_obj_send_event(widget, MY_EVENT_1, &some_data)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:210
msgid "Refresh Event"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:212
msgid ":cpp:enumerator:`LV_EVENT_REFRESH` is a special event because it's designed to let the user notify a Widget to refresh itself. Some examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:215
msgid "notify a label to refresh its text according to one or more variables (e.g. current time)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:216
msgid "refresh a label when the language changes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:217
msgid "enable a button if some conditions are met (e.g. the correct PIN is entered)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:218
msgid "add/remove styles to/from a Widget if a limit is exceeded, etc"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:222
msgid "Sending Events Manually"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:224
msgid "To manually send events to a Widget, use ``lv_obj_send_event(widget, <EVENT_CODE>, &some_data)``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:227
msgid "For example, this can be used to manually close a message box by simulating a button press (although there are simpler ways to do this):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:236
msgid "The same works for display and input devices with ``lv_display_send_event(widget, <EVENT_CODE>, &some_data)`` and ``lv_indev_send_event(widget, <EVENT_CODE>, &some_data)``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:242
msgid "Fields of lv_event_t"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:244
msgid ":cpp:type:`lv_event_t` is the only parameter passed to the event callback and it contains all data about the event. The following values can be gotten from it:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:247
msgid ":cpp:expr:`lv_event_get_code(e)`: get the event code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:248
msgid ":cpp:expr:`lv_event_get_current_target(e)`: get Widget to which an event was sent. I.e. the Widget whose event handler is being called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:249
msgid ":cpp:expr:`lv_event_get_target(e)`: get Widget that originally triggered the event (different from :cpp:func:`lv_event_get_target` if :ref:`event bubbling <event_bubbling>` is enabled)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:250
msgid ":cpp:expr:`lv_event_get_user_data(e)`: get the pointer passed as the last parameter of :cpp:func:`lv_obj_add_event_cb`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:251
msgid ":cpp:expr:`lv_event_get_param(e)`: get the parameter passed as the last parameter of :cpp:func:`lv_obj_send_event_cb`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:257
msgid "Event Bubbling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:259
msgid "If :cpp:expr:`lv_obj_add_flag(widget, LV_OBJ_FLAG_EVENT_BUBBLE)` is enabled all events will be sent to a Widget's parent as well.  If the parent also has :cpp:enumerator:`LV_OBJ_FLAG_EVENT_BUBBLE` enabled the event will be sent to its parent, and so on."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:264
msgid "The *target* parameter of the event is always the current target Widget, not the original Widget. To get the original target call :cpp:expr:`lv_event_get_target_obj(e)` in the event handler."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:271
msgid "Event Trickle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:273
msgid "Also known as Event Capturing, if :cpp:expr:`lv_obj_add_flag(widget, LV_OBJ_FLAG_EVENT_TRICKLE)` is enabled all events will be sent to the Widget's children as well. This is the opposite of event bubbling --- instead of propagating up the parent, events propagate down to the children."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:277
msgid "The trickle mechanism only affects immediate children, not grandchildren or deeper descendants. If you need events to propagate to deeper levels, each child would need to have the :cpp:enumerator:`LV_OBJ_FLAG_EVENT_TRICKLE` flag enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:281
msgid "Like with bubbling, the *target* parameter of the event is always the current target Widget, not the original Widget. To get the original target call :cpp:expr:`lv_event_get_target_obj(e)` in the event handler."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/event/index.rst:3
msgid "Button click event"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/event/index.rst:9
msgid "Click streaks"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/event/index.rst:15
msgid "Handle multiple events"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/event/index.rst:21
msgid "Event bubbling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/event/index.rst:26
msgid "Event trickle-down"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/event/index.rst:31
msgid "Draw event"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:325
msgid ":ref:`core/lv_obj_event_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:329
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:697
msgid ":ref:`indev/lv_indev.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:331
msgid ":ref:`misc/lv_event.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/events.rst:333
msgid ":ref:`misc/lv_event_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/index.rst:5
msgid "Common Widget Features"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/index.rst:7
msgid "The following details apply to all types of Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:7
msgid "When the term \"layer\" is used in LVGL documentation, it may refer to one of several things:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:10
msgid "for Widgets, the :ref:`layers_creation` creates a natural layering of Widgets;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:11
msgid "in the context of pixel rendering (drawing), there are :ref:`draw_layers`;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:12
msgid "permanent :ref:`display_screen_layers` are part of each :ref:`display` object."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:14
msgid "#1 is covered below.  #2 and #3 are covered in :ref:`draw_layers` and :ref:`display_screen_layers` respectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:22
msgid "Order of Creation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:24
msgid "By default, LVGL draws new Widgets on top of old Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:26
msgid "For example, assume we add a button to a parent Widget named button1 and then another button named button2. Then button1 (along with its child Widget(s)) will be in the background and can be covered by button2 and its children."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:60
msgid "Changing Order"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:62
msgid "There are four explicit ways to bring a Widget to the foreground:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:64
msgid "Use :cpp:expr:`lv_obj_move_foreground(widget)` to bring a Widget to the foreground. Similarly, use :cpp:expr:`lv_obj_move_background(widget)` to move it to the background."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:66
msgid "Use :cpp:expr:`lv_obj_move_to_index(widget, idx)` to move a Widget to a given index in the order of children."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:68
msgid "``0``: background"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:69
msgid "``child_num - 1``: foreground"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:70
msgid "``< 0``: count from the top, to move forward (up): :cpp:expr:`lv_obj_move_to_index(widget, lv_obj_get_index(widget) - 1)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:72
msgid "Use :cpp:expr:`lv_obj_swap(widget1, widget2)` to swap the relative layer position of two Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layers.rst:73
msgid "When :cpp:expr:`lv_obj_set_parent(widget, new_parent)` is used, ``widget`` will be on the foreground of ``new_parent``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:5
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1482
msgid "Flex"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:12
msgid "The Flexbox (or Flex for short) is a subset of `CSS Flexbox`_ behaviors."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:14
msgid "It can arrange items (child Widgets) into rows or columns (tracks), handle wrapping, adjust the spacing between items and tracks, handle *grow* to make item(s) fill remaining space with respect to min/max width and height."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:19
msgid "To make a Widget a Flex container call :cpp:expr:`lv_obj_set_layout(widget, LV_LAYOUT_FLEX)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:22
msgid "Note that the Flex layout feature of LVGL needs to be globally enabled with :c:macro:`LV_USE_FLEX` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:28
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:28
msgid "Terms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:30
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:30
msgid "**tracks**: rows or columns"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:31
msgid "**main direction**: row or column, the direction in which multiple items are placed first"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:33
msgid "**cross direction**: the direction perpendicular to the **main direction**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:34
msgid "**wrap**: if there is no more space in the track, a new track is started"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:35
msgid "**grow**: if set on an item it will \"grow\" to fill the remaining space in the track. The available space will be distributed among items respective to their grow value (larger value means more space)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:38
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:34
msgid "**gap**: the space between rows and columns or the items on a track"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:40
msgid "See `CSS Flexbox`_ for illustrations showing the meanings of these terms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:45
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:39
msgid "Simple Interface"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:47
msgid "Use the following functions to set and control the Flex layout on any parent Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:51
msgid "The parent Widget must be a Flex container for these styles to take effect. The functions below cause the parent Widget to become a Flex container if it is not already."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:59
msgid "Flex flow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:61
msgid ":cpp:expr:`lv_obj_set_flex_flow(widget, flex_flow)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:63
msgid "The possible values for ``flex_flow`` are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:65
msgid ":cpp:enumerator:`LV_FLEX_FLOW_ROW`: Place the children in a row without wrapping"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:66
msgid ":cpp:enumerator:`LV_FLEX_FLOW_COLUMN`: Place the children in a column without wrapping"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:67
msgid ":cpp:enumerator:`LV_FLEX_FLOW_ROW_WRAP`: Place the children in a row with wrapping"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:68
msgid ":cpp:enumerator:`LV_FLEX_FLOW_COLUMN_WRAP`: Place the children in a column with wrapping"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:69
msgid ":cpp:enumerator:`LV_FLEX_FLOW_ROW_REVERSE`: Place the children in a row without wrapping but in reversed order"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:70
msgid ":cpp:enumerator:`LV_FLEX_FLOW_COLUMN_REVERSE`: Place the children in a column without wrapping but in reversed order"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:71
msgid ":cpp:enumerator:`LV_FLEX_FLOW_ROW_WRAP_REVERSE`: Place the children in a row with wrapping but in reversed order"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:72
msgid ":cpp:enumerator:`LV_FLEX_FLOW_COLUMN_WRAP_REVERSE`: Place the children in a column with wrapping but in reversed order"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:74
msgid "These values cause the Widget's layout behavior to model `CSS Flexbox`_ behavior by combining flex-direction_ and flex-wrap_ as defined under flex-flow_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:82
msgid "Flex align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:84
msgid "To manage placement of children use :cpp:expr:`lv_obj_set_flex_align(widget,  main_place, cross_place, track_cross_place)` which makes the parent Widget model the Flex-container behavior defined `here <justify-content_>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:89
msgid "``main_place`` determines how to distribute the items in their track on the main axis. E.g. flush the items to the right on :cpp:enumerator:`LV_FLEX_FLOW_ROW_WRAP`. (It's called justify-content_ in CSS.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:93
msgid "``cross_place`` determines how to distribute the items in their track on the cross axis. E.g. if the items have different height, align them against the bottom of the track. (It's called align-items_ in CSS.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:96
msgid "``track_cross_place`` determines how to distribute the tracks (It's called align-content_ in CSS.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:99
msgid "The possible values are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:101
msgid ":cpp:enumerator:`LV_FLEX_ALIGN_START`: means left when direction is horizontal, top when vertical (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:102
msgid ":cpp:enumerator:`LV_FLEX_ALIGN_END`: means right when direction is horizontal, bottom when vertical"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:103
msgid ":cpp:enumerator:`LV_FLEX_ALIGN_CENTER`: simply center with respect to direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:104
msgid ":cpp:enumerator:`LV_FLEX_ALIGN_SPACE_EVENLY`: items are distributed so that the spacing between any two items (and the space to the edges) is equal. Does not apply to ``track_cross_place``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:107
msgid ":cpp:enumerator:`LV_FLEX_ALIGN_SPACE_AROUND`: items are evenly distributed in the track with equal space around them. Note that visually the spaces are not equal since all the items have equal space on both sides.  This makes the space between items double the space between edge items and the container's edge.  Does not apply to ``track_cross_place``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:113
msgid ":cpp:enumerator:`LV_FLEX_ALIGN_SPACE_BETWEEN`: items are evenly distributed in the track with no space before and after first and last items.  Does not apply to ``track_cross_place``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:117
msgid "See justify-content_, align-items_ and align-content_ for illustrations of these values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:123
msgid "Flex grow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:125
msgid "Flex grow can be used to make one or more children fill available space in the track. When more than one child Widget have non-zero grow values, all available space will be distributed in proportion to their respective grow values.  For example, if there is 400 px space remaining and 3 child Widgets with non-zero grow values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:130
msgid "``A`` with grow = 1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:131
msgid "``B`` with grow = 1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:132
msgid "``C`` with grow = 2"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:134
msgid "``A`` and ``B`` will occupy 100 px, and ``C`` will occupy 200 px."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:136
msgid "Flex grow can be set on a child Widget with :cpp:expr:`lv_obj_set_flex_grow(child, value)`. ``value`` needs to be >= 1 or 0 to disable grow on the child."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:140
msgid "See flex-grow_ for an illustration of this behavior."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:147
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:153
msgid "Style Interface"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:149
msgid "All Flex-related values are style properties under the hood so you can use them as you would any other style property."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:152
msgid "The following flex related style properties exist:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:154
msgid ":cpp:enumerator:`FLEX_FLOW`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:155
msgid ":cpp:enumerator:`FLEX_MAIN_PLACE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:156
msgid ":cpp:enumerator:`FLEX_CROSS_PLACE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:157
msgid ":cpp:enumerator:`FLEX_TRACK_PLACE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:158
msgid ":cpp:enumerator:`FLEX_GROW`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:163
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:174
msgid "Internal padding"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:165
msgid "To modify the minimum space flexbox inserts between Widgets, the following functions can be used to set the flex container padding style:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:168
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:179
msgid ":cpp:func:`lv_style_set_pad_row` sets padding between rows."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:170
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:181
msgid ":cpp:func:`lv_style_set_pad_column` sets padding between columns."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:172
msgid "These can, for example, be used if you do not want any padding between Widgets: :cpp:expr:`lv_style_set_pad_column(&row_container_style, 0)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:180
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:627
msgid "Other Features"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:183
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:191
msgid "RTL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:185
msgid "If the base direction of the container is set the :cpp:enumerator:`LV_BASE_DIR_RTL` the meaning of :cpp:enumerator:`LV_FLEX_ALIGN_START` and :cpp:enumerator:`LV_FLEX_ALIGN_END` is swapped on ``ROW`` layouts. I.e. ``START`` will mean right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:191
msgid "The items on ``ROW`` layouts, and tracks of ``COLUMN`` layouts will be placed from right to left."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:195
msgid "New track"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:197
msgid "You can force Flex to put an item into a new line with :cpp:expr:`lv_obj_add_flag(child, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/flex.rst:204
msgid "Learn more about `CSS Flexbox`_."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/flex/index.rst:2
msgid "A simple row and a column layout with flexbox"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/flex/index.rst:8
msgid "Arrange items in rows with wrap and even spacing"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/flex/index.rst:14
msgid "Demonstrate flex grow"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/flex/index.rst:20
msgid "Demonstrate flex grow."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/flex/index.rst:26
msgid "Demonstrate column and row gap style properties"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/flex/index.rst:32
msgid "RTL base direction changes order of the items"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:5
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1557
msgid "Grid"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:12
msgid "The Grid layout is a subset of `CSS Grid`_ layout."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:14
msgid "It can arrange items (child Widgets) into a 2D \"table\" that has rows and columns (tracks).  An item can span multiple columns or rows. The track's size can be set in pixels, to the largest item (:c:macro:`LV_GRID_CONTENT`), or to a fraction of the available free space (i.e. `Free [FR] Units <fr units_>`_) to distribute free space proportionally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:20
msgid "To make a Widget a Grid container call :cpp:expr:`lv_obj_set_layout(widget, LV_LAYOUT_GRID)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:22
msgid "Note that the Grid layout feature of LVGL needs to be globally enabled with :c:macro:`LV_USE_GRID` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:31
msgid "**free (FR) units**: if a track's size is set in ``FR units`` it will grow to fill the remaining space in the parent Widget (container), in proportion with other tracks that have non-zero FR-unit values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:41
msgid "With the following functions you can cause any parent Widget to have Grid-layout behaviors."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:45
msgid "As with Flex containers, the parent Widget must be a Grid container for these styles to take effect.  The functions below cause the parent Widget to become a Grid container if it is not already."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:53
msgid "Grid descriptors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:55
msgid "First you need to describe the size of rows and columns. It can be done by declaring 2 arrays and the track sizes in them. The last element must be :c:macro:`LV_GRID_TEMPLATE_LAST`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:66
msgid "To set the descriptors on a parent use :cpp:expr:`lv_obj_set_grid_dsc_array(widget, col_dsc, row_dsc)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:69
msgid "Besides settings the sizes in pixels, you can use two special values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:72
msgid ":c:macro:`LV_GRID_CONTENT` sets size to fit the largest child on this track"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:73
msgid ":cpp:expr:`LV_GRID_FR(X)` determines what portion of the remaining space should be used by this track. Larger values means larger space."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:79
msgid "Grid items"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:81
msgid "By default, a Widget's children are not added to the grid. They need to be added manually to a cell."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:84
msgid "To do this call :cpp:expr:`lv_obj_set_grid_cell(child, column_align, column_pos, column_span, row_align, row_pos, row_span)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:87
msgid "``column_align`` and ``row_align`` determine how to align the child Widget in its cell.  Possible values are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:90
msgid ":cpp:enumerator:`LV_GRID_ALIGN_START`: means left when direction is horizontal and top when vertical (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:91
#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:106
msgid ":cpp:enumerator:`LV_GRID_ALIGN_END`: means right when direction is horizontal and bottom when vertical"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:92
msgid ":cpp:enumerator:`LV_GRID_ALIGN_CENTER`: simply center ``column_pos`` and ``row_pos`` means the zero-based index of the cell in which the item should be placed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:95
msgid "``column_span`` and ``row_span`` means how many tracks should be occupied from the start cell. Must be ``>= 1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:101
msgid "Grid align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:103
msgid "If there is some empty space, items (Widgets) in Grid tracks can be aligned in several ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:105
msgid ":cpp:enumerator:`LV_GRID_ALIGN_START`: means left when direction is horizontal and top when vertical. (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:107
msgid ":cpp:enumerator:`LV_GRID_ALIGN_CENTER`: simply center"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:108
msgid ":cpp:enumerator:`LV_GRID_ALIGN_SPACE_EVENLY`: items are distributed so that the spacing between any two items (and the space to the edges) is equal. Not applies to ``track_cross_place``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:110
msgid ":cpp:enumerator:`LV_GRID_ALIGN_SPACE_AROUND`: items are evenly distributed in the track with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. This makes the space between items double the space between edge items and the container's edge. Does not apply to ``track_cross_place``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:115
msgid ":cpp:enumerator:`LV_GRID_ALIGN_SPACE_BETWEEN`: items are evenly distributed in the track with first and last items next to container's edges. Does not apply to ``track_cross_place``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:119
msgid "To set the track's alignment use :cpp:expr:`lv_obj_set_grid_align(widget, column_align, row_align)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:125
msgid "Sub grid"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:127
msgid "If you set the column and/or row grid descriptors of a widget to ``NULL`` it will use the grid descriptor(s) from it's parent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:130
msgid "For example if you create a grid item that spans columns 2..6 columns and rows 1..3 of the grid, the grid item will occupy 5 columns and 4 rows with the corresponding track size from the parent Grid container."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:134
msgid "This way even if a wrapper item is used in the grid, it can be made \"transparent\" from the grid's point of view."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:137
msgid "Limitations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:139
msgid "The sub-grid is resolved only to a depth of 1 level. That is, a grid can have a sub-grid child, but that sub-grid cannot have another sub-grid."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:142
msgid "``LV_GRID_CONTENT`` tracks on the grid are not handled in the sub-grid, only in its own grid."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:145
msgid "The sub-grid feature works the same as in CSS.  For further information, see `CSS Subgrid`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:155
msgid "All the Grid-related values are style properties under the hood so you can use them as you would any other style property."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:158
msgid "The following Grid-related style properties exist:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:160
msgid ":cpp:enumerator:`GRID_COLUMN_DSC_ARRAY`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:161
msgid ":cpp:enumerator:`GRID_ROW_DSC_ARRAY`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:162
msgid ":cpp:enumerator:`GRID_COLUMN_ALIGN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:163
msgid ":cpp:enumerator:`GRID_ROW_ALIGN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:164
msgid ":cpp:enumerator:`GRID_CELL_X_ALIGN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:165
msgid ":cpp:enumerator:`GRID_CELL_COLUMN_POS`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:166
msgid ":cpp:enumerator:`GRID_CELL_COLUMN_SPAN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:167
msgid ":cpp:enumerator:`GRID_CELL_Y_ALIGN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:168
msgid ":cpp:enumerator:`GRID_CELL_ROW_POS`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:169
msgid ":cpp:enumerator:`GRID_CELL_ROW_SPAN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:176
msgid "To modify the minimum space Grid inserts between Widgets, the following properties can be set on the Grid container style:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:188
msgid "Other features"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:193
msgid "If the base direction of the container is set to :cpp:enumerator:`LV_BASE_DIR_RTL`, the meaning of :cpp:enumerator:`LV_GRID_ALIGN_START` and :cpp:enumerator:`LV_GRID_ALIGN_END` is swapped. I.e. ``START`` will mean right-most."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:197
msgid "The columns will be placed from right to left."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:203
msgid "Learn more about `CSS Grid`_ layout."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/grid.rst:204
msgid "Learn more about `CSS Subgrid`_ layout."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/grid/index.rst:2
msgid "A simple grid"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/grid/index.rst:8
msgid "Demonstrate cell placement and span"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/grid/index.rst:14
msgid "Demonstrate grid's -free unit-"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/grid/index.rst:20
msgid "Demonstrate track placement"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/grid/index.rst:26
msgid "Demonstrate column and row gap"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/layouts/grid/index.rst:32
msgid "Demonstrate RTL direction on grid"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/layouts/index.rst:5
msgid "Layouts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:5
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:78
msgid "Scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:11
msgid "In LVGL scrolling works very intuitively: if a Widget is outside its parent content area (the size without padding), the parent becomes scrollable and scrollbar(s) will appear. That's it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:15
msgid "Any Widget can be scrollable including :ref:`base_widget`, ``lv_image``, ``lv_button``, ``lv_meter``, etc"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:18
msgid "The Widget can either be scrolled horizontally or vertically in one stroke; diagonal scrolling is not possible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:23
msgid "Scrollbar"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:26
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:63
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:38
msgid "Mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:28
msgid "Scrollbars are displayed according to the configured ``scrollbar-mode``.  The following modes are available:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:31
msgid ":cpp:enumerator:`LV_SCROLLBAR_MODE_OFF`: Never show the scrollbars"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:32
msgid ":cpp:enumerator:`LV_SCROLLBAR_MODE_ON`: Always show the scrollbars"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:33
msgid ":cpp:enumerator:`LV_SCROLLBAR_MODE_ACTIVE`: Show scroll bars while a Widget is being scrolled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:34
msgid ":cpp:enumerator:`LV_SCROLLBAR_MODE_AUTO`: Show scroll bars when the content is large enough to be scrolled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:36
msgid ":cpp:expr:`lv_obj_set_scrollbar_mode(widget, LV_SCROLLBAR_MODE_...)` sets the scrollbar mode on a Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:39
#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:533
msgid "Styling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:41
msgid "A Scrollbar is a dedicated part of a Widget, called :cpp:enumerator:`LV_PART_SCROLLBAR`.  For example, a scrollbar can turn to red like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:55
msgid "A Widget goes to the :cpp:enumerator:`LV_STATE_SCROLLED` state while it's being scrolled.  This allows adding different styles to the Widget that will be effective while it is being scrolled.  For example, this code makes the scrollbar blue while the Widget is being scrolled:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:70
msgid "If the base direction of the :cpp:enumerator:`LV_PART_SCROLLBAR` is RTL (:c:macro:`LV_BASE_DIR_RTL`) the vertical scrollbar will be placed on the left. Note that, the ``base_dir`` style property is inherited. Therefore, it can be set directly on the :cpp:enumerator:`LV_PART_SCROLLBAR` part of a Widget, or on the Widget's LV_PART_MAIN part, or that of any of its parents, to make a scrollbar inherit the base direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:77
msgid "``pad_left/right/top/bottom`` sets the spacing around the scrollbars, ``width`` sets the scrollbar's width and ``length`` sets the scrollbar's length: If `length` is not set or left at `0` the scrollbar's length will be set automatically according to the length of the content."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:97
msgid "The minimum length of the scrollbar is fixed to 10, while its maximum length is limited by the Widget's height or width, depending on whether the scrollbar is vertical or horizontal. Any length value set outside of these limits will automatically result in a length fixed to either limit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:104
msgid "Scrolling Events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:106
msgid "The following events are emitted as part of scrolling:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:108
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_BEGIN`: Signals that scrolling has begun. The event parameter is ``NULL`` or an ``lv_anim_t *`` with a scroll animation descriptor that can be modified if required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:111
msgid ":cpp:enumerator:`LV_EVENT_SCROLL_END`: Signals that scrolling has ended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:112
msgid ":cpp:enumerator:`LV_EVENT_SCROLL`: Signals that the scrolling position changed; triggered on every position change."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:118
msgid "Features of Scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:120
msgid "Besides, managing \"normal\" scrolling there are many interesting and useful additional features."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:124
msgid "Scrollable"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:126
msgid "It is possible to make a Widget non-scrollable with :cpp:expr:`lv_obj_remove_flag(widget, LV_OBJ_FLAG_SCROLLABLE)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:129
msgid "Non-scrollable Widgets can still propagate the scrolling (chain) to their parents."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:132
msgid "The direction in which scrolling happens can be controlled by :cpp:expr:`lv_obj_set_scroll_dir(widget, LV_DIR_...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:135
msgid "The following values can be used for the direction:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:137
msgid ":cpp:enumerator:`LV_DIR_TOP`: only scroll up"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:138
msgid ":cpp:enumerator:`LV_DIR_LEFT`: only scroll left"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:139
msgid ":cpp:enumerator:`LV_DIR_BOTTOM`: only scroll down"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:140
msgid ":cpp:enumerator:`LV_DIR_RIGHT`: only scroll right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:141
msgid ":cpp:enumerator:`LV_DIR_HOR`: only scroll horizontally"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:142
msgid ":cpp:enumerator:`LV_DIR_VER`: only scroll vertically"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:143
msgid ":cpp:enumerator:`LV_DIR_ALL`: scroll any directions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:145
msgid "OR-ed values are also possible. E.g. :cpp:expr:`LV_DIR_TOP | LV_DIR_LEFT`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:148
msgid "Scroll chaining"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:150
msgid "If a Widget can't be scrolled further (e.g. its content has reached the bottom-most position), additional scrolling is propagated to its parent. If the parent can be scrolled in that direction than it will be scrolled instead. It continues propagating up the Widget's parent hierarchy up to the :ref:`Screen <screens>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:156
msgid "The propagation on scrolling is called \"scroll chaining\" and it can be enabled/disabled with ``LV_OBJ_FLAG_SCROLL_CHAIN_HOR/VER`` flag. If chaining is disabled the propagation stops on the Widget and the parent(s) won't be scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:162
msgid "Scroll momentum"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:164
msgid "When the user scrolls a Widget and releases it, LVGL can emulate inertial momentum for the scrolling. It's like the Widget was \"thrown\" and scrolling slows down smoothly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:168
msgid "Scroll momentum can be enabled/disabled with the :cpp:enumerator:`LV_OBJ_FLAG_SCROLL_MOMENTUM` flag."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:172
msgid "Elastic scroll"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:174
msgid "Normally a Widget can't be scrolled past the extremities of its content.  That is, the top side of the content can't be below the top side of the Widget, and vice versa for the bottom side."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:178
msgid "However, with :cpp:enumerator:`LV_OBJ_FLAG_SCROLL_ELASTIC` a fancy effect is added when the user \"over-scrolls\" the content. The scrolling slows down, and the content can be scrolled inside the Widget. When the Widget is released the content scrolled in it is animated back to the closest valid position."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:9
#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:185
msgid "Snapping"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:187
msgid "The children of a Widget can be snapped according to specific rules when scrolling ends. Children can be made snappable individually with the :cpp:enumerator:`LV_OBJ_FLAG_SNAPPABLE` flag."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:191
msgid "A Widget can align snapped children in four ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:193
msgid ":cpp:enumerator:`LV_SCROLL_SNAP_NONE`: Snapping is disabled. (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:194
msgid ":cpp:enumerator:`LV_SCROLL_SNAP_START`: Align the children to the left/top side of a scrolled Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:195
msgid ":cpp:enumerator:`LV_SCROLL_SNAP_END`: Align the children to the right/bottom side of a scrolled Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:196
msgid ":cpp:enumerator:`LV_SCROLL_SNAP_CENTER`: Align the children to the center of a scrolled Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:198
msgid "Snap alignment is set with :cpp:expr:`lv_obj_set_scroll_snap_x(widget, LV_SCROLL_SNAP_...)` and :cpp:expr:`lv_obj_set_scroll_snap_y(widget, LV_SCROLL_SNAP_...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:202
msgid "This is what happens under the hood:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:204
msgid "user scrolls and releases a Widget;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:205
msgid "LVGL calculates where the scroll would end considering scroll momentum;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:206
msgid "LVGL finds the nearest scroll point;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:207
msgid "LVGL scrolls to the snap point with an animation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:210
msgid "Scroll one"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:212
msgid "The \"scroll one\" feature tells LVGL to allow scrolling only one snappable child at a time. This requires making the children snappable and setting scroll snap alignment to something other than :cpp:enumerator:`LV_SCROLL_SNAP_NONE`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:217
msgid "This feature can be enabled by the :cpp:enumerator:`LV_OBJ_FLAG_SCROLL_ONE` flag."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:220
msgid "Scroll on focus"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:222
msgid "Imagine that there are a lot of Widgets in a group that are on a scrollable Widget. Pressing the \"Tab\" button moves focus to the next Widget but it might be outside the visible area of the scrollable Widget. If the \"scroll on focus\" feature is enabled LVGL will automatically scroll Widgets to bring the child Widget with focus into view.  The scrolling happens recursively therefore even nested scrollable Widgets are handled properly. The Widget will be scrolled into view even if it is on a different page of a tabview."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:234
msgid "Scrolling Programmatically"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:236
msgid "The following API functions allow programmatic scrolling of Widgets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:238
msgid "``lv_obj_scroll_by(widget, x, y, LV_ANIM_ON/OFF)`` scroll by ``x`` and ``y`` values"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:239
msgid "``lv_obj_scroll_to(widget, x, y, LV_ANIM_ON/OFF)`` scroll to bring the given coordinate to the top left corner"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:240
msgid "``lv_obj_scroll_to_x(widget, x, LV_ANIM_ON/OFF)`` scroll to bring the given coordinate to the left side"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:241
msgid "``lv_obj_scroll_to_y(widget, y, LV_ANIM_ON/OFF)`` scroll to bring the given coordinate to the top side"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:243
msgid "From time to time you may need to retrieve the *scroll position* of a scrollable Widget, either to restore it later, or to dynamically display some elements according to its current scroll position. Here is an example to illustrate how to combine scroll event and store the scroll-top position."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:261
msgid "Scroll coordinates can be retrieved from different axes with these functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:263
msgid ":cpp:expr:`lv_obj_get_scroll_x(widget)`      Pixels scrolled past left edge of Widget's view window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:264
msgid ":cpp:expr:`lv_obj_get_scroll_y(widget)`      Pixels scrolled past top of Widget's view window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:265
msgid ":cpp:expr:`lv_obj_get_scroll_top(widget)`    Identical to :cpp:expr:`lv_obj_get_scroll_y(widget)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:266
msgid ":cpp:expr:`lv_obj_get_scroll_bottom(widget)` Pixels scrolled past bottom of Widget's view window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:267
msgid ":cpp:expr:`lv_obj_get_scroll_left(widget)`   Identical to :cpp:expr:`lv_obj_get_scroll_x(widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:268
msgid ":cpp:expr:`lv_obj_get_scroll_right(widget)`  Pixels scrolled past right edge of Widget's view window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:270
msgid "Setting scroll position can be done with these functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:272
msgid ":cpp:expr:`lv_obj_scroll_by(widget, dx, dy, anim_enable)`               Scroll by given amount of pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:273
msgid ":cpp:expr:`lv_obj_scroll_by_bounded(widget, dx, dy, animation_enable)`  Scroll by given amount of pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:274
msgid ":cpp:expr:`lv_obj_scroll_to(widget, x, y, animation_enable)`            Scroll to given coordinate on Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:275
msgid ":cpp:expr:`lv_obj_scroll_to_x(widget, x, animation_enable)`             Scroll to X coordinate on Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:276
msgid ":cpp:expr:`lv_obj_scroll_to_y(widget, y, animation_enable)`             Scroll to Y coordinate on Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:277
msgid ":cpp:expr:`lv_obj_scroll_to_view(widget, animation_enable)`             Scroll ``obj``'s parent Widget until ``obj`` becomes visible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:278
msgid ":cpp:expr:`lv_obj_scroll_to_view_recursive(widget, animation_enable)`   Scroll ``obj``'s parent Widgets recursively until ``obj`` becomes visible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:283
msgid "Self Size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:285
msgid "Self size is a property of a Widget. Normally, the user shouldn't use this parameter but if a custom widget is created it might be useful."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:288
msgid "In short, self size establishes the size of a Widget's content. To understand it better take the example of a table. Let's say it has 10 rows each with 50 px height. So the total height of the content is 500 px. In other words the \"self height\" is 500 px. If the user sets only 200 px height for the table LVGL will see that the self size is larger and make the table scrollable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:295
msgid "This means not only the children can make a Widget scrollable but a larger self size will as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/scrolling.rst:298
msgid "LVGL uses the :cpp:enumerator:`LV_EVENT_GET_SELF_SIZE` event to get the self size of a Widget. Here is an example to see how to handle the event:"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:3
msgid "Nested scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:14
msgid "Floating button"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:19
msgid "Styling the scrollbars"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:24
msgid "Right to left scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:29
msgid "Translate on scroll"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:34
msgid "Infinite scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/scroll/index.rst:39
msgid "circular scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:5
msgid "Style Properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:8
msgid "Size and position"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:10
msgid "Properties related to size, position, alignment and layout of Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:13
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:15
msgid "Sets width of Widget. Pixel, percentage and `LV_SIZE_CONTENT` values can be used. Percentage values are relative to the width of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:27
msgid "min_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:29
msgid "Sets a minimal width. Pixel and percentage values can be used. Percentage values are relative to the width of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:41
msgid "max_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:43
msgid "Sets a maximal width. Pixel and percentage values can be used. Percentage values are relative to the width of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:55
msgid "height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:57
msgid "Sets height of Widget. Pixel, percentage and `LV_SIZE_CONTENT` can be used. Percentage values are relative to the height of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:69
msgid "min_height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:71
msgid "Sets a minimal height. Pixel and percentage values can be used. Percentage values are relative to the width of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:83
msgid "max_height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:85
msgid "Sets a maximal height. Pixel and percentage values can be used. Percentage values are relative to the height of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:97
msgid "length"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:99
msgid "Its meaning depends on the type of Widget. For example in case of lv_scale it means the length of the ticks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:111
msgid "x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:113
msgid "Set X coordinate of Widget considering the ``align`` setting. Pixel and percentage values can be used. Percentage values are relative to the width of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:125
msgid "y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:127
msgid "Set Y coordinate of Widget considering the ``align`` setting. Pixel and percentage values can be used. Percentage values are relative to the height of the parent's content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:139
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:141
msgid "Set the alignment which tells from which point of the parent the X and Y coordinates should be interpreted. Possible values are: `LV_ALIGN_DEFAULT`, `LV_ALIGN_TOP_LEFT/MID/RIGHT`, `LV_ALIGN_BOTTOM_LEFT/MID/RIGHT`, `LV_ALIGN_LEFT/RIGHT_MID`, `LV_ALIGN_CENTER`. `LV_ALIGN_DEFAULT` means `LV_ALIGN_TOP_LEFT` with LTR base direction and `LV_ALIGN_TOP_RIGHT` with RTL base direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:153
msgid "transform_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:155
msgid "Make Widget wider on both sides with this value. Pixel and percentage (with `lv_pct(x)`) values can be used. Percentage values are relative to Widget's width."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:167
msgid "transform_height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:169
msgid "Make Widget higher on both sides with this value. Pixel and percentage (with `lv_pct(x)`) values can be used. Percentage values are relative to Widget's height."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:181
msgid "translate_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:183
msgid "Move Widget with this value in X direction. Applied after layouts, aligns and other positioning. Pixel and percentage (with `lv_pct(x)`) values can be used. Percentage values are relative to Widget's width."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:195
msgid "translate_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:197
msgid "Move Widget with this value in Y direction. Applied after layouts, aligns and other positioning. Pixel and percentage (with `lv_pct(x)`) values can be used. Percentage values are relative to Widget's height."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:209
msgid "translate_radial"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:211
msgid "Move object around the centre of the parent object (e.g. around the circumference of a scale)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:223
msgid "transform_scale_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:225
msgid "Zoom Widget horizontally. The value 256 (or `LV_SCALE_NONE`) means normal size, 128 half size, 512 double size, and so on"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:237
msgid "transform_scale_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:239
msgid "Zoom Widget vertically. The value 256 (or `LV_SCALE_NONE`) means normal size, 128 half size, 512 double size, and so on"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:251
msgid "transform_rotation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:253
msgid "Rotate Widget. The value is interpreted in 0.1 degree units. E.g. 450 means 45 deg."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:265
msgid "transform_pivot_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:267
msgid "Set pivot point's X coordinate for transformations. Relative to Widget's top left corner'"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:279
msgid "transform_pivot_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:281
msgid "Set pivot point's Y coordinate for transformations. Relative to Widget's top left corner'"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:293
msgid "transform_skew_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:295
msgid "Skew Widget horizontally. The value is interpreted in 0.1 degree units. E.g. 450 means 45 deg."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:307
msgid "transform_skew_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:309
msgid "Skew Widget vertically. The value is interpreted in 0.1 degree units. E.g. 450 means 45 deg."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:321
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:423
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:248
msgid "Padding"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:323
msgid "Properties to describe spacing between the parent's sides and the children and among the children. Very similar to the padding properties in HTML."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:326
msgid "pad_top"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:328
msgid "Sets the padding on the top. It makes the content area smaller in this direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:340
msgid "pad_bottom"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:342
msgid "Sets the padding on the bottom. It makes the content area smaller in this direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:354
msgid "pad_left"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:356
msgid "Sets the padding on the left. It makes the content area smaller in this direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:368
msgid "pad_right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:370
msgid "Sets the padding on the right. It makes the content area smaller in this direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:382
msgid "pad_row"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:384
msgid "Sets the padding between the rows. Used by the layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:396
msgid "pad_column"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:398
msgid "Sets the padding between the columns. Used by the layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:410
msgid "pad_radial"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:412
msgid "Pad text labels away from the scale ticks/remainder of the ``LV_PART_``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:424
msgid "Margin"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:426
msgid "Properties to describe spacing around a Widget. Very similar to the margin properties in HTML."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:429
msgid "margin_top"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:431
msgid "Sets margin on the top. Widget will keep this space from its siblings in layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:443
msgid "margin_bottom"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:445
msgid "Sets margin on the bottom. Widget will keep this space from its siblings in layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:457
msgid "margin_left"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:459
msgid "Sets margin on the left. Widget will keep this space from its siblings in layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:471
msgid "margin_right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:473
msgid "Sets margin on the right. Widget will keep this space from its siblings in layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:485
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:419
#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:150
msgid "Background"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:487
msgid "Properties to describe the background color and image of Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:490
msgid "bg_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:492
msgid "Set background color of Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:504
msgid "bg_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:506
msgid "Set opacity of the background. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:518
msgid "bg_grad_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:520
msgid "Set gradient color of the background. Used only if `grad_dir` is not `LV_GRAD_DIR_NONE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:532
msgid "bg_grad_dir"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:534
msgid "Set direction of the gradient of the background. Possible values are `LV_GRAD_DIR_NONE/HOR/VER`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:546
msgid "bg_main_stop"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:548
msgid "Set point from which background color should start for gradients. 0 means to top/left side, 255 the bottom/right side, 128 the center, and so on"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:560
msgid "bg_grad_stop"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:562
msgid "Set point from which background's gradient color should start. 0 means to top/left side, 255 the bottom/right side, 128 the center, and so on"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:574
msgid "bg_main_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:576
msgid "Set opacity of the first gradient color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:588
msgid "bg_grad_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:590
msgid "Set opacity of the second gradient color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:602
msgid "bg_grad"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:604
msgid "Set gradient definition. The pointed instance must exist while Widget is alive. NULL to disable. It wraps `BG_GRAD_COLOR`, `BG_GRAD_DIR`, `BG_MAIN_STOP` and `BG_GRAD_STOP` into one descriptor and allows creating gradients with more colors as well. If it's set other gradient related properties will be ignored'"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:616
msgid "bg_image_src"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:618
msgid "Set a background image. Can be a pointer to `lv_image_dsc_t`, a path to a file or an `LV_SYMBOL_...`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:630
msgid "bg_image_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:632
msgid "Set opacity of the background image. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:644
msgid "bg_image_recolor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:646
msgid "Set a color to mix to the background image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:658
msgid "bg_image_recolor_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:660
msgid "Set intensity of background image recoloring. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means no mixing, 255, `LV_OPA_100` or `LV_OPA_COVER` means full recoloring, other values or LV_OPA_10, LV_OPA_20, etc are interpreted proportionally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:672
msgid "bg_image_tiled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:674
msgid "If enabled the background image will be tiled. Possible values are `true` or `false`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:686
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:420
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:143
msgid "Border"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:688
msgid "Properties to describe the borders"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:691
msgid "border_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:693
msgid "Set color of the border"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:705
msgid "border_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:707
msgid "Set opacity of the border. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:719
msgid "border_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:721
msgid "Set width of the border. Only pixel values can be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:733
msgid "border_side"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:735
msgid "Set only which side(s) the border should be drawn. Possible values are `LV_BORDER_SIDE_NONE/TOP/BOTTOM/LEFT/RIGHT/INTERNAL`. OR-ed values can be used as well, e.g. `LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_LEFT`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:747
msgid "border_post"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:749
msgid "Sets whether the border should be drawn before or after the children are drawn. `true`: after children, `false`: before children"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:761
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:421
msgid "Outline"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:763
msgid "Properties to describe the outline. It's like a border but drawn outside of the rectangles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:766
msgid "outline_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:768
msgid "Set width of outline in pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:780
msgid "outline_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:782
msgid "Set color of outline."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:794
msgid "outline_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:796
msgid "Set opacity of outline. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:808
msgid "outline_pad"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:810
msgid "Set padding of outline, i.e. the gap between Widget and the outline."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:822
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:422
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:145
msgid "Shadow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:824
msgid "Properties to describe the shadow drawn under the rectangles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:827
msgid "shadow_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:829
msgid "Set width of the shadow in pixels. The value should be >= 0."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:841
msgid "shadow_offset_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:843
msgid "Set an offset on the shadow in pixels in X direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:855
msgid "shadow_offset_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:857
msgid "Set an offset on the shadow in pixels in Y direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:869
msgid "shadow_spread"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:871
msgid "Make shadow calculation to use a larger or smaller rectangle as base. The value can be in pixels to make the area larger/smaller"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:883
msgid "shadow_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:885
msgid "Set color of shadow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:897
msgid "shadow_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:899
msgid "Set opacity of shadow. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:913
msgid "Properties to describe the images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:916
msgid "image_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:918
msgid "Set opacity of an image. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:930
msgid "image_recolor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:932
msgid "Set color to mix with the image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:944
msgid "image_recolor_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:946
msgid "Set intensity of color mixing. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:958
msgid "Line"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:960
msgid "Properties to describe line-like Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:963
msgid "line_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:965
msgid "Set width of lines in pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:977
msgid "line_dash_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:979
msgid "Set width of dashes in pixels. Note that dash works only on horizontal and vertical lines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:991
msgid "line_dash_gap"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:993
msgid "Set gap between dashes in pixels. Note that dash works only on horizontal and vertical lines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1005
msgid "line_rounded"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1007
msgid "Make end points of the lines rounded. `true`: rounded, `false`: perpendicular line ending"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1019
msgid "line_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1021
msgid "Set color of lines."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1033
msgid "line_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1035
msgid "Set opacity of lines."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1049
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:518
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/building_lvgl.rst:27
#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/ft6x36.rst:5
#: ../../lvgl/docs/intermediate/details/integration/framework/platformio.rst:5
#: ../../lvgl/docs/intermediate/details/integration/ide/mdk.rst:5
#: ../../lvgl/docs/intermediate/details/integration/os/freertos.rst:5
#: ../../lvgl/docs/intermediate/details/integration/os/mqx.rst:10
#: ../../lvgl/docs/intermediate/details/integration/os/px5.rst:8
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:621
msgid "TODO"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1052
msgid "arc_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1054
msgid "Set width (thickness) of arcs in pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1066
msgid "arc_rounded"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1068
msgid "Make end points of arcs rounded. `true`: rounded, `false`: perpendicular line ending"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1080
msgid "arc_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1082
msgid "Set color of arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1094
msgid "arc_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1096
msgid "Set opacity of arcs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1108
msgid "arc_image_src"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1110
msgid "Set an image from which arc will be masked out. It's useful to display complex effects on the arcs. Can be a pointer to `lv_image_dsc_t` or a path to a file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1122
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:36
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:47
msgid "Text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1124
msgid "Properties to describe the properties of text. All these properties are inherited."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1127
msgid "text_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1129
msgid "Sets color of text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1141
msgid "text_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1143
msgid "Set opacity of text. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1155
msgid "text_font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1157
msgid "Set font of text (a pointer `lv_font_t *`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1169
msgid "text_letter_space"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1171
msgid "Set letter space in pixels"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1183
msgid "text_line_space"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1185
msgid "Set line space in pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1197
msgid "text_decor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1199
msgid "Set decoration for the text. Possible values are `LV_TEXT_DECOR_NONE/UNDERLINE/STRIKETHROUGH`. OR-ed values can be used as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1211
msgid "text_align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1213
msgid "Set how to align the lines of the text. Note that it doesn't align the Widget itself, only the lines inside the Widget. Possible values are `LV_TEXT_ALIGN_LEFT/CENTER/RIGHT/AUTO`. `LV_TEXT_ALIGN_AUTO` detect the text base direction and uses left or right alignment accordingly"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1225
msgid "text_outline_stroke_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1227
msgid "Sets the color of letter outline stroke."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1239
msgid "text_outline_stroke_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1241
msgid "Set the letter outline stroke width in pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1253
msgid "text_outline_stroke_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1255
msgid "Set the opacity of the letter outline stroke. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1267
msgid "Miscellaneous"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1269
msgid "Mixed properties for various purposes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1272
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "radius"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1274
msgid "Set radius on every corner. The value is interpreted in pixels (>= 0) or `LV_RADIUS_CIRCLE` for max. radius"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1286
msgid "radial_offset"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1288
msgid "Move start point of object (e.g. scale tick) radially"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1300
msgid "clip_corner"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1302
msgid "Enable to clip the overflowed content on the rounded corner. Can be `true` or `false`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1314
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1316
msgid "Scale down all opacity values of the Widget by this factor. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1328
msgid "opa_layered"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1330
msgid "First draw Widget on the layer, then scale down layer opacity factor. Value 0, `LV_OPA_0` or `LV_OPA_TRANSP` means fully transparent, 255, `LV_OPA_100` or `LV_OPA_COVER` means fully covering, other values or LV_OPA_10, LV_OPA_20, etc means semi transparency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1342
msgid "color_filter_dsc"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1344
msgid "Mix a color with all colors of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1356
msgid "color_filter_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1358
msgid "The intensity of mixing of color filter."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1370
msgid "anim"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1372
msgid "Animation template for Widget's animation. Should be a pointer to `lv_anim_t`. The animation parameters are widget specific, e.g. animation time could be the E.g. blink time of the cursor on the Text Area or scroll time of a roller. See Widgets' documentation to learn more."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1384
msgid "anim_duration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1386
msgid "Animation duration in milliseconds. Its meaning is widget specific. E.g. blink time of the cursor on the Text Area or scroll time of a roller. See Widgets' documentation to learn more."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1398
msgid "transition"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1400
msgid "An initialized ``lv_style_transition_dsc_t`` to describe a transition."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1412
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "blend_mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1414
msgid "Describes how to blend the colors to the background. Possible values are `LV_BLEND_MODE_NORMAL/ADDITIVE/SUBTRACTIVE/MULTIPLY/DIFFERENCE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1426
msgid "layout"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1428
msgid "Set layout of Widget. Children will be repositioned and resized according to policies set for the layout. For possible values see documentation of the layouts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1440
msgid "base_dir"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1442
msgid "Set base direction of Widget. Possible values are `LV_BIDI_DIR_LTR/RTL/AUTO`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1454
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "bitmap_mask_src"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1456
msgid "If set, a layer will be created for the widget and the layer will be masked with this A8 bitmap mask."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1468
msgid "rotary_sensitivity"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1470
msgid "Adjust sensitivity for rotary encoders in 1/256 unit. It means, 128: slow down the rotary to half, 512: speeds up to double, 256: no change"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1484
msgid "Flex layout properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1487
msgid "flex_flow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1489
msgid "Defines in which direct the flex layout should arrange the children"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1501
msgid "flex_main_place"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1503
msgid "Defines how to align the children in the direction of flex flow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1515
msgid "flex_cross_place"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1517
msgid "Defines how to align the children perpendicular to the direction of flex flow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1529
msgid "flex_track_place"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1531
msgid "Defines how to align the tracks of the flow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1543
msgid "flex_grow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1545
msgid "Defines how much space to take proportionally from the free space of the Widget's track"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1559
msgid "Grid layout properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1562
msgid "grid_column_dsc_array"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1564
msgid "An array to describe the columns of the grid. Should be LV_GRID_TEMPLATE_LAST terminated"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1576
msgid "grid_column_align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1578
msgid "Defines how to distribute the columns"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1590
msgid "grid_row_dsc_array"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1592
msgid "An array to describe the rows of the grid. Should be LV_GRID_TEMPLATE_LAST terminated"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1604
msgid "grid_row_align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1606
msgid "Defines how to distribute the rows."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1618
msgid "grid_cell_column_pos"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1620
msgid "Set column in which Widget should be placed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1632
msgid "grid_cell_x_align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1634
msgid "Set how to align Widget horizontally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1646
msgid "grid_cell_column_span"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1648
msgid "Set how many columns Widget should span. Needs to be >= 1."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1660
msgid "grid_cell_row_pos"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1662
msgid "Set row in which Widget should be placed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1674
msgid "grid_cell_y_align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1676
msgid "Set how to align Widget vertically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1688
msgid "grid_cell_row_span"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/style-properties.rst:1690
msgid "Set how many rows Widget should span. Needs to be >= 1."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:5
msgid "Styles Overview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:7
msgid "Styles are used to set the appearance of Widgets.  Styles in LVGL are heavily inspired by CSS. The concept in a nutshell is that a style is an :cpp:type:`lv_style_t` variable which can hold properties like border width, font, text color and so on. It's similar to a ``class`` in CSS."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:12
msgid "Styles can be assigned to Widgets to change their appearance. Upon assignment, the target part (pseudo-element_ in CSS) and target state (pseudo-class_ in CSS) can be specified. For example one can add ``style_blue`` to the knob of a slider when it's in pressed state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:16
msgid "The same style can be used by any number of Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:17
msgid "Styles can be cascaded which means multiple styles may be assigned to a Widget and each style can have different properties. Therefore, not all properties have to be specified in a style. LVGL will search for a property until a style defines it or use a default value if it's not specified by any of the styles. For example ``style_btn`` can result in a default gray button and ``style_btn_red`` can add only a ``background-color=red`` to overwrite the background color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:24
msgid "The most recently added style has higher precedence. This means if a property is specified in two styles the newest style in the Widget will be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:26
msgid "Some properties (e.g. text color) can be inherited from a parent(s) if it's not specified in a Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:27
msgid "Widgets can also have :ref:`local styles <style_local>` with higher precedence than \"normal\" styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:28
msgid "Unlike CSS (where pseudo-classes_ describe different states, e.g. ``:focus``), in LVGL a property is assigned to a given state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:30
msgid "Transitions can be applied when the Widget changes state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:39
msgid "The Widgets can be in the combination of the following states:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:41
msgid ":cpp:enumerator:`LV_STATE_DEFAULT`: (0x0000) Normal, released state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:42
msgid ":cpp:enumerator:`LV_STATE_CHECKED`: (0x0001) Toggled or checked state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:43
msgid ":cpp:enumerator:`LV_STATE_FOCUSED`: (0x0002) Focused via keypad or encoder or clicked via touchpad/mouse"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:44
msgid ":cpp:enumerator:`LV_STATE_FOCUS_KEY`: (0x0004) Focused via keypad or encoder but not via touchpad/mouse"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:45
msgid ":cpp:enumerator:`LV_STATE_EDITED`: (0x0008) Edit by an encoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:46
msgid ":cpp:enumerator:`LV_STATE_HOVERED`: (0x0010) Hovered by mouse"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:47
msgid ":cpp:enumerator:`LV_STATE_PRESSED`: (0x0020) Being pressed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:48
msgid ":cpp:enumerator:`LV_STATE_SCROLLED`: (0x0040) Being scrolled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:49
msgid ":cpp:enumerator:`LV_STATE_DISABLED`: (0x0080) Disabled state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:50
msgid ":cpp:enumerator:`LV_STATE_USER_1`: (0x1000) Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:51
msgid ":cpp:enumerator:`LV_STATE_USER_2`: (0x2000) Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:52
msgid ":cpp:enumerator:`LV_STATE_USER_3`: (0x4000) Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:53
msgid ":cpp:enumerator:`LV_STATE_USER_4`: (0x8000) Custom state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:55
msgid "A Widget can be in a combination of states such as being focused and pressed at the same time. This is represented as :cpp:expr:`LV_STATE_FOCUSED | LV_STATE_PRESSED`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:58
msgid "A style can be added to any state or state combination. For example, setting a different background color for the default and pressed states. If a property is not defined in a state the best matching state's property will be used. Typically this means the property with :cpp:enumerator:`LV_STATE_DEFAULT` is used.  If the property is not set even for the default state the default value will be used. (See later)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:65
#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:196
msgid "Since :cpp:enumerator:`LV_PART_MAIN` and :cpp:enumerator:`LV_STATE_DEFAULT` both have zero values, you can simply pass ``0`` as the ``selector`` argument instead of ``LV_PART_MAIN | LV_STATE_DEFAULT`` as a shortcut when adding styles to an object."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:70
msgid "What does the \"best matching state's property\" mean?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:71
msgid "States have a precedence which is shown by their value (see in the above list). A higher value means higher precedence. To determine which state's property to use let's take an example. Imagine the background color is defined like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:76
msgid ":cpp:enumerator:`LV_STATE_DEFAULT`: white"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:77
msgid ":cpp:enumerator:`LV_STATE_PRESSED`: gray"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:78
msgid ":cpp:enumerator:`LV_STATE_FOCUSED`: red"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:80
msgid "Initially the Widget is in the default state, so it's a simple case: the property is perfectly defined in the Widget's current state as white."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:83
msgid "When the Widget is pressed there are 2 related properties: default with white (default is related to every state) and pressed with gray. The pressed state has 0x0020 precedence which is higher than the default state's 0x0000 precedence, so gray color will be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:87
msgid "When the Widget has focus the same thing happens as in pressed state and red color will be used. (Focused state has higher precedence than default state)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:90
msgid "When the Widget has focus and pressed both gray and red would work, but the pressed state has higher precedence than focused so gray color will be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:93
msgid "It's possible to set e.g. rose color for :cpp:expr:`LV_STATE_PRESSED | LV_STATE_FOCUSED`. In this case, this combined state has 0x0020 + 0x0002 = 0x0022 precedence, which is higher than the pressed state's precedence so rose color would be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:96
msgid "When the Widget is in the checked state there is no property to set the background color for this state. So for lack of a better option, the Widget remains white from the default state's property."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:100
msgid "Some practical notes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:102
msgid "The precedence (value) of states is quite intuitive, and it's something the user would expect naturally. Example:  if a Widget has focus the user will still want to see if it's pressed, therefore the pressed state has a higher precedence. If the focused state had a higher precedence it would overwrite the pressed color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:107
msgid "If you want to set a property for all states (e.g. red background color) just set it for the default state. If the Widget can't find a property for its current state it will fall back to the default state's property."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:110
msgid "Use ORed states to describe the properties for complex cases (e.g. pressed + checked + focused)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:112
msgid "It might be a good idea to use different style elements for different states. For example, finding background colors for released, pressed, checked + pressed, focused, focused + pressed, focused + pressed + checked, etc. states is quite difficult. Instead, for example, use the background color for pressed and checked states and indicate the focused state with a different border color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:124
msgid "Cascading Styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:126
msgid "It's not required to set all the properties in one style. It's possible to add more styles to a Widget and have the latter added style modify or extend appearance. For example, create a general gray button style and create a new one for red buttons where only the new background color is set."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:132
msgid "This is much like in CSS when used classes are listed like ``<div class=\".btn .btn-red\">``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:135
msgid "Styles added later have precedence over ones set earlier. So in the gray/red button example above, the normal button style should be added first and the red style second. However, the precedence of the states are still taken into account. So let's examine the following case:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:140
msgid "the basic button style defines dark-gray color for the default state and light-gray color for the pressed state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:142
msgid "the red button style defines the background color as red only in the default state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:144
msgid "In this case, when the button is released (it's in default state) it will be red because a perfect match is found in the most recently added style (red). When the button is pressed the light-gray color is a better match because it describes the current state perfectly, so the button will be light-gray."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:155
msgid "Inheritance"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:157
msgid "Some properties (typically those related to text) can be inherited from the parent Widget's styles. Inheritance is applied only if the given property is not set in the Widget's styles (even in default state). In this case, if the property is inheritable, the property's value will be searched up the parent hierarchy until a Widget specifies a value for the property. The parents will use their own state to determine the value. So if a button is pressed, and the text color comes from a parent, the pressed text color will be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:173
msgid "Widgets can be composed of *parts* which may each have their own styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:177
msgid ":cpp:enumerator:`LV_PART_MAIN`: (0x000000) A background like rectangle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:178
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR`: (0x010000) The scrollbar(s)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:179
msgid ":cpp:enumerator:`LV_PART_INDICATOR`: (0x020000) Indicator, e.g. for slider, bar, switch, or the tick box of the checkbox"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:180
msgid ":cpp:enumerator:`LV_PART_KNOB`: (0x030000) Like a handle to grab to adjust a value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:181
msgid ":cpp:enumerator:`LV_PART_SELECTED`: (0x040000) Indicate the currently selected option or section"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:182
msgid ":cpp:enumerator:`LV_PART_ITEMS`: (0x050000) Used if the widget has multiple similar elements (e.g. table cells)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:183
msgid ":cpp:enumerator:`LV_PART_CURSOR`: (0x060000) Mark a specific place e.g. Text Area's or chart's cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:184
msgid ":cpp:enumerator:`LV_PART_CUSTOM_FIRST`: (0x080000) Custom part identifiers can be added starting from here."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:185
msgid ":cpp:enumerator:`LV_PART_ANY`: (0x0F0000) Special value can be used in some functions to target all parts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:187
msgid "For example a :ref:`Slider <lv_slider>` has three parts:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:189
msgid "Main (background)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:190
msgid "Indicator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:191
msgid "Knob"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:193
msgid "This means all three parts of the slider can have their own styles. See later how to add styles to Widgets and parts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:205
msgid "Initialize Styles and Set/Get Properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:207
msgid "Styles are stored in :cpp:type:`lv_style_t` variables. Style variables should be ``static``, global or dynamically allocated. In other words they cannot be local variables in functions which are destroyed when the function exits. Before using a style it should be initialized with :cpp:expr:`lv_style_init(&my_style)`. After initializing a style, properties can be added or changed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:214
msgid "Property set functions looks like this: ``lv_style_set_<property_name>(&style, <value>);`` For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:231
msgid "To remove a property use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:237
msgid "To get a property's value from a style:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:247
msgid ":cpp:union:`lv_style_value_t` has 3 fields, only one of which will apply, depending on the type of property it is applied to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:250
msgid ":cpp:member:`num`: for integer, boolean and opacity properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:251
msgid ":cpp:member:`color`: for color properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:252
msgid ":cpp:member:`ptr`: for pointer properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:254
msgid "To reset a style (free all its data) use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:260
msgid "Styles can be built as ``const`` as well to save RAM:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:272
msgid "Later ``const`` style can be used like any other style but (obviously) new properties cannot be added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:280
msgid "Add and remove styles to a widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:282
msgid "A style on its own has no effect until it is added (assigned) to a Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:286
msgid "Add styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:288
msgid "To add a style to a Widget use ``lv_obj_add_style(widget, &style, <selector>)``. ``<selector>`` is an OR-ed value of parts and state to which the style should be added. Some examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:293
msgid ":cpp:expr:`LV_PART_MAIN | LV_STATE_DEFAULT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:294
msgid ":cpp:enumerator:`LV_STATE_PRESSED`: The main part in pressed state. :cpp:enumerator:`LV_PART_MAIN` can be omitted"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:295
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR`: The scrollbar part in the default state. :cpp:enumerator:`LV_STATE_DEFAULT` can be omitted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:296
msgid ":cpp:expr:`LV_PART_SCROLLBAR | LV_STATE_SCROLLED`: The scrollbar part when the Widget is being scrolled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:297
msgid ":cpp:expr:`LV_PART_INDICATOR | LV_STATE_PRESSED | LV_STATE_CHECKED` The indicator part when the Widget is pressed and checked at the same time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:299
msgid "Using :cpp:func:`lv_obj_add_style`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:307
msgid "Replace styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:309
msgid "To replace a specific style of a Widget use :cpp:expr:`lv_obj_replace_style(widget, old_style, new_style, selector)`. This function will only replace ``old_style`` with ``new_style`` if the ``selector`` matches the ``selector`` used in ``lv_obj_add_style``. Both ``old_style`` and ``new_style`` must not be ``NULL``.  Separate functions exist for adding and removing styles.  If the combination of ``old_style`` and ``selector`` exists multiple times in ``obj``\\ 's styles, all occurrences will be replaced. The return value of the function indicates whether at least one successful replacement took place."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:320
msgid "Using :cpp:func:`lv_obj_replace_style`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:328
msgid "Remove styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:330
msgid "To remove all styles from a Widget use :cpp:expr:`lv_obj_remove_style_all(widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:332
msgid "To remove specific styles use :cpp:expr:`lv_obj_remove_style(widget, style, selector)`. This function will remove ``style`` only if the ``selector`` matches with the ``selector`` used in :cpp:func:`lv_obj_add_style`. ``style`` can be ``NULL`` to check only the ``selector`` and remove all matching styles. The ``selector`` can use the :cpp:enumerator:`LV_STATE_ANY` and :cpp:enumerator:`LV_PART_ANY` values to remove the style from any state or part."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:341
msgid "Reporting style changes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:343
msgid "If a style which is already assigned to a Widget changes (i.e. a property is added or changed), the Widgets using that style should be notified. There are 3 options to do this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:347
msgid "If you know that the changed properties can be applied by a simple redraw (e.g. color or opacity changes) just call :cpp:expr:`lv_obj_invalidate(widget)` or :cpp:expr:`lv_obj_invalidate(lv_screen_active())`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:350
msgid "If more complex style properties were changed or added, and you know which Widget(s) are affected by that style call :cpp:expr:`lv_obj_refresh_style(widget, part, property)`. To refresh all parts and properties use :cpp:expr:`lv_obj_refresh_style(widget, LV_PART_ANY, LV_STYLE_PROP_ANY)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:353
msgid "To make LVGL check all Widgets to see if they use a style and refresh them when needed, call :cpp:expr:`lv_obj_report_style_change(&style)`. If ``style`` is ``NULL`` all Widgets will be notified about a style change."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:358
msgid "Get a style property's value on a Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:360
msgid "To get the final value of a style's property considering"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:362
msgid "cascading,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:363
msgid "inheritance,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:364
msgid "local styles and transitions (see below)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:366
msgid "property \"get\" functions like this can be used: ``lv_obj_get_style_<property_name>(widget, <part>)``. These functions use the Widget's current state and if no better candidate exists they return the default value. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:379
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:41
msgid "Local Styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:381
msgid "In addition to \"normal\" styles, Widgets can also store local styles. This concept is similar to inline styles in CSS (e.g. ``<div style=\"color:red\">``) with some modification."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:385
msgid "Local styles are like normal styles, but they can't be shared among other Widgets. If used, local styles are allocated automatically, and freed when the Widget is deleted. They are useful to add local customization to a Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:390
msgid "Unlike in CSS, LVGL local styles can be assigned to states (pseudo-classes_) and parts (pseudo-elements_)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:393
msgid "To set a local property use functions like ``lv_obj_set_style_<property_name>(widget, <value>, <selector>);``   For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:405
msgid "Style Properties Overview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:407
msgid "For the full list of style properties click :ref:`here <style_properties>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:413
msgid "Typical background properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:415
msgid "In documentation of widgets you will see sentences like \"The _____ Widget uses the typical background style properties\".  These \"typical background properties\" are the properties being referred to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:424
msgid "Width and height transformation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:425
msgid "X and Y translation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:427
msgid "See :ref:`boxing_model` for the meanings of these terms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:434
msgid "Transitions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:436
msgid "By default, when a Widget changes state (e.g. it's pressed) the new properties from the new state are set immediately. However, with transitions it's possible to play an animation on state change. For example, on pressing a button its background color can be animated to the pressed color over 300 ms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:442
msgid "The parameters of the transitions are stored in the styles. It's possible to set"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:445
msgid "the time of the transition"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:446
msgid "the delay before starting the transition"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:447
msgid "the animation path (also known as the timing or easing function)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:448
msgid "the properties to animate"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:450
msgid "The transition properties can be defined for each state. For example, setting a 500 ms transition time in the default state means that when the Widget goes to the default state a 500 ms transition time is applied. Setting a 100 ms transition time in the pressed state causes a 100 ms transition when going to the pressed state. This example configuration results in going to the pressed state quickly and then going back to default slowly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:458
msgid "To describe a transition an :cpp:struct:`lv_transition_dsc_t` variable needs to be initialized and added to a style:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:479
msgid "Opacity, Blend Modes and Transformations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:481
msgid "If the ``opa``, ``blend_mode``, ``transform_angle``, or ``transform_zoom`` properties are set to a non-default value LVGL creates a snapshot of the widget and its children in order to blend the whole widget with the set opacity, blend mode and transformation properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:487
msgid "These properties have this effect only on the ``MAIN`` part of the widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:490
msgid "The created snapshot is called \"intermediate layer\" or simply \"layer\". If only ``opa`` and/or ``blend_mode`` is set to a non-default value LVGL can build the layer from smaller chunks. The size of these chunks can be configured by the following properties in ``lv_conf.h``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:495
msgid ":cpp:enumerator:`LV_LAYER_SIMPLE_BUF_SIZE`: [bytes] the optimal target buffer size. LVGL will try to allocate this size of memory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:496
msgid ":cpp:enumerator:`LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE`: [bytes] used if :cpp:enumerator:`LV_LAYER_SIMPLE_BUF_SIZE` couldn't be allocated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:498
msgid "If transformation properties were also used the layer cannot be rendered in chunks, but one larger memory block needs to be allocated. The required memory depends on the angle, zoom and pivot parameters, and the size of the area to redraw, but it's never larger than the size of the widget (including the extra draw size used for shadow, outline, etc)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:504
msgid "If the widget can fully cover the area to redraw, LVGL creates an RGB layer (which is faster to render and uses less memory). If the opposite case ARGB rendering needs to be used, a widget might not cover its area if it has radius, ``bg_opa < 255``, has shadow, outline, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:509
msgid "The click area of the widget is also transformed accordingly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:516
msgid "Color Filter"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:525
msgid "Themes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:527
msgid "Themes are a collection of styles. If there is an active theme LVGL applies it to every newly-created widget. This will give a default appearance to the UI which can then be modified by adding further styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:531
msgid "Every display can have a different theme. For example, you could have a colorful theme on a TFT and monochrome theme on a secondary monochrome display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:535
msgid "To set a theme for a display, two steps are required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:537
msgid "Initialize a theme"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:538
msgid "Assign the initialized theme to a display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:540
msgid "Theme initialization functions can have different prototypes. This example shows how to set the \"default\" theme:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:555
msgid "The included themes are enabled in ``lv_conf.h``. If the default theme is enabled by :c:macro:`LV_USE_THEME_DEFAULT` LVGL automatically initializes and sets it when a display is created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:560
msgid "Extending themes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:562
msgid "Built-in themes can be extended. If a custom theme is created, a parent theme can be selected. The parent theme's styles will be added before the custom theme's styles. Any number of themes can be chained this way. E.g. default theme -> custom theme -> dark theme."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:567
msgid ":cpp:expr:`lv_theme_set_parent(new_theme, base_theme)` extends the ``base_theme`` with the ``new_theme``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:570
msgid "There is an example of this below."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:3
msgid "Size styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:9
msgid "Background styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:15
msgid "Border styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:21
msgid "Outline styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:27
msgid "Shadow styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:33
msgid "Image styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:39
msgid "Arc styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:45
msgid "Text styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:51
msgid "Line styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:57
msgid "Transition"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:63
msgid "Using multiple styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:69
msgid "Local styles"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:75
msgid "Add styles to parts and states"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:81
msgid "Extending the current theme"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:87
msgid "Opacity and Transformations"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:93
msgid "Metallic knob with conic gradient"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:99
msgid "Radial gradient as background"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:105
msgid "Gradients for button background"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/styles/index.rst:111
msgid "Test between recolor style or full background modal"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:619
msgid ":ref:`misc/lv_style.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/common-widget-features/styles/styles.rst:621
msgid ":ref:`misc/lv_style_gen.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:5
msgid "GDB Plug-In"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:8
msgid "Debugging LVGL with GDB"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:10
msgid "To facilitate debugging LVGL with GDB, a GDB plugin is provided. This plugin can be found in the ``lvgl/scripts/gdb`` directory. The GDB plugin can be used with any target where GDB is available. For example, you can use it to debug a device connected to a PC via JLink, which provides a GDB server. Additionally, if your device crashes and you have a core dump, you can use GDB to analyze the core dump. To load the LVGL GDB plugin within GDB's command line, type the following command:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:18
msgid "``source lvgl/scripts/gdb/gdbinit.py``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:21
msgid "Example of usage:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:39
msgid "The plugin provides the following commands."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:41
#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:49
msgid "``dump obj``: Dump the object tree."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:42
msgid "``info style``: Show the object's style."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:43
msgid "``info draw_unit``: Display all current drawing unit information."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:47
msgid "Dump obj tree"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:51
msgid "``dump obj -L 2``: Dump the object tree with a depth of 2."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:53
msgid "``dump obj -a 0x60700000dd10``: Dump the object tree starting from the specified address."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:57
msgid "Show obj's style"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:59
msgid "This command can dump the object's local style, since style value is a union, it's displayed in all possible formats."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:61
msgid "``info style address_of_obj``: Show the object's style."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:64
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:18
#: ../../lvgl/docs/intermediate/details/libs/gif.rst:32
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:25
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:74
#: ../../lvgl/docs/intermediate/details/xml/test.rst:34
msgid "Example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:79
msgid "Connect to Debugger"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:81
msgid "This command provides the ability to connect and debug GDB Python Script using IDE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:83
msgid "Connect to ``PyCharm`` / ``VSCode`` / ``Eclipse (not supported yet)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:85
msgid "``debugger -t pycharm``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:87
msgid "``debugger -t vscode``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:89
msgid "``debugger -t eclipse``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/gdb_plugin.rst:91
msgid "How to use it specifically, search ``pydevd_pycharm`` / ``debugpy`` for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/index.rst:5
msgid "Debugging"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:5
msgid "Logging"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:7
msgid "LVGL has a built-in *Log* module to inform the user about what is happening in the library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:12
#: ../../lvgl/docs/intermediate/details/debugging/log.rst:66
msgid "Log Level"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:14
msgid "To enable logging, set :c:macro:`LV_USE_LOG` in ``lv_conf.h`` and set :c:macro:`LV_LOG_LEVEL` to one of the following values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:17
msgid ":c:macro:`LV_LOG_LEVEL_TRACE`: A lot of logs to give detailed information"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:18
msgid ":c:macro:`LV_LOG_LEVEL_INFO`: Log important events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:19
msgid ":c:macro:`LV_LOG_LEVEL_WARN`: Log if something unwanted happened but didn't cause a problem"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:20
msgid ":c:macro:`LV_LOG_LEVEL_ERROR`: Only critical issues, where the system may fail"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:21
msgid ":c:macro:`LV_LOG_LEVEL_USER`: Only user messages"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:22
msgid ":c:macro:`LV_LOG_LEVEL_NONE`: Do not log anything"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:24
msgid "The events which have a higher level than the set log level will be logged as well. E.g., if you set :c:macro:`LV_LOG_LEVEL_WARN`, errors will also be logged."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:29
msgid "Printing Logs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:32
msgid "Logging with printf"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:34
msgid "If your system supports ``printf``, you just need to enable :c:macro:`LV_LOG_PRINTF` in ``lv_conf.h`` to send the logs with ``printf``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:38
msgid "Custom log function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:40
msgid "If you can't use ``printf`` or want to use a custom function to log, you can register a \"logger\" callback with :cpp:func:`lv_log_register_print_cb`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:59
msgid "Add Logs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:61
msgid "You can also use the log module via the ``LV_LOG_TRACE/INFO/WARN/ERROR/USER(text)`` or ``LV_LOG(text)`` functions. Here:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:65
msgid "``LV_LOG_TRACE/INFO/WARN/ERROR/USER(text)`` append the following information to your ``text``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:67
msgid "\\__FILE\\_\\_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:68
msgid "\\__LINE\\_\\_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:69
msgid "\\__func\\_\\_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:70
msgid "``LV_LOG(text)`` is similar to ``LV_LOG_USER`` but has no extra information attached."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/log.rst:76
msgid ":ref:`misc/lv_log.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:5
msgid "Profiler"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:7
msgid "As the complexity of the application increases, performance issues such as low FPS and frequent cache misses causing lag may arise. LVGL has internally set up some hooks for performance measurement to help developers analyze and locate performance issues."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:14
#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:8
#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:5
msgid "Introduction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:16
msgid "LVGL has a built-in trace system to track and record the timestamps of important events that occur during runtime, such as rendering events and user input events. These event timestamps serve as important metrics for performance analysis."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:19
msgid "The trace system has a configurable record buffer that stores the names of event functions and their timestamps. When the buffer is full, the trace system prints the log information through the provided user interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:22
msgid "The output trace logs are formatted according to Android's `systrace <https://developer.android.com/topic/performance/tracing>`_ format and can be visualized using `Perfetto <https://ui.perfetto.dev>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:31
msgid "Configure profiler"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:33
msgid "To enable the profiler, set :c:macro:`LV_USE_PROFILER` in ``lv_conf.h`` and configure the following options:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:35
msgid "Enable the built-in profiler functionality by setting :c:macro:`LV_USE_PROFILER_BUILTIN`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:37
msgid "Buffer configuration: Set the value of :c:macro:`LV_PROFILER_BUILTIN_BUF_SIZE` to configure the buffer size. A larger buffer can store more trace event information, reducing interference with rendering. However, it also results in higher memory consumption."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:39
msgid "Timestamp configuration: LVGL uses the :cpp:func:`lv_tick_get` function with a precision of 1ms by default to obtain timestamps when events occur. Therefore, it cannot accurately measure intervals below 1ms. If your system environment can provide higher precision (e.g., 1us), you can configure the profiler as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:41
msgid "Recommended configuration in **UNIX** environments:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:80
msgid "Recommended configuration in **Arduino** environments:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:99
msgid "Log output configuration: LVGL uses the :cpp:func:`LV_LOG` interface by default to output trace information. If you want to use another interface to output log information (e.g., file stream), you can redirect the log output using the following code:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:118
msgid "Run the test scenario"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:120
msgid "Run the UI scenario that you want to measure, such as scrolling a scrollable page up and down or entering/exiting an application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:123
msgid "Process the logs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:125
msgid "Save the output log as `my_trace.txt`, use `trace_filter.py` for filtering and preprocessing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:137
msgid "You will obtain a processed text file named `trace.systrace`, which roughly contains the following content:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:154
msgid "Import the processed `trace.systrace` file into `Perfetto <https://ui.perfetto.dev>`_ and wait for it to be parsed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:157
msgid "Performance analysis"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:159
msgid "If the log parsing is successful, you will see the following screen:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:163
msgid "In the Perfetto UI, use the :kbd:`A` or :kbd:`D` keys to pan the timeline horizontally and the :kbd:`W` or :kbd:`S` keys to zoom in or out on the timeline. Use the mouse to move the focus and click on functions on the timeline to observe their execution time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:168
msgid "Add Measurement Point"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:170
msgid "Users can add their own measured functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:195
msgid "Custom profiler implementation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:197
msgid "If you wish to use a profiler method provided by your operating system, you can modify the following configurations in ``lv_conf.h``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:199
msgid ":c:macro:`LV_PROFILER_INCLUDE`: Provides a header file for the profiler function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:200
msgid ":c:macro:`LV_PROFILER_BEGIN`: Profiler start point function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:201
msgid ":c:macro:`LV_PROFILER_END`: Profiler end point function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:202
msgid ":c:macro:`LV_PROFILER_BEGIN_TAG`: Profiler start point function with custom tag."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:203
msgid ":c:macro:`LV_PROFILER_END_TAG`: Profiler end point function with custom tag."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:206
msgid "Taking `NuttX <https://github.com/apache/nuttx>`_ RTOS as an example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:219
msgid "FAQ"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:222
msgid "Perfetto log parsing fails"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:224
msgid "Please check the completeness of the logs. If the logs are incomplete, it may be due to the following reasons:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:226
msgid "Serial port reception errors caused by a high baud rate. You need to reduce the baud rate."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:227
msgid "Data corruption caused by other thread logs inserted during the printing of trace logs. You need to disable the log output of other threads or refer to the configuration above to use a separate log output interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:228
msgid "Make sure that the string passed in by :c:macro:`LV_PROFILER_BEGIN_TAG` or :c:macro:`LV_PROFILER_END_TAG` is not a local variable on the stack or a string in shared memory, because currently only the string address is recorded and the content is not copied."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:231
msgid "Function execution time displayed as 0s in Perfetto"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:233
msgid "If the function execution time is lower than the precision of the timestamps, this situation can occur. You can refer to the configuration instructions above to use a higher precision timestamp."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:236
msgid "Significant stuttering occurs during profiling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:238
msgid "When the buffer used to store trace events becomes full, the profiler will output all the data in the buffer, which can cause UI blocking and stuttering during the output. You can optimize this by taking the following measures:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:240
msgid "Increase the value of :c:macro:`LV_PROFILER_BUILTIN_BUF_SIZE`. A larger buffer can reduce the frequency of log printing, but it also consumes more memory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:241
msgid "Optimize the execution time of log printing functions, such as increasing the serial port baud rate or improving file writing speed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:244
msgid "Trace logs are not being output"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:246
msgid "If the trace logs are not automatically printed when the buffer is not full, you can try the following methods to force the log output:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:248
msgid "Reduce the value of :c:macro:`LV_PROFILER_BUILTIN_BUF_SIZE` to fill the buffer more quickly and trigger automatic printing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/profiler.rst:249
msgid "Manually call or use a timer to call the :cpp:func:`lv_profiler_builtin_flush` function to force the log output."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:5
#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:65
msgid "VG-Lite Simulator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:7
msgid "LVGL integrates a VG-Lite simulator based on ThorVG. Its purpose is to simplify the debugging of VG-Lite adaptation and reduce the time spent debugging and locating problems on hardware devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:10
msgid "It has been integrated into the CI automated compilation and testing process to ensure that the VG-Lite rendering backend can be fully tested after each PR modification."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:13
msgid "How It Works"
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:15
msgid "Sort out the APIs in the ``vg_lite.h`` header file provided by the vendor, re-implement the APIs using `ThorVG <https://github.com/thorvg/thorvg>`_, and simulate the same rendering images as the real hardware on the simulator."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:21
msgid "Enable VG-Lite rendering backend, see :ref:`vg_lite`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:23
msgid "Enable ThorVG and turn on the configuration :c:macro:`LV_USE_THORVG_INTERNAL` or :c:macro:`LV_USE_THORVG_EXTERNAL`. It is recommended to use the internal ThorVG library to ensure uniform rendering results."
msgstr ""

#: ../../lvgl/docs/intermediate/details/debugging/vg_lite_tvg.rst:26
msgid "Enable :c:macro:`LV_USE_VG_LITE_THORVG` and set :c:macro:`LV_DRAW_BUF_ALIGN` to 64. The rest of the options can remain default. Make sure :c:macro:`LV_VG_LITE_USE_GPU_INIT` is enabled, because the thorvg drawing context needs to be initialized before it can be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/building_lvgl.rst:5
msgid "Building LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/building_lvgl.rst:9
msgid "Make and CMake"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/building_lvgl.rst:11
msgid "LVGL also supports ``make`` and ``CMake`` build systems out of the box. To add LVGL to your Makefile based build system add these lines to your main Makefile:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/building_lvgl.rst:21
msgid "For integration with CMake, take a look at this section of the :ref:`Documentation <integrating_lvgl_cmake>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/building_lvgl.rst:26
msgid "Managed builds"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:12
msgid "lv_conf.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:16
msgid "Creating lv_conf.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:18
msgid "When setting up your project for the first time, copy ``lvgl/lv_conf_template.h`` to ``lv_conf.h`` next to the ``lvgl`` folder.  Change the first ``#if 0`` to ``1`` to enable the file's content and set the :c:macro:`LV_COLOR_DEPTH` define to align with the color depth used by your display panel.  See comments in ``lv_conf.h`` for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:24
msgid "The layout of the files should look like this::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:30
msgid "Alternatively, ``lv_conf.h`` can be copied to another place but then you should add the :c:macro:`LV_CONF_INCLUDE_SIMPLE` define to your compiler options (e.g. ``-DLV_CONF_INCLUDE_SIMPLE`` for GCC compiler) and set the include path manually (e.g. ``-I../include/gui``). In this case LVGL will attempt to include ``lv_conf.h`` simply with ``#include \"lv_conf.h\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:36
msgid "You can even use a different name for ``lv_conf.h``. The custom path can be set via the :c:macro:`LV_CONF_PATH` define. For example ``-DLV_CONF_PATH=\"/home/joe/my_project/my_custom_conf.h\"``. If this define is set :c:macro:`LV_CONF_SKIP` is assumed to be ``0``. Please notice, when defining the :c:macro:`LV_CONF_PATH`, you need to make sure it is defined as a string, otherwise a build error will be raised."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:43
msgid "If :c:macro:`LV_CONF_SKIP` is defined, LVGL will not try to include ``lv_conf.h``. Instead you can pass the config defines using build options. For example ``\"-DLV_COLOR_DEPTH=32 -DLV_USE_BUTTON=1\"``.  Unset options will get a default value which is the same as the content of ``lv_conf_template.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:53
msgid "Configuration Settings"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:55
msgid "Once the ``lv_conf.h`` file is in place, you can modify this header to configure LVGL's behavior, disable unused modules and features, adjust the size of buffers, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:58
msgid "The comments in ``lv_conf.h`` explain the meaning of each setting.  Be sure to at least set :c:macro:`LV_COLOR_DEPTH` according to your display's color depth.  Note that the examples and demos explicitly need to be enabled in ``lv_conf.h`` if you need them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:63
msgid "TODO:  Add all things related to ``lv_conf.h`` file and its contents."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:67
msgid "Multiple Instances of LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:68
msgid "It is possible to run multiple, independent instances of LVGL.  To enable its multi-instance feature, set :c:macro:`LV_GLOBAL_CUSTOM` in ``lv_conf.h`` and provide a custom function to :cpp:func:`lv_global_default` using ``__thread`` or ``pthread_key_t``.  It will allow running multiple LVGL instances by storing LVGL's global variables in TLS (Thread-Local Storage)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:87
#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:144
msgid "Kconfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:88
msgid "LVGL can also be configured using Kconfig. For now, this is only available using cmake. Under the hood, it uses ``kconfiglib`` Kconfig python port to be able to use it across different platforms. The ``kconfiglib`` offers the python API and some CLI commands. Here is a list of some useful commands:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:92
msgid "``menuconfig``: Opens a console menu interface to modify the configuration values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:93
msgid "``guiconfig`` (needs ``tkinter``): Opens a graphical interface to modify the configuration values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:94
msgid "``savedefconfig``: Saves the current .config as a defconfig, listing only non-default values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:95
msgid "``alldefconfig``: Creates a .config with all default values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:96
msgid "``genconfig``: Generates a C header from the config, following ``autoconf.h`` format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:102
msgid "Install the prerequisites using ``scripts/install_prerequisites.sh/bat``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:106
msgid "Create the configuration (.config)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:108
msgid "At this point, the ``menuconfig`` command should be available:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:115
msgid "Make changes to the config and exit using `Esc` or `Q`, and save your configuration. The ``.config`` file is now created and lists the configuration values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:120
msgid "Configuring with cmake"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:122
msgid "Once the ``.config`` is created, run cmake with the ``-DLV_USE_KCONFIG=ON`` flag:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:130
msgid "To use a ``defconfig`` file, one can use the ``-DLV_DEFCONFIG_PATH=<path_to_defconfig>`` flag:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:138
msgid "Some defconfigs are available in ``configs/defconfigs`` folder."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:142
msgid "Saving a defconfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/configuration.rst:144
msgid "One can save a defconfig using the ``savedefconfig`` command:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:5
msgid "Connecting LVGL to Your Hardware"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:11
msgid "Initializing LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:12
msgid "After you have:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:14
msgid ":ref:`acquired LVGL <getting_lvgl>`,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:15
msgid "added the appropriate LVGL files to your project, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:16
msgid ":ref:`created a lv_conf.h file <lv_conf>` for your project,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:18
msgid "you will need to complete a few more steps to get your project up and running with LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:20
msgid "Initialize LVGL once early during system execution by calling :cpp:func:`lv_init`. This needs to be done before making any other LVGL calls."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:23
msgid "Initialize your drivers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:25
msgid "Connect the :ref:`tick_interface`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:27
msgid "Connect the :ref:`display_interface`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:29
msgid "Connect the :ref:`indev_interface`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:31
msgid "Drive LVGL time-related tasks by calling :cpp:func:`lv_timer_handler` every few milliseconds to manage LVGL timers.  See :ref:`timer_handler` for different ways to do this."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:35
msgid "Optionally set a theme with :cpp:func:`lv_display_set_theme`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:37
msgid "Thereafter #include \"lvgl/lvgl.h\" in source files wherever you need to use LVGL functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:45
msgid "Tick Interface"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:47
msgid "LVGL needs awareness of what time it is (i.e. elapsed time in milliseconds) for all of its tasks for which time is a factor:  refreshing displays, reading user input, firing events, animations, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:51
#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:13
msgid "LVGL Data Flow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:56
msgid "There are two ways to provide this information to LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:58
msgid "Supply LVGL with a callback function to retrieve elapsed system milliseconds by calling :cpp:expr:`lv_tick_set_cb(my_get_milliseconds)`. :cpp:expr:`my_get_milliseconds()` needs to return the number of milliseconds elapsed since system start up.  Many platforms have built-in functions that can be used as they are.  For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:64
msgid "SDL:  ``lv_tick_set_cb(SDL_GetTicks);``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:65
msgid "Arduino:  ``lv_tick_set_cb(my_tick_get_cb);``, where ``my_tick_get_cb`` is: ``static uint32_t my_tick_get_cb(void) { return millis(); }``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:67
msgid "FreeRTOS:  ``lv_tick_set_cb(xTaskGetTickCount);``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:68
msgid "STM32:  ``lv_tick_set_cb(HAL_GetTick);``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:69
msgid "ESP32:  ``lv_tick_set_cb(my_tick_get_cb);``, where ``my_tick_get_cb`` is a wrapper for ``esp_timer_get_time() / 1000;``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:72
msgid "Call :cpp:expr:`lv_tick_inc(x)` periodically, where ``x`` is the elapsed milliseconds since the last call.  If :cpp:func:`lv_tick_inc` is called from an ISR, it should be from either a high priority interrupt or an interrupt that cannot be missed when the system is under high load."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:77
msgid ":cpp:func:`lv_tick_inc` is only one of two LVGL functions that may be called from an interrupt if writing to a ``uint32_t`` value is atomic on your platform.  See below and the :ref:`threading` section to learn more."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:81
msgid "Either way, the writing of the ``uint32_t`` Tick value must be :ref:`atomic <atomic>`, which is usually the case with a 32- or 64-bit platform.  If you are using a 16-bit system (causing the update of the Tick value to not be atomic) and your platform uses the Harvard instruction set, you can set a function like this as the callback passed to :cpp:expr:`lv_tick_set_cb(my_get_milliseconds)`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:109
msgid "Reliability"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:110
msgid "Advancing the tick value should be done in such a way that its timing is reliable and not dependent on anything that consumes an unknown amount of time. For an example of what *not* to do: this can \"seem\" to work, but LVGL's timing will be incorrect because the execution time of :c:func:`lv_timer_handler` varies from call to call and thus the delay it introduces cannot be known."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:128
msgid "Display Interface"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:129
msgid "LVGL needs to be supplied with knowledge about each display panel you want it to use. Specifically:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:132
msgid "its pixel format and size (:ref:`creating_a_display`),"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:133
msgid "where to render pixels for it (:ref:`draw_buffers`), and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:134
msgid "how to send those rendered pixels to it (:ref:`flush_callback`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:136
msgid "See the respective links for how to supply LVGL with this knowledge."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:143
msgid "Input-Device Interface"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:144
msgid "LVGL needs to know how to get input from all user-input devices that will be used in your project.  LVGL supports a wide variety of user-input devices:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:147
msgid "touch-screens,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:148
msgid "touch-pads,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:149
msgid "mice,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:150
msgid "crowns,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:151
msgid "encoders,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:152
msgid "keypads,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:153
msgid "keyboards,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:154
#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:21
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:96
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:103
msgid "etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:156
msgid "See :ref:`indev_creation` to see how to do this."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:166
msgid ":ref:`tick/lv_tick.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/connecting_lvgl.rst:168
msgid ":ref:`tick/lv_tick_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/getting_lvgl.rst:5
msgid "Getting LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/getting_lvgl.rst:7
msgid "LVGL is available on GitHub: https://github.com/lvgl/lvgl."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/getting_lvgl.rst:9
msgid "You can clone it or `Download <https://github.com/lvgl/lvgl/archive/refs/heads/master.zip>`__ the latest version of the library from GitHub."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/getting_lvgl.rst:13
msgid "The graphics library itself is the ``lvgl`` directory.  It contains several directories but to use LVGL you only need the ``.c`` and ``.h`` files under the ``src`` directory, plus ``lvgl/lvgl.h``, and ``lvgl/lv_version.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/getting_lvgl.rst:19
msgid "Demos and Examples"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/getting_lvgl.rst:21
msgid "The ``lvgl`` directory also contains an ``examples`` and a ``demos`` directory. If your project needs examples and/or demos, add these directories to your project. If ``make`` or :ref:`build_cmake` handles the examples and demos directories, no extra action is required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/index.rst:5
msgid "Adding LVGL to Your Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/other_platforms.rst:5
msgid "Other Platforms and Tools"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/other_platforms.rst:7
msgid "See :ref:`Integration <integration_index>` to see how to use LVGL on different platforms.  There, you will find many platform-specific descriptions e.g. for ESP32, Arduino, NXP, RT-Thread, NuttX, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:5
msgid "Threading Considerations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:10
msgid "Definitions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:14
msgid "Thread"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:15
msgid "In the context of this document, a thread is any sequence of CPU instructions. In \"bare-metal\" implementations (i.e. no OS), threads include:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:18
msgid "the main thread executing a while(1) loop that runs the system, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:19
msgid "interrupt service routines (ISRs)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:21
msgid "When running under an OS, threads include:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:23
msgid "each task (or process),"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:24
msgid "ISRs, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:25
msgid "advanced OSes can have multiple \"execution threads\" within a processes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:29
msgid "Atomic Operation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:30
msgid "If operation X is atomic, that means that any thread observing the operation will see it either as not yet started, or as completed, and not in any state that is partially completed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:34
msgid "If other threads can see the operation in a partially performed state, or interfere with it, then operation X is not atomic."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:37
msgid "If an atomic operation can fail, its implementation must return the resource back to the state before the operation was started. To other threads, it must appear as though the operation had not yet started."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:45
msgid "Atomic Data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:46
msgid "A datum (i.e. contents of a variable or data structure) is atomic if any thread observing it will always see it in a consistent state, as if operations on it have either not yet started, or have been successfully completed, and not in a state that is partially changed or otherwise inconsistent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:51
msgid "When reading or writing a value is started and completed with 1 CPU instruction, it is automatically atomic, since it can never been seen in an inconsistent (partially-changed) state, even from a CPU interrupt or exception.  With such values, no special protection is required by programmers to ensure all threads see it in a consistent state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:62
msgid "LVGL and Threads"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:64
msgid "LVGL is **not thread-safe**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:66
msgid "That means it is the programmer's responsibility to see that no LVGL function is called while another LVGL call is in progress in another thread.  This includes calls to :cpp:func:`lv_timer_handler`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:71
msgid "Assuming the above is the case, it is safe to call LVGL functions in"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:73
msgid ":ref:`event callbacks <events>`, and in"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:74
msgid ":ref:`timer callbacks <timer>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:76
msgid "because the thread that drives both of these is the thread that calls :cpp:func:`lv_timer_handler`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:79
msgid "Reason:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:81
msgid "LVGL manages many complex data structures, and those structures are \"system resources\" that must be protected from being \"seen\" by other threads in an inconsistent state.  A high percentage LVGL functions (functions that start with ``lv_``) either read from or change those data structures.  Those that change them place the data in an inconsistent state during execution (because such changes are multi-step sequences), but return them to a consistent state before those functions return.  For this reason, execution of each LVGL function must be allowed to complete before any other LVGL function is started."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:92
msgid "Exceptions to the Above:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:94
msgid "These two LVGL functions may be called from any thread:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:96
msgid ":cpp:func:`lv_tick_inc` (if writing to a ``uint32_t`` is atomic on your platform; see :ref:`tick_interface` for more information) and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:98
msgid ":cpp:func:`lv_display_flush_ready` (:ref:`flush_callback` for more information)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:100
msgid "The reason this is okay is that the LVGL data changed by them is :ref:`atomic <atomic>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:102
msgid "If an interrupt MUST convey information to part of your application that calls LVGL functions, set a flag or other atomic value that your LVGL-calling thread (or an :ref:`LVGL Timer <timer>` you create) can read from and take action."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:106
msgid "If you are using an OS, there are a few other options.  See below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:110
msgid "Ensuring Time Updates are Atomic"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:111
msgid "For LVGL's time-related tasks to be reliable, the time updates via the Tick Interface must be reliable and the Tick Value must appear :ref:`atomic <atomic>` to LVGL.  See :ref:`tick_interface` for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:120
msgid "Tasks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:121
msgid "Under an OS, it is common to have many threads of execution (\"tasks\" in some OSes) performing services for the application.  In some cases, such threads can acquire data that should be shown (or otherwise reflected) in the user interface, and doing so requires making LVGL calls to get that data (or change) shown."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:126
msgid "Yet it still remains the programmer's responsibility to see that no LVGL function is called while another LVGL call is in progress."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:129
msgid "How do you do this?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:135
msgid "Method 1:  Use a Gateway Thread"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:136
msgid "A \"Gateway Thread\" (or \"Gateway Task\" in some OSes) is a thread (task) that the system designer designates to *exclusively* manage a system resource.  An example is management of a remote chip, such as an EEPROM or other device that always needs to be brought into a consistent state before something new is started.  Another example is management of multiple devices on an I2C bus (or any data bus).  In this case the I2C bus is the \"exclusively-managed resource\", and having only one thread managing it guarantees that each action started is allowed to complete before another action with it is started."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:145
msgid "LVGL's data structures are a system resource that requires such protection."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:147
msgid "Using this method, creation, modification and deletion of all Widgets and other LVGL resources (i.e. all LVGL function calls excluding the :ref:`exceptions <os_exception>` mentioned above) are called by that thread.  That means that thread is also the ONLY caller of :cpp:func:`lv_timer_handler`.  (See :ref:`adding_lvgl_to_your_project` for more information.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:153
msgid "This ensures LVGL's data structures \"appear\" atomic_ (all threads using this data \"see\" it in a consistent state) by the fact that no other threads are \"viewing\" those data structures.  This is enforced by programmer discipline that ensures the `Gateway Thread`_ is the only thread making LVGL calls (excluding the :ref:`exceptions <os_exception>` mentioned above)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:159
msgid "If `atomic data`_ relevant to the user interface is updated in another thread (i.e. by another task or in an interrupt), the thread calling LVGL functions can read that data directly without worry that it is in an inconsistent state.  (To avoid unnecessary CPU overhead, a mechanism can be provided [such as a flag raised by the updating thread] so that the user interface is only updated when it will result in a change visible to the end user.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:166
msgid "If `non-atomic data`_ relevant to the user interface is updated in another thread (i.e. by another task or in an interrupt), an alternate (and safe) way of convey that data to the thread calling LVGL functions is to pass a private copy of that data to that thread via a QUEUE or other OS mechanism that protects that data from being seen in an inconsistent state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:172
msgid "Use of a `Gateway Thread`_ avoids the CPU-overhead (and coding overhead) of using a MUTEX to protect LVGL data structures."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:177
msgid "Method 2:  Use a MUTEX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:178
msgid "A MUTEX stands for \"MUTually EXclusive\" and is a synchronization primitive that protects the state of a system resource from being modified or accessed by multiple threads of execution at once.  In other words, it makes data so protected \"appear\" atomic (all threads using this data \"see\" it in a consistent state).  Most OSes provide MUTEXes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:184
msgid "The system designer assigns a single MUTEX to product a single system resource.  Once assigned, that MUTEX performs such protection by programmers:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:187
msgid "acquiring the MUTEX (a.k.a. locking it) before accessing or modifying that resource, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:190
msgid "releasing the MUTEX (a.k.a. unlocking it) after that access or modification is complete."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:193
msgid "If a thread attempts to acquire (lock) the MUTEX while another thread \"owns\" it, that thread waits on the other thread to release (unlock) it before it is allowed to continue execution."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:197
msgid "To be clear:  this must be done *both* by threads that READ from that resource, and threads that MODIFY that resource."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:200
msgid "If a MUTEX is used to protect LVGL data structures, that means *every* LVGL function call (or group of function calls) must be preceded by #1, and followed by #2, including calls to :cpp:func:`lv_timer_handler`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:205
msgid "If your OS is integrated with LVGL (the macro :c:macro:`LV_USE_OS` has a value other than ``LV_OS_NONE`` in ``lv_conf.h``) you can use :cpp:func:`lv_lock()` and :cpp:func:`lv_unlock()` to perform #1 and #2."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:209
msgid "When this is the case, :cpp:func:`lv_timer_handler` calls :cpp:func:`lv_lock()` and :cpp:func:`lv_unlock()` internally, so you do not have to bracket your calls to :cpp:func:`lv_timer_handler` with them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:213
msgid "If your OS is NOT integrated with LVGL, then these calls either return immediately with no effect, or are optimized away by the linker."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:216
msgid "To enable :cpp:func:`lv_lock()` and :cpp:func:`lv_unlock()`, set ``LV_USE_OS`` to a value other than ``LV_OS_NONE``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:219
msgid "This pseudocode illustrates the concept of using a MUTEX:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:254
msgid "Sleep Management"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:256
msgid "The MCU can go to sleep when no user input has been received for a certain period. In this case, the main ``while(1)`` could look like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:274
msgid "You should also add the following lines to your input device read function to signal a wake-up (press, touch, click, etc.) has happened:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/threading.rst:283
msgid "In addition to :cpp:func:`lv_display_get_inactive_time` you can check :cpp:func:`lv_anim_count_running` to see if all animations have finished."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:5
msgid "Timer Handler"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:7
msgid "To drive the timers of LVGL you need to call :cpp:func:`lv_timer_handler` periodically in one of the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:10
msgid "*while(1)* of *main()* function, or"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:11
msgid "an OS task periodically.  (See :ref:`lvgl_and_threads`.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:28
msgid "If you want to use :cpp:func:`lv_timer_handler` in a super-loop, a helper function :cpp:func:`lv_timer_handler_run_in_period` is provided to simplify supplying LVGL with time awareness:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:40
msgid "Or use the sleep time automatically calculated by LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:50
msgid "In an OS environment, you can use it together with the **delay** or **sleep** provided by OS to release CPU whenever possible:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:61
msgid "See :ref:`timer` section to learn more about timers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:67
msgid "When No Timers Are Ready"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:69
msgid ":c:func:`lv_timer_handler` will return :c:macro:`LV_NO_TIMER_READY` (``UINT32_MAX``) if there are no running timers. This can happen if there are no indevs or they are disabled with `lv_indev_enable()`, running animations, or running user-created timers. :c:func:`lv_timer_handler` will continue to return :c:macro:`LV_NO_TIMER_READY` until there is a running timer. Display timers will stay paused when there is no reason to refresh. :c:func:`lv_timer_handler` should be called after something is created, deleted, or modified so that a refresh will be performed if necessary. In practice this means waiting without a timeout for some external event. After the external events are received and handled, :c:func:`lv_timer_handler` should be called again."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:98
msgid "If there is no external event source, you may choose to exit the loop or simply delay for a long time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:101
msgid "If another :ref:`thread <threading>` is calling LVGL functions, you may want to call :c:func:`lv_timer_handler` again very soon to handle the effects of those other threads."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/adding-lvgl-to-your-project/timer_handler.rst:110
#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:88
#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:229
msgid ":ref:`misc/lv_timer.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:5
msgid "Output API as JSON Data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:7
msgid "As of 20-Jun-2024, LVGL comes packaged with a Python script (``./scripts/gen_json/gen_json.py``) that reads the header files in LVGL and outputs a more friendly JSON format for the API.  This is done so that bindings that generate code automatically will have an easy way to collect the needed information without having to reinvent the wheel.  JSON format was chosen because there are libraries for reading JSON data in almost every programming language."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:17
msgid "Requirements"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:19
msgid "Python >= 3.10"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:20
msgid "Pycparser >= 2.22: Python Library for reading C preprocessor output"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:21
msgid "PyMSVC >= 0.4.0: Python library for using the MSVC Compiler"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:22
msgid "A C compiler:  gcc for Linux, clang for OSX and MSVC for Windows"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:23
msgid "Doxygen:  used to read Doxygen comments (the API documentation) from the header files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:31
msgid "Command-Line Options"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:33
msgid "``--output-path``:  output directory for JSON file.  If one is not supplied then it will be output to stdout."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:35
msgid "``--lvgl-config``:  path to lv_conf.h (including file name).  If this is not set then a config file will be generated that has the most common LVGL options turned on."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:37
msgid "``--develop``:  leaves the files generated in the temporary folder in place."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:42
msgid "Normal usage:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:48
msgid "If you want to run a subprocess from inside of a generation script and read the output from stdout:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:55
msgid "Output Data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:57
msgid "The contents of the output file is a large JSON object (``{...}``) with the following key/value pairs (these are the keys):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:74
msgid "As you can see, the value of each of these elements is an array.  The elements in each array are JSON objects, each with a structure unique to the type indicated by the parent element name (e.g. \"enums\", \"functions\", etc.)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:78
msgid "A key/value pair has been added to each object (key = \"json_type\") to make it possible to pass an object to a generic function and have each object know its own type through this field.  The possible \"json_type\" values are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:82
msgid "``\"array\"``: The array type is used to identify arrays."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:86
msgid "``\"dim\"``: number of items in array"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:87
msgid "``\"quals\"``: array of qualifiers, IE \"const\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:88
msgid "``\"type\"``: This may or may not be available."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:89
msgid "``\"name\"``: name of data type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:92
msgid "``\"field\"``: This type is used to describe fields in structures and unions. It is used in the ``\"fields\"`` array of the ``\"struct\"`` and ``\"union\"`` types covered below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:98
msgid "``\"name\"``: field name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:99
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:110
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:122
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:145
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:237
msgid "``\"type\"``: data type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:100
msgid "``\"json_type\"`` carries object type (e.g. \"enum\", \"function\", etc.) identifying the top-level group it comes from"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:101
msgid "``\"bitsize\"``: The number of bits for bit-fields, or ``null`` for normal field types."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:102
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:112
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:124
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:135
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:147
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:175
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:187
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:205
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:216
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:229
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:239
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:248
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:285
msgid "``\"docstring\"``: string containing Doxygen-extracted documentation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:105
msgid "``\"arg\"``: Describes a function argument"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:109
msgid "``\"name\"``: argument name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:111
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:123
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:146
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:238
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:274
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:284
msgid "``\"json_type\"`` carries object type (e.g. \"enum\", \"function\", etc.) identifying the top-level group it comes from."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:113
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:125
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:137
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:148
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:196
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:207
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:218
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:257
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:266
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:275
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:286
msgid "``\"quals\"``: array of any qualifiers present, e.g. \"const\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:116
msgid "``\"forward_decl\"``: Describes a forward declaration. There are structures in LVGL that are considered to be private and that is what these describe."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:121
msgid "``\"name\"``: name of forward declaration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:128
msgid "``\"function_pointer\"``: Describes a function pointer.  These are used when registering callback functions in LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:133
msgid "``\"name\"``: name of function pointer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:134
msgid "``\"type\"``: function return type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:136
msgid "``\"args\"``: array of ``\"arg\"`` objects described above"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:140
msgid "``\"variable\"``: Describes a global variable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:144
msgid "``\"name\"``: variable name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:149
msgid "``\"storage\"``: array of any storage-class specifiers present (e.g. \"auto\", \"static\", \"extern\", etc.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:152
msgid "``\"special_type\"``:  Currently only used to describe an ellipsis argument of a function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:156
msgid "``\"name\"``: always \"ellipsis\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:159
msgid "``\"primitive_type\"``: Data type that does not begin with ``\"lv_\"`` and end with ``\"_t\"``.  Compare to ``\"lvgl_type\"``  This includes struct, union, integral types (e.g. int, unsigned int), etc.."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:165
msgid "``\"name\"``: name of primitive type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:168
msgid "``\"enum\"``: C enumerations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:172
msgid "``\"name\"``: If enumeration is the result of a ``typedef``, this field carries the type name defined.  Example:  ``lv_align_t``.  (Not always available.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:174
msgid "``\"type\"``: type of enumerators (always \"int\")"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:176
msgid "``\"members\"``: array of ``\"enum_member\"`` objects"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:179
msgid "``\"enum_member\"``: enumerator (enumeration value).  This \"json_type\" is only found in the ``\"members\"`` array of an ``\"enum\"`` object"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:184
msgid "``\"name\"``: enumerator name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:185
msgid "``\"type\"``: If enumeration is the result of a ``typedef``, this field carries the type name defined.  Example:  ``lv_align_t``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:188
msgid "``\"value\"``: enumerator value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:191
msgid "``\"lvgl_type\"``: Data type defined in LVGL (begins with ``\"lv_\"`` and ends with ``\"_t\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:195
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:256
#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:265
msgid "``\"name\"``: type name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:199
msgid "``\"struct\"``: C struct"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:203
msgid "``\"name\"``: struct name (data type if defined by ``typedef``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:204
msgid "``\"type\"``: a \"primitive_type\" object {\"name\": \"struct\", \"json_type\": \"primitive_type\"}.  (See definition above.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:206
msgid "``\"fields\"``: array of ``\"field\"`` objects (See definition above.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:210
msgid "``\"union\"``: C union"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:214
msgid "``\"name\"``: union name (data type if defined by ``typedef``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:215
msgid "``\"type\"``: a \"primitive_type\" object {\"name\": \"union\", \"json_type\": \"primitive_type\"}.  (See definition above.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:217
msgid "``\"fields\"``: array of ``\"field\"`` elements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:221
msgid "``\"macro\"``: C macro.  There is limited information that can be collected about macros and in most cases a binding will need to have these statically added to a binding.  It is more for collecting the docstrings than anything else."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:228
msgid "``\"name\"``: macro name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:232
msgid "``\"ret_type\"``: return type from a function. This is only going to be seen in the ``\"type\"`` element of a ``\"function\"`` type."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:242
msgid "``\"function\"``: C function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:246
msgid "``\"name\"``: function name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:247
msgid "``\"type\"``: A \"ret_type\" object.  (See definition above.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:249
msgid "``\"args\"``: array of ``\"arg\"`` json types.  (See definition above.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:252
msgid "``\"stdlib_type\"``:  C integral type (int, unsigned int, float, etc.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:260
msgid "``\"unknown_type\"``: This should not be seen. If it is then there needs to be an adjustment made to the script. Please open an issue and let us know if you see this type."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:269
msgid "``\"pointer\"``: C pointer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:273
msgid "``\"type\"``: pointer type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:278
msgid "``\"typedef\"``: C type definition"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:282
msgid "``\"name\"``: type name (e.g. ``lv_part_t``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:283
msgid "``\"type\"``: a \"primitive_type\" object {\"name\": \"uint32_t\", \"json_type\": \"stdlib_type\"}.  (See definition above.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/api_json.rst:290
msgid "Here is a shortened example of what the output looks like."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/cpp.rst:3
msgid "Cpp"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/cpp.rst:5
msgid "In progress: https://github.com/lvgl/lv_binding_cpp"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/index.rst:3
msgid "Bindings"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:3
msgid "JavaScript"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:5
msgid "With `lv_binding_js <https://github.com/lvgl/lv_binding_js>`__ you can use LVGL from within JavaScript."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:7
msgid "It uses React's virtual DOM concept to manipulate LVGL UI components, providing a familiar React-like experience to users."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:10
msgid "**Code**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:12
msgid "**Code Running on Real Device**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:16
msgid "Features"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:18
msgid "Support all LVGL built-in components"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:19
msgid "Fully support LVGL flex and grid styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:20
msgid "Support most LVGL styles, just write like HTML5 CSS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:21
msgid "Support dynamic image loading"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:22
msgid "Fully support LVGL animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:26
msgid "Demo"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:28
msgid "See the `demo <https://github.com/lvgl/lv_binding_js/tree/master/demo>`__ folder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:32
msgid "Building"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:34
msgid "The following are developer notes on how to build lvgljs on your native platform. They are not complete guides, but include notes on the necessary libraries, compile flags, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:39
msgid "lvgljs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:41
msgid "`Build Notes for embedded Linux device <https://github.com/lvgl/lv_binding_js/blob/master/doc/build/build-device.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:42
msgid "`Build Notes for SDL Simulator (Linux and macOS) <https://github.com/lvgl/lv_binding_js/blob/master/doc/build/build-simulator.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:46
msgid "JS Bundle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:48
msgid "`JS Bundle build Notes <https://github.com/lvgl/lv_binding_js/blob/master/doc/build/js-bundle.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:52
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:17
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:5
#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:99
msgid "Components"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:54
msgid "`View <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/View.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:55
msgid "`Image <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Image.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:56
msgid "`Button <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Button.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:57
msgid "`Text <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Text.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:58
msgid "`Input <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Input.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:59
msgid "`Textarea <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Textarea.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:60
msgid "`Switch <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Switch.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:61
msgid "`Checkbox <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Checkbox.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:62
msgid "`Dropdownlist <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Dropdownlist.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:63
msgid "`ProgressBar <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/ProgressBar.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:64
msgid "`Line <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Line.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:65
msgid "`Roller <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Roller.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:66
msgid "`Keyboard <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Keyboard.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:67
msgid "`Calendar <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Calendar.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:68
msgid "`Chart <https://github.com/lvgl/lv_binding_js/blob/master/doc/component/Chart.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:72
msgid "Font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:74
msgid "`Builtin-Symbol <https://github.com/lvgl/lv_binding_js/blob/master/doc/Symbol/symbol.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:78
msgid "Animation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:80
msgid "`Animation <https://github.com/lvgl/lv_binding_js/blob/master/doc/animate/animate.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:84
msgid "Style"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:88
msgid "`position-size-layout <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/position-size-layout.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:89
msgid "`boxing-model <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/boxing-model.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:90
msgid "`color <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/color.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:91
msgid "`flex <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/flex.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:92
msgid "`grid <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/grid.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:93
msgid "`font <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/font.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:94
msgid "`opacity <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/opacity.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:95
msgid "`display <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/display.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:96
msgid "`background <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/background.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:97
msgid "`scroll <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/scroll.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:98
msgid "`shadow <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/shadow.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:99
msgid "`recolor <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/recolor.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:100
msgid "`line <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/line.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:101
msgid "`transition <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/transition.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:102
msgid "`transform <https://github.com/lvgl/lv_binding_js/blob/master/doc/style/transform.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:106
msgid "JSAPI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:108
msgid "`network <https://github.com/lvgl/lv_binding_js/blob/master/doc/jsapi/network.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:109
msgid "`filesystem <https://github.com/lvgl/lv_binding_js/blob/master/doc/jsapi/fs.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:110
msgid "`dimension <https://github.com/lvgl/lv_binding_js/blob/master/doc/jsapi/dimension.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:114
msgid "Thanks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:116
msgid "**lvgljs** depends on following excellent work:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:118
msgid "`lvgl <https://github.com/lvgl/lvgl>`__: Create beautiful UIs for any MCU, MPU and display type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:119
msgid "`QuickJS <https://bellard.org/quickjs/>`__: JavaScript engine"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:120
msgid "`libuv <https://github.com/libuv/libuv>`__: platform abstraction layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:121
msgid "`curl <https://github.com/curl/curl>`__: HTTP client"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/javascript.rst:122
msgid "`txiki.js <https://github.com/saghul/txiki.js>`__: Tiny JavaScript runtime"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:5
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:136
msgid "MicroPython"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:9
msgid "What is MicroPython?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:11
msgid "`MicroPython <http://micropython.org/>`__ is Python for microcontrollers.  Using MicroPython, you can write Python3 code and run it even on a bare metal architecture with limited resources.  One of its powerful features is the ability to change the behavior of a device by changing the Python code on removable (or internal) storage, without having to change the device's firmware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:19
msgid "Highlights of MicroPython"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:0
msgid "Compact"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:21
msgid "Fits and runs within just 256k of code space and 16k of RAM. No OS is needed, although you can also run it with an OS, if you want."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:0
msgid "Compatible"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:23
msgid "Strives to be as compatible as possible with normal Python (known as CPython)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:0
msgid "Versatile"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:24
msgid "Supports many architectures (x86, x86-64, ARM, ARM Thumb, Xtensa)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:0
msgid "Interactive"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:25
msgid "No need for the compile-flash-boot cycle. With the REPL (interactive prompt) you can type commands and execute them immediately, run scripts, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:0
msgid "Popular"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:27
msgid "Many platforms are supported. The user base is growing larger. Notable forks:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:29
msgid "`MicroPython <https://github.com/micropython/micropython>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:30
msgid "`CircuitPython <https://github.com/adafruit/circuitpython>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:31
msgid "`MicroPython_ESP32_psRAM_LoBo <https://github.com/loboris/MicroPython_ESP32_psRAM_LoBo>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:0
msgid "Embedded Oriented"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:33
msgid "Comes with modules specifically for embedded systems, such as the `machine module <https://docs.micropython.org/en/latest/library/machine.html#classes>`__ for accessing low-level hardware (I/O pins, ADC, UART, SPI, I2C, RTC, Timers etc.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:42
msgid "Why MicroPython + LVGL?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:44
msgid "MicroPython `does not have a good native high-level GUI library <https://forum.micropython.org/viewtopic.php?f=18&t=5543>`__. LVGL is an `Object-Oriented Component Based <https://blog.lvgl.io/2018-12-13/extend-lvgl-objects>`__ high-level GUI library, which is a natural candidate to map into a higher level language, such as Python. LVGL is implemented in C and its APIs are in C."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:51
msgid "Here are some advantages of using LVGL in MicroPython:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:53
msgid "Develop GUI in Python, a very popular high level language. Use paradigms such as Object-Oriented Programming."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:54
msgid "Usually, GUI development requires multiple iterations to get things right. With C, each iteration consists of **``Change code`` > ``Build`` > ``Flash`` > ``Run``**. In MicroPython it's just **``Change code`` > ``Run``** ! You can even run commands interactively using the `REPL <https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop>`__ (the interactive prompt)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:61
msgid "MicroPython + LVGL could be used for:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:63
msgid "Fast GUI prototyping"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:64
msgid "Shortening the cycle of changing and fine-tuning a GUI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:65
msgid "Modelling a GUI in a more abstract way by defining reusable composite Widgets, taking advantage of Python's language features such as Inheritance, Closures, List Comprehension, Generators, Exception Handling, Arbitrary Precision Integers and others."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:68
msgid "Make LVGL accessible to a larger audience. No need to know C to create a nice GUI on an embedded system. This goes well with `CircuitPython vision <https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython>`__. CircuitPython was designed with education in mind, to make it easier for new or inexperienced programmers to get started with embedded development."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:73
msgid "Creating tools to work with LVGL at a higher level (e.g. drag-and-drop designer)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:80
msgid "What does it look like?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:82
msgid "It's very much like the C API, but Object-Oriented for LVGL components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:84
#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:80
msgid "Let's dive right into an example!"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:88
#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:83
msgid "A simple example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:106
#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:199
msgid "How Can I Use It?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:110
msgid "Online Simulator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:112
msgid "If you want to experiment with LVGL + MicroPython without downloading anything, you can use our online simulator! It's a fully functional LVGL + MicroPython that runs entirely in the browser and allows you to edit a python script and run it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:116
msgid "`Click here to experiment on the online simulator <https://sim.lvgl.io/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:118
msgid "Many :ref:`LVGL examples <examples>` are available also for MicroPython. Just click the link!"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:122
msgid "PC Simulator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:124
msgid "MicroPython is ported to many platforms. One notable port is to \"Unix\", which allows you to build and run MicroPython (+LVGL) on a Linux machine.  (On a Windows machine you might need Virtual Box or WSL or MinGW or Cygwin etc.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:128
msgid "`Click here to learn more about building and running the Unix port. <https://github.com/lvgl/lv_micropython>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:132
msgid "Embedded Platforms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:134
msgid "In the end, the goal is to run it all on an embedded platform. Both MicroPython and LVGL can be used on many embedded architectures. `lv_micropython <https://github.com/lvgl/lv_micropython>`__ is a fork of MicroPython+LVGL and currently supports Linux, ESP32, STM32 and RP2. It can be ported to any other platform supported by MicroPython."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:139
msgid "You would also need display and input drivers. You can either use one of the existing drivers provided with lv_micropython, or you can create your own input/display drivers for your specific hardware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:142
msgid "Drivers can be implemented either in C as a MicroPython module, or in pure Python."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:145
msgid "**lv_micropython** already contains these drivers:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:147
msgid "Display drivers:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:149
msgid "SDL on Linux"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:150
msgid "X11 on Linux"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:151
msgid "ESP32 specific:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:153
#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:161
msgid "ILI9341"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:154
msgid "ILI9488"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:155
msgid "GC9A01"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:156
#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:162
msgid "ST7789"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:157
#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:163
msgid "ST7735"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:159
msgid "Generic (pure Python):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:165
msgid "Input drivers:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:167
msgid "SDL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:168
msgid "X11"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:169
msgid "XPT2046"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:170
#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/ft6x36.rst:3
msgid "FT6X36"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:171
msgid "ESP32 ADC with resistive touch"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:175
#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:101
#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:299
#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:188
msgid "Where can I find more information?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:177
msgid "``lv_micropython`` `README <https://github.com/lvgl/lv_micropython>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:178
msgid "``lv_binding_micropython`` `README <https://github.com/lvgl/lv_binding_micropython>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:179
msgid "The `LVGL micropython forum <https://forum.lvgl.io/c/micropython>`__ (Feel free to ask anything!)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:180
msgid "At MicroPython: `docs <http://docs.micropython.org/en/latest/>`__ and `forum <https://forum.micropython.org/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:181
msgid "`Blog Post <https://blog.lvgl.io/2019-02-20/micropython-bindings>`__, a little outdated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:185
msgid "The MicroPython Binding is auto generated!"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:187
msgid "LVGL is a git submodule inside `lv_micropython <https://github.com/lvgl/lv_micropython>`__ (LVGL is a git submodule of `lv_binding_micropython <https://github.com/lvgl/lv_binding_micropython>`__ which is itself a submodule of `lv_micropython <https://github.com/lvgl/lv_micropython>`__)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:190
msgid "When building lv_micropython, the public LVGL C API is scanned and MicroPython API is auto-generated. That means that lv_micropython provides LVGL API for **any** LVGL version, and generally does not require code changes as LVGL evolves."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:195
msgid "LVGL C API Coding Conventions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:197
msgid "For a summary of coding conventions to follow see the :ref:`coding-style`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:203
msgid "Memory Management"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:205
msgid "When LVGL runs in MicroPython, all dynamic memory allocations (:cpp:func:`lv_malloc`) are handled by MicroPython's memory manager which is `garbage-collected <https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)>`__ (GC)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:207
msgid "To prevent GC from collecting memory prematurely, all dynamic allocated RAM must be reachable by the GC."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:208
msgid "GC is aware of most allocations, except from pointers to the `Data Segment <https://en.wikipedia.org/wiki/Data_segment>`__:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:210
msgid "Pointers which are global variables"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:211
msgid "Pointers which are static global variables"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:212
msgid "Pointers which are static local variables"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:215
msgid "Such pointers need to be defined in a special way to make them reachable by the GC."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:219
msgid "Identify The Problem"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:221
msgid "A problem occurs when an allocated memory's pointer (return value of :cpp:func:`lv_malloc`) is stored only in either **global**, **static global** or **static local** pointer variable and not as part of a previously allocated ``struct`` or other variable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:227
msgid "Solving the Problem"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:229
msgid "Replace the global/static local var with :cpp:expr:`(LV_GLOBAL_DEFAULT()->_var)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:230
msgid "Include ``lv_global.h`` on files that use ``LV_GLOBAL_DEFAULT``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:231
msgid "Add ``_var`` to ``lv_global_t`` on ``lv_global.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:239
msgid "Further Reading on Memory Management"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:241
msgid "`In the README <https://github.com/lvgl/lv_binding_micropython#memory-management>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:242
msgid "`In the Blog <https://blog.lvgl.io/2019-02-20/micropython-bindings#i-need-to-allocate-a-littlevgl-struct-such-as-style-color-etc-how-can-i-do-that-how-do-i-allocatedeallocate-memory-for-it>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:248
msgid "Callbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:250
msgid "In C a callback is just a function pointer. But in MicroPython we need to register a *MicroPython callable object* for each callback. Therefore in the MicroPython binding we need to register both a function pointer and a MicroPython object for every callback."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:253
msgid "Therefore we defined a **callback convention** for the LVGL C API that expects LVGL headers to be defined in a certain way. Callbacks that are declared according to this convention allow the binding to register a MicroPython object next to the function pointer when registering a callback, and access that object when the callback is called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:257
msgid "The basic idea is that we have ``void * user_data`` field that is used automatically by the MicroPython Binding to save the *MicroPython callable object* for a callback. This field must be provided when registering the function pointer, and provided to the callback function itself."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:260
msgid "Although called \"user_data\", the user is not expected to read/write that field. Instead, the MicroPython glue code uses ``user_data`` to automatically keep track of the MicroPython callable object. The glue code updates it when the callback is registered, and uses it when the callback is called in order to invoke a call to the original callable object."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:265
msgid "There are a few options for defining a callback in LVGL C API:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:267
msgid "Option 1: ``user_data`` in a struct"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:269
msgid "There's a struct that contains a field called ``void * user_data``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:271
msgid "A pointer to that struct is provided as the **first** argument of a callback registration function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:272
msgid "A pointer to that struct is provided as the **first** argument of the callback itself."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:274
msgid "Option 2: ``user_data`` as a function argument"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:276
msgid "A parameter called ``void * user_data`` is provided to the registration function as the **last** argument"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:278
msgid "The callback itself receives ``void *`` as the **last** argument"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:280
msgid "Option 3: both callback and ``user_data`` are struct fields"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:282
msgid "The API exposes a struct with both function pointer member and ``user_data`` member"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:284
msgid "The function pointer member receives the same struct as its **first** argument"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:287
msgid "In practice it's also possible to mix these options, for example provide a struct pointer when registering a callback (option 1) and provide ``user_data`` argument when calling the callback (options 2), **as long as the same** ``user_data`` **that was registered is passed to the callback when it's called**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:295
msgid ":cpp:type:`lv_anim_t` contains ``user_data`` field. :cpp:func:`lv_anim_set_path_cb` registers `path_cb` callback. Both ``lv_anim_set_path_cb`` and :cpp:type:`lv_anim_path_cb_t` receive :cpp:type:`lv_anim_t` as their first argument"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:297
msgid "``path_cb`` field can also be assigned directly in the Python code because it's a member of :cpp:type:`lv_anim_t` which contains ``user_data`` field, and :cpp:type:`lv_anim_path_cb_t` receive :cpp:type:`lv_anim_t` as its first argument."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:299
msgid ":cpp:func:`lv_imgfont_create` registers ``path_cb`` and receives ``user_data`` as the last argument. The callback :cpp:type:`lv_imgfont_get_path_cb_t` also receives the ``user_data`` as the last argument."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:306
msgid "Further Reading on Callbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:308
msgid "In the `Blog <https://blog.lvgl.io/2019-08-05/micropython-pure-display-driver#using-callbacks>`__ and in the `README <https://github.com/lvgl/lv_binding_micropython#callbacks>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:310
msgid "`[v6.0] Callback conventions  #1036 <https://github.com/lvgl/lvgl/issues/1036>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/micropython.rst:311
msgid "Various discussions: `here <https://github.com/lvgl/lvgl/pull/3294#issuecomment-1184895335>`__ and `here <https://github.com/lvgl/lvgl/issues/1763#issuecomment-762247629>`__ and `here <https://github.com/lvgl/lvgl/issues/316#issuecomment-467221587>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:3
msgid "PikaScript"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:7
msgid "What is PikaScript?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:9
msgid "`PikaScript <https://github.com/pikasTech/pikascript>`__ is a Python interpreter designed specifically for microcontrollers, and it supports a subset of the common Python3 syntax."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:12
msgid "It's lighter than MicroPython, requiring only 32k of code space and 4k of RAM, which means it can run on stm32f103c8 (blue-pill) or even stm32g030c8.  On the other hand, you can leave valuable space for more material or larger buffer areas."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:16
msgid "It is simpler, out of the box, runs with no porting and configuration at all, does not depend on OS or file system, has good support for popular IDEs for Windows platforms like Keil, IAR, RT-Thread-Studio, and of course, supports Linux gcc development platforms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:20
msgid "It's smarter, with a unique C module mechanism that allows you to generate bindings automatically by simply writing the API for the C module in Python, and you don't need to deal with the headache of writing any macros or global tables manually. On the other hand, all C modules have sophisticated smart hints, even hinting at the types of your arguments ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:30
msgid "Why PikaScript + LVGL?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:32
msgid "PikaScript now supports the main features of LVGL8, and these APIs are fully compatible with MicroPython. This means that you can continue to use already written code from MicroPython, but use less code space and RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:34
msgid "Enjoy detailed code hints down to the parameter type for a better programming experience."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:35
msgid "Use a more convenient IDE, such as Visual-Studio-based simulation projects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:39
msgid "What Does It Look Like?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:41
msgid "Here are some examples of using LVGL that PikaScript can already run. They are mainly from the LVGL documentation examples."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:46
msgid "LV_ARC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:63
msgid "LV_BAR"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:79
msgid "LV_BTN"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:109
msgid "LV_CHECKBOX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:139
msgid "How Does It Work?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:141
msgid "PikaScript has a unique C module smart binding tool."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:143
msgid "Just write the Python interface in pika_lvgl.pyi (.pyi is a Python interface file)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:154
msgid "Then PikaScript's pre-compiler can automatically bind the following C functions, simply by naming the functions in the module_class_method format, without any additional work, and all binding and registration is done automatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:174
msgid "To use the module, just ``import pika_lvgl`` and the precompiler will automatically scan main.py and bind the ``pika_lvgl`` module."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:189
msgid "The precompiler is written in Rust, runs on Windows and Linux, and is completely open source."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:191
msgid "In addition to binding C modules, the precompiler compiles Python scripts to bytecode in the PC, reducing the size of the script and increasing its speed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/bindings/pikascript.rst:201
msgid "The simulation repository for Visual Studio is available at https://github.com/pikasTech/lv_pikascript ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/index.rst:3
msgid "Boards"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:3
msgid "Riverdi"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:5
msgid "`Riverdi <https://riverdi.com/>`__ specializes in making high quality displays and the boards that carry them. They offer solutions that range from simple display panels to intelligent displays, and everything in between."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:10
#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:19
msgid "STM32 Embedded Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:11
msgid "Single Board Computer Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:12
msgid "EVE Intelligent Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:13
msgid "HDMI Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:14
msgid "Evaluation Boards"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:15
msgid "RGB, LVDS, MIPI DSI LCD Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:21
msgid "The STM32 Embedded Displays have an STM32 MCU onboard which makes it possible to embed an entire application into the device. LVGL is well-suited to these boards."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:26
msgid "lv_port_riverdi_stm32u5"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:28
msgid "`lv_port_riverdi_stm32u5 <https://github.com/lvgl/lv_port_riverdi_stm32u5>`_ is a port repo of LVGL which supports all 5-inch Riverdi STM32 Embedded Displays."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:32
msgid "`RVT50HQSNWC00-B <https://riverdi.com/product/5-inch-lcd-display-capacitive-touch-panel-optical-bonding-uxtouch-stm32u5-rvt50hqsnwc00-b>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:33
msgid "`RVT50HQSNWC00 <https://riverdi.com/product/5-inch-lcd-display-capacitive-touch-panel-air-bonding-uxtouch-stm32u5-rvt50hqsnwc00>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:34
msgid "`RVT50HQSFWCA0 <https://riverdi.com/product/5-inch-lcd-display-capacitive-touch-panel-air-bonding-atouch-frame-stm32u5-rvt50hqsfwca0>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:35
msgid "`RVT50HQSNWCA0 <https://riverdi.com/product/5-inch-lcd-display-capacitive-touch-panel-air-bonding-atouch-stm32u5-rvt50hqsnwca0>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:36
msgid "`RVT50HQSFWN00 <https://riverdi.com/product/5-inch-lcd-display-stm32u5-frame-rvt50hqsfwn00>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:37
msgid "`RVT50HQSNWN00 <https://riverdi.com/product/5-inch-lcd-display-stm32u5-rvt50hqsnwn00>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:39
msgid "It natively supports the embedded NeoChrom GPU thanks to LVGL's support for :ref:`Nema GFX <nema_gfx>`. NemaVG --- an extension to Nema's base support --- is implemented by this MCU."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:43
msgid "The MCU has an LCD driver peripheral which LVGL uses to update the display. See the :ref:`LTDC <stm32 ltdc driver>` driver docs for more info and how to customize its use."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:49
msgid "Single-Board Computer Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:51
msgid "The Single-Board Computer Displays are ready to use with :ref:`Toradex <toradex>` Dahlia and Mallow carrier boards. In fact, those carrier boards are compatible with all 34-pin Riverdi MIPI-DSI displays."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:58
msgid "Other Products"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:60
msgid "The **EVE Intelligent Displays** feature a Bridgetek EVE graphics controller IC so that the display can be controlled using high-level drawing commands over a lower-bandwidth interface than RGB, MIPI, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:65
msgid "The **HDMI Displays** sport an HDMI interface for streamlined integration with PCs or SBCs. These displays are still low-profile so they can be embedded into custom fixtures with ease."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/riverdi.rst:69
msgid "The **Evaluation Boards** are affordable carrier boards for getting Riverdi display panels up and running before designing or buying a carrier board for a production application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:7
msgid "Toradex"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:10
msgid "About Toradex"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:12
msgid "Toradex specializes in manufacturing high-quality embedded computing solutions based on System on Module units (SoMs). These boards and modules are designed to meet the needs of industrial and commercial applications, offering reliability, longevity, and scalability. Leveraging industry-standard frameworks like Yocto Project, Toradex enables customers to create tailored embedded systems with ease, ensuring compatibility and flexibility."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:20
msgid "Products Portfolio"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:22
msgid "Toradex offers a wide range of system-on-modules (SoMs) and carrier boards designed for various applications and industries. Here's a basic overview to help you navigate the portfolio."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:28
msgid "Aquila"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:30
msgid "Aquila is a new System on Module standard expanding the Toradex portfolio to new heights, offering unparalleled performance for computationally intensive CPU, machine learning, and vision workloads."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:34
msgid "To power next-gen's AI requirements in industrial and other harsh environments, Aquila introduces a proven connector: the 400-pin board-to-board connector, making the board extra reliable, especially in these environments."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:38
msgid "Aquila Computer on Module:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:40
msgid "`Aquila iMX95 <https://www.toradex.com/computer-on-modules/ aquila-arm-family/nxp-imx95>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:42
msgid "`Aquila AM69 <https://www.toradex.com/computer-on-modules/ aquila-arm-family/ti-am69>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:45
msgid "Aquila Carrier Boards:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:47
msgid "`Clover <https://www.toradex.com/products/carrier-board/clover>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:48
msgid "`Aquila Development Board <https://www.toradex.com/products/carrier-board/ aquila-development-board-kit>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:52
msgid "Apalis"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:54
msgid "Apalis is a scalable System on Module (SoM) / Computer on Module (CoM) family that aims to provide high performance in a compact form factor. Apalis enables the development of advanced and robust products within a short time and with low risks. Apalis modules scale to the highest performance in the Toradex product range, and they provide the most interfaces of any product line on the 314-pin MXM connectors. Apalis modules are suited to a larger number of applications in such fields as healthcare, industrial automation, robotics, smart cities and many more. Apalis modules are supported by Toradex software offerings and the company's rich ecosystem of other products and services."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:64
msgid "Apalis Computer on Module:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:66
msgid "`Apalis iMX8 <https://www.toradex.com/computer-on-modules/ apalis-arm-family/nxp-imx-8>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:68
msgid "`Apalis iMX6 <https://www.toradex.com/computer-on-modules/ apalis-arm-family/nxp-freescale-imx-6>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:70
msgid "`Apalis T30 <https://www.toradex.com/computer-on-modules/ apalis-arm-family/nvidia-tegra-3>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:73
msgid "Apalis Carrier Boards:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:75
msgid "`Ixora <https://www.toradex.com/products/carrier-board/ ixora-carrier-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:77
msgid "`Apalis Evaluation Board <https://www.toradex.com/products/carrier-board/ ixora-carrier-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:81
msgid "Colibri"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:83
msgid "The Colibri Arm\\ |reg| family consists of SODIMM-sized System on Modules (SoM) / Computer on Modules (CoM). The family offers miniaturized modules based on NXP\\ |reg| i.MX 8X, i.MX 6ULL, i.MX 7, i.MX 6, Vybrid and NVIDIA\\ |reg| Tegra SoCs. All these modules are pin-compatible, ensuring scalability of applications developed on them. The Colibri family delivers cost-performance-optimized designs. An extensive range of Colibri-compatible carrier boards and accessories, such as cameras and displays, is also available for easy product development on the Colibri Arm family of modules."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:93
msgid "Colibri Computer on Module:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:95
msgid "`Colibri iMX8X <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nxp-imx-8x>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:97
msgid "`Colibri T30 <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nvidia-tegra-3>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:99
msgid "`Colibri T20 <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nvidia-tegra-2>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:101
msgid "`Colibri iMX6 <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nxp-freescale-imx6>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:103
msgid "`Colibri iMX7 <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nxp-freescale-imx7>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:105
msgid "`Colibri iMXiMX6ULL8X <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nxp-imx6ull>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:107
msgid "`Colibri VF61 <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nxp-freescale-vybrid-vf6xx>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:109
msgid "`Colibri VF50 <https://www.toradex.com/computer-on-modules/ colibri-arm-family/nxp-freescale-vybrid-vf5xx>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:112
msgid "Colibri Carrier Boards:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:114
msgid "`Colibri Evaluation Board <https://www.toradex.com/products/carrier-board/ colibri-evaluation-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:116
msgid "`Iris Carrier Board <https://www.toradex.com/products/carrier-board/ iris-carrier-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:118
msgid "`Viola Carrier Board <https://www.toradex.com/products/carrier-board/ viola-carrier-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:120
msgid "`Aster Carrier Board <https://www.toradex.com/products/carrier-board/ aster-carrier-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:125
msgid "Verdin"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:127
msgid "Verdin is a System on Module standard expanding on the successful Colibri and Apalis form factors. It provides a revised, modern and capable interface set and focuses on ease-of-use, robustness and being future-proof."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:131
msgid "Verdin is similar sized to the Colibri but with a higher pin count. A DDR4 SODIMM edge connector provides a cost-effective, highly reliable, shock- and vibration-resistant connection."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:135
msgid "Verdin Computer on Module:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:137
msgid "`Verdin iMX8M Plus <https://www.toradex.com/computer-on-modules/ verdin-arm-family/nxp-imx-8m-plus>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:139
msgid "`Verdin iMX8M Mini <https://www.toradex.com/computer-on-modules/ verdin-arm-family/nxp-imx-8m-mini-nano>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:141
msgid "`Verdin AM62 <https://www.toradex.com/computer-on-modules/ verdin-arm-family/ti-am62>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:143
msgid "`i.MX 95 Verdin Evaluation Kit <https://www.toradex.com/ computer-on-modules/verdin-arm-family/nxp-imx95-evaluation-kit>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:145
msgid "`Verdin iMX95 <https://www.toradex.com/computer-on-modules/ verdin-arm-family/nxp-imx95-evaluation-kit#verdin-imx95>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:148
msgid "Verdin Carrier Boards:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:150
msgid "`Verdin Development Board with HDMI Adapter <https://www.toradex.com/ products/carrier-board/verdin-development-board-kit>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:152
msgid "`Dahlia Carrier Board with HDMI Adapter <https://www.toradex.com/products/ carrier-board/dahlia-carrier-board-kit>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:154
msgid "`Yavia <https://www.toradex.com/products/carrier-board/yavia>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:155
msgid "`Mallow Carrier Board <https://www.toradex.com/products/carrier-board/ mallow-carrier-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:157
msgid "`Ivy Carrier Board <https://www.toradex.com/products/carrier-board/ ivy-carrier-board>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:161
msgid "TorizonOS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:163
msgid "TorizonOS is a Linux-based operating system developed by Toradex, tailored for embedded systems. It is designed to simplify the development, deployment, and maintenance of applications, especially in industrial and IoT settings. Combining ease of use with powerful features like containerization and over-the-air (OTA) updates, TorizonOS helps developers accelerate time-to-market while ensuring robust performance and security for embedded applications."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:171
msgid "A TorizonOS guide to develop an application using LVGL can be found in the :ref:`torizon-os-section` section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:174
msgid "More information is provided in the `Torizon documentation <https://www.torizon. io/torizon-os>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:178
msgid "Toradex Examples"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/toradex.rst:180
msgid "There are existing ready to use repositories available. Click `here <https:// github.com/lvgl?q=lv_port_toradex&type=all&language=&sort=>`_ to check them out."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:3
msgid "Viewe"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:5
msgid "`Viewe <https://viewedisplay.com/>`__ specializes in comprehensive display solutions for more than 10 Years with remarkable capability of software and hardware R&D, factory manufacturing and sales service. Viewe not only offers one-stop `bare display and touch solutions <https://viewedisplay.com/display-solutions/>`_ but also `embedded smart displays <https://viewedisplay.com/smart-solutions/>`_ with standard productions and tailored customization to develop your concepts to reality."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:14
msgid "Products Portfolio:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:16
msgid "Embedded Smart Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:18
msgid "`IOT_AIOT Smart Display <https://viewedisplay.com/iot_aiot-smart-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:19
msgid "`Uart Smart Display <https://viewedisplay.com/uart-smart-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:20
msgid "`HDMI Display_Raspberry Pi Display <https://viewedisplay.com/hdmi-display-raspberry-pi-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:21
msgid "Arduino Display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:23
msgid "TFT | OLED Display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:25
msgid "`Sunlight Readable Display <https://viewedisplay.com/sunlight-readable-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:26
msgid "`AMOLED Displays <https://viewedisplay.com/amoled-display-list/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:27
msgid "`Transflective TFT Displays <https://viewedisplay.com/transflective-tft-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:28
msgid "`Standard TFT Displays <https://viewedisplay.com/standard-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:29
msgid "`Bar Display/Stretched TFT Display <https://viewedisplay.com/bar-display-stretched-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:30
msgid "`Square TFT Display <https://viewedisplay.com/square-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:31
msgid "`Round TFT Display <https://viewedisplay.com/round-display/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:35
msgid "IOT AIOT Smart Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:37
msgid "The Viewe IOT AIOT Smart Displays are a series of displays that use ESP32 microcontrollers with integrated multi-modal interactions of GUI/voice/camera, ML/AI edge computing, and seamless connectivity. UART/RS232/RS485/CAN Interfaces and redundant IO interfaces are included to facilitate extended usage. LVGL/Arduino/ESP-IDF is well-suited to these boards."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:44
#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:69
msgid "lv_port_viewe_7_espidf"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:46
#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:71
msgid "`lv_port_viewe_7_espidf <https://github.com/lvgl/lv_port_viewe_7_espidf>`_ is a port repository of LVGL which supports Viewe ESP32 S3 Smart Display 7.0 inch. It is based on ESP-IDF and uses the ESP32-S3 microcontroller."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:50
#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:75
msgid "`Viewe ESP32 S3 Smart Display <https://viewedisplay.com/product/esp32-7-inch-800x480-rgb-ips-tft-display-touch-screen-arduino-lvgl-uart/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:53
msgid "lv_port_viewe_knob_15_espidf"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:55
msgid "`lv_port_viewe_knob_15_espidf <https://github.com/lvgl/lv_port_viewe_knob_15_espidf>`_ is a port repository of LVGL which supports Viewe AMOLED Touch Knob Display. It is based on ESP-IDF and uses the ESP32-S3 microcontroller."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:59
msgid "`Viewe AMOLED Touch Knob Display <https://viewedisplay.com/product/esp32-1-5-inch-466x466-round-amoled-knob-display-touch-screen-arduino-lvgl/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:62
msgid "UART Smart Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/boards/viewe.rst:64
msgid "The Viewe UART Smart Displays are a series of displays that use ESP32 and STM32 microcontrollers with UART/RS232/RS485/CAN Interface and have IO interface for connecting to peripherals. LVGL is well-suited to these boards."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:5
msgid "CMake"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:10
msgid "CMake is a cross-platform build system generator. It is used to easily integrate a project/library into another project. It also offers the possibility to configure the build with different options, to enable or disable components, or to integrate custom scripts executions during the configuration/build phase."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:14
msgid "LVGL includes CMake natively, which means that one can use it to configure and build LVGL directly or integrate it into a higher level cmake build."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:16
msgid "This project uses CMakePresets to ensure an easy build. Find out more on Cmake Presets here: https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:23
msgid "You need to install"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:25
msgid "CMake with GNU make or Ninja (for Linux builds). Be sure to add ninja/make to your PATH!"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:26
msgid "The prerequisites listed in ``scripts/install-prerequisites.sh/bat``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:27
msgid "A python3 interpreter if you wish to use KConfig."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:31
msgid "How to build this project using cmake"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:35
msgid "Build with Command line"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:37
msgid "The simplest way to build LVGL using cmake is to use the command line calls:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:55
msgid "Build with cmake presets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:57
msgid "Another way to build this project is to use the provided CMakePresets.json or pass options using the command line. The CMakePresets.json file describes some cmake configurations and build phase. It is a way to quickly use a set of predefined cmake options."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:61
msgid "For now, these configuration presets are available:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:63
msgid "``windows-base``: A Windows configuration, using VS MSVC. Uses ``lv_conf.h`` as the configuration system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:64
msgid "``windows-kconfig``: A Windows configuration, using VS MSVC. Uses Kconfig as the configuration system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:65
msgid "``linux-base``: A Linux configuration, using Ninja and GCC. Uses ``lv_conf.h`` as the configuration system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:66
msgid "``linux-kconfig``: A Linux configuration, using Ninja and GCC. Uses Kconfig as the configuration system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:69
msgid "And these build presets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:71
msgid "``windows-base_dbg``: Windows Debug build."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:72
msgid "``windows-base_rel``: Windows Release build."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:73
msgid "``linux-base_dbg``: Linux Debug build."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:74
msgid "``linux-base_rel``: Linux Release build."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:77
msgid "Here is how to build using the presets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:87
msgid "Build with IDE"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:89
msgid "The recommended way for consuming CMakePresets is a CMakePresets aware IDE such as"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:91
msgid "VS 2022"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:92
msgid "VS Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:93
msgid "CLion"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:96
msgid "Simply load this project into your IDE and select your desired preset and you are good to go."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:100
msgid "Build with CMake GUI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:102
msgid "Open this project with CMake GUI and select your desired preset. When hitting the generate button, CMake will create solution files (for VS) or Ninja Files (for Linux Ninja Build)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:105
msgid "The following targets are available."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:107
msgid "lvgl (the actual library, required)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:108
msgid "lvgl_thorvg (a vector graphics extension, optional)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:109
msgid "lvgl_examples (example usages, optional)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:110
msgid "lvgl_demos (some demos, optional)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:113
msgid "All optional targets can be disabled by setting the proper cache variables. If you use cmake to install lvgl, 3 folders will be created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:116
msgid "include/lvgl (contains all public headers)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:117
msgid "bin (contains all binaries (\\*.dll))"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:118
msgid "lib (contains all precompiled source files (\\*.lib))"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:124
msgid "Integrate LVGL to your project using cmake"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:126
msgid "The LVGL cmake system is made to be integrated into higher level projects. To do so, simply add this to your project's ``CMakeLists.txt``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:129
msgid "This snippet adds LVGL and needs an ``lv_conf.h`` file present next to the lvgl folder:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:135
msgid "This snippet sets up LVGL and tells it which ``lv_conf.h`` file to use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:142
msgid "This snippet sets up LVGL and points to the folder where ``lv_conf.h`` is located:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:150
msgid "This snippet adds LVGL and specifies to use Kconfig as the configuration system:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:157
msgid "This snippet adds LVGL and specifies to use Kconfig as the configuration system and to use a specific defconfig:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:166
msgid "To enable the demos and examples set these options:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:174
msgid "Below is a list of the available options/variables"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:180
msgid "Variable/Option"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:181
msgid "Type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:182
msgid "Description"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:183
msgid "LV_BUILD_CONF_PATH"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:184
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:187
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:193
msgid "PATH"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:185
msgid "Allows to set a custom path for ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:186
msgid "LV_BUILD_CONF_DIR"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:188
msgid "Allows to set a directory containing ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:189
msgid "LV_BUILD_USE_KCONFIG"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:190
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:196
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:202
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:206
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:213
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:216
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:219
#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:222
msgid "BOOLEAN"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:191
msgid "When set KConfig is used as the configuration source. This option is disabled by default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:192
msgid "LV_BUILD_DEFCONFIG_PATH"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:194
msgid "Specify to use a .defconfig file instead of the current .config in a Kconfig setup."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:195
msgid "LV_BUILD_LVGL_H_SYSTEM_INCLUDE"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:197
msgid "Enable if LVGL will be installed to the system or your build system uses a sysroot. Turning this option on implies that the resources generated by the image generation script will include ``lvgl.h`` as a system include. i.e: ``#include <lvgl.h>``. This option is disabled by default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:201
msgid "LV_BUILD_LVGL_H_SIMPLE_INCLUDE"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:203
msgid "When enabled the resources will include ``lvgl.h`` as a simple include, this option is enabled by default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:205
msgid "LV_BUILD_SET_CONFIG_OPTS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:207
msgid "When enabled, this option runs a script that processes the ``lv_conf.h``/Kconfig configuration using ``pcpp`` to generate corresponding ``CONFIG_LV_*`` and ``CONFIG_LV_BUILD_*`` CMake variables based on the contents of ``lv_conf_internal.h``. This requires python3 with ``venv`` and ``pip`` or access to a working ``pcpp``. If KConfig is used, this is enabled automatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:212
msgid "CONFIG_LV_BUILD_DEMOS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:214
msgid "When enabled builds the demos"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:215
msgid "CONFIG_LV_BUILD_EXAMPLES"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:217
msgid "When enabled builds the examples"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:218
msgid "CONFIG_LV_USE_THORVG_INTERNAL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:220
msgid "When enabled the in-tree LVGL version of ThorVG is compiled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:221
msgid "CONFIG_LV_USE_PRIVATE_API"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:223
msgid "When enabled the private headers ``*_private.h`` are installed on the system"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/cmake.rst:227
msgid "When ``LV_BUILD_SET_CONFIG_OPTS`` or ``LV_BUILD_USE_KCONFIG`` are enabled, the options/variables beginning with the prefix ``CONFIG_*`` are automatically set to the values found in ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/index.rst:3
msgid "Build Systems"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/make.rst:5
msgid "make"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/building/make.rst:7
msgid "LVGL can be easily integrated into any Makefile project by adding ``include lvgl/lvgl.mk`` to the main ``Makefile``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:5
msgid "Alif"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:7
msgid "Alif Semiconductor is a next-generation chip vendor making chips that come in a variety of configurations. Their chips are designed to excel at multiple aspects at once. They offer combinations of performance, low power consumption, security, and special functionality like AI. Many of their chips have two asymmetrical cores. One core is typically high performance while the other is high efficiency. Alif offers both microcontrollers and microprocessors."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:16
msgid "LVGL on Alif Boards"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:18
msgid "This is a guide for getting started with LVGL on an Alif board. It specifically details the all the steps needed to get the LVGL example project `alif_m55-lvgl <https://github.com/alifsemi/alif_m55-lvgl>`__ running on the `Alif E7 Devkit Gen2 <https://alifsemi.com/ensemble-e7-series/>`__; however, any project based on the `Alif VS Code Template <https://github.com/alifsemi/alif_vscode-template>`__ has a nearly identical setup process so this can be used as a general guide for those. There are other ways to compile for Alif boards such as with Zephyr RTOS. See `Alif's GitHub repos <https://github.com/orgs/alifsemi/repositories>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:27
msgid "This guide is for Linux and Windows."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:29
msgid "This project uses D/AVE 2D rendering acceleration with LVGL's D/AVE 2D :ref:`draw unit<draw>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:33
msgid "Step-by-Step Guide"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:36
msgid "Install Visual Studio Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:38
msgid "Install Visual Studio code. There are different ways of installing it depending on your platform. `See here <https://code.visualstudio.com/docs/setup/setup-overview>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:43
msgid "The remaining steps can **optionally** be done inside a Docker container. You can connect to the Docker container as a VS Code remote dev container."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:46
msgid "There should be two serial ports created upon connecting your Alif board. On Linux, they will be something like ``/dev/ttyACM0`` and ``/dev/ttyACM1``. In the ``docker run`` command you use to create the dev container, include ``--device /dev/ttyACM0 --device /dev/ttyACM1`` to give the container access to those ports so you can flash from it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:51
msgid "Install the \"Dev Containers\" VS Code extension. Select your container from the \"Remote Explorer\" on the left side panel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:56
msgid "Install Prerequisite tools"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:58
msgid "Make sure these are installed in your environment. The VS Code extensions rely on these being present."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:60
msgid "``git``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:61
msgid "``curl``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:62
msgid "``unzip``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:65
msgid "Install the Alif SE Tools"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:67
msgid "Create an Alif account and download the tools from `here <https://alifsemi.com/support/software-tools/ensemble/>`__ under \"Alif Security Toolkit\". Extract it. The path where it was extracted will be needed later."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:71
msgid "On Linux, extracting can be done by running the following"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:80
msgid "Among the results of ``ls`` you should see ``app-release-exec-linux``. That, combined with the output of ``pwd``, is the path you need to use later. I.e., ``/home/you/app-release-exec-linux``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:85
msgid "Install J-Link Software (optional)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:87
msgid "Download the latest stable version of the `J-Link Software <https://www.segger.com/downloads/jlink>`__. Its installation path will be needed later."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:91
msgid "Clone the ``alif_m55-lvgl`` Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:98
msgid "Open ``alif_m55-lvgl`` in VS Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:100
msgid "Open the cloned repo in VS Code. For the VS Code extensions to work properly, it's recommended to open the folder in VS Code instead of opening a containing parent directory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:108
msgid "or navigate to **File \\> Open Folder** in VS Code and open ``alif_m55-lvgl``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:110
msgid "If you are prompted to automatically install recommended extensions, click \"install\" so you can skip the next step."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:114
msgid "Install Required VS Code Extensions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:116
msgid "Install the following VS Code extensions from the \"Extensions\" side panel"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:118
msgid "Arm Tools Environment Manager"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:119
msgid "Arm CMSIS Solution"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:120
msgid "C/C++ Extension Pack"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:121
msgid "Cortex-Debug (optional. needed for debugging)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:124
msgid "Activate Environment"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:126
msgid "If it hasn't happened automatically, Click \"Arm Tools\" on the bottom bar and then click \"Activate Environment\" in the list that appears. It will install CMake, ninja-build, a GCC ARM compiler, and cmsis-toolbox."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:130
msgid "If you only see \"Reactivate Environment\" then it is likely already active."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:133
msgid "Set the Paths of Installed Tools"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:135
msgid "Press ctrl + shift + p. Type \"preferences\" and select the option \"Preferences: Open User Settings (JSON)\" from the choices. A ``settings.json`` will open. Note: if using a Docker container, it's better to edit the JSON file in the project directory at ``.vscode/settings.json``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:141
msgid "You need to add some entries (at least ``\"alif.setools.root\"``) to the JSON you see."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:144
msgid "If your ``settings.json`` looks like this initially..."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:153
msgid "... then it should look like this afterwards:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:164
msgid "The above uses Windows paths as an example. A Linux path to the Alif SE Tools may look something like ``\"/home/you/app-release-exec-linux\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:168
msgid "Configure the Board Variant"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:170
msgid "Open the `board.h file <https://github.com/alifsemi/alif_vscode-template/blob/ce5423dbd15f62cb0aa4462533a960d79a014f97/board/board.h#L23-L30>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:173
msgid "Identify your board variant in the list and set ``BOARD_ALIF_DEVKIT_VARIANT`` to the correct value. You may also need to set ``BOARD_ILI9806E_PANEL_VARIANT`` if the default does not match yours."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:177
msgid "Set Up the Build Context, Compile, and Flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:179
msgid "Get to the \"Manage Solution\" view from the CMSIS Solution extension. You can reach it by either clicking the gear icon on the bottom bar or by navigating to the CMSIS panel on the left and clicking the gear at the top of that view. When it's open, it's a graphical editor tab called \"Manage Solution\" with a gear icon."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:184
msgid "**Important**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:186
msgid "Under \"Run and Debug\" \\> \"Run Configuration\" (column) \\> \"alif\" (row), click the dropdown and select \"First time pack installation\". Click the play icon at the top of the CMSIS left side panel. In your terminal you should see CMSIS packs being installed. Wait for it to complete."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:190
msgid "Now you can click the hammer icon next to the play icon to compile the project. A few hundred files will be compiled. Wait for it to complete."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:193
msgid "Open the dropdown from before and choose \"Prepare program with Security Toolkit\". Click the play icon. It prepares some files as a prior step to flashing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:196
msgid "Open the dropdown again and choose \"Program with Security Toolkit\". Click the play icon. If this is the first time, you will be prompted to choose which serial port to use to flash the board. You can try ``/dev/ttyACM0``. If it was the wrong one, it will fail and you will need to open the dropdown and choose \"Program with Security Toolkit (select COM port)\" to override the previous one which was saved as default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:202
msgid "The LVGL benchmark should run on your Alif board after flashing completes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:205
msgid "More Info"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:207
msgid "If there were any difficulties faced while following this guide, refer to these Alif sources for more detailed steps."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:210
msgid "`Getting Started with VSCode CMSIS pack project <https://github.com/alifsemi/alif_vscode-template/blob/main/doc/getting_started.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:211
msgid "`VSCode Getting Started Template <https://github.com/alifsemi/alif_vscode-template/blob/main/README.md>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:213
msgid "You can download the \"Alif Security Toolkit Quick Start Guide\" from https://alifsemi.com/support/software-tools/ensemble/ , assuming you have created an account, to learn how to use the Alif SE Tools to perform low-level manipulations on your board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:218
msgid "HP and HE Cores and Optimized Build"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:220
msgid "In the \"Manage Solution\" view explained in the guide, there is an option to select either an HP target or an HE target. What these are referring to are the two distinct cores present in the Alif E7. \"HE\" stands for \"High Efficiency\" while \"HP\" stands for \"High Performance\". To get the best performance out of an LVGL application, select HP. Consider HE when power usage is a concern. The merit of having asymmetrical cores is that your application can run theoretically run low-priority workloads efficiently on the HE core and delegate time critical, processing intensive workloads to the HP core."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:228
msgid "There is also an option to choose a \"Build Type\". For best performance, choose \"release\". If debugging you will want \"debug\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/alif.rst:231
msgid "To maximize the score on the LVGL benchmark and maximize the performance of an LVGL application in general, ensure the HP core is selected and the build type is release."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:5
msgid "Arm"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:7
msgid "Arm is a leading semiconductor and software design company, renowned for creating the Cortex-M microcontroller (MCU) cores and Cortex-A/R (MPU) processor cores, which are integral to a wide range of devices. These cores are at the heart of many embedded systems, powering chips from industry giants such as STMicroelectronics, NXP, and Renesas. Arm's energy-efficient designs are used in billions of devices worldwide, from microcontrollers to smartphones and servers. By licensing their processor designs, Arm enables a broad ecosystem of partners to develop customized solutions optimized for performance, power, and size. Arm's architecture is highly compatible with various operating systems and software libraries, including LVGL, making it a versatile choice for developers creating efficient, high-performance graphical user interfaces."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:10
msgid "Compile LVGL for Arm"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:12
msgid "No specific action is required. Any compiler that supports the target Arm architecture can be used to compile LVGL's source code, including GCC, LLVM, and AC6."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:14
msgid "It is also possible to cross-compile LVGL for an MPU (instead of compiling it on the target hardware) or create a shared library. For more information, check out :ref:`build_cmake`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:17
msgid "Getting Started with AC6"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:19
msgid "Since AC6 is a proprietary toolchain, it contains many specific optimizations, so you can expect the best performance when using it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:21
msgid "AC6 is not free, but it offers a community license that can be activated as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:23
msgid "Download and install the AC6 compiler from `Arm's website <https://developer.arm.com/Tools%20and%20Software/Arm%20Compiler%20for%20Embedded>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:24
msgid "To register a community license, go to the ``bin`` folder of the compiler and, in a terminal, run ``armlm.exe activate -server https://mdk-preview.keil.arm.com -product KEMDK-COM0`` (On Linux, use ``./armlm``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:27
msgid "IDE Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:29
msgid "There are no limitations on the supported IDEs. LVGL works in various vendors' IDEs, including Arm's Keil MDK, IAR, Renesas's e2 studio, NXP's MCUXpresso, ST's CubeIDE, as well as custom make or CMake projects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:32
msgid "Arm2D and the Helium instruction set"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:34
msgid "Arm Cortex-M55 and Cortex-M85 have the `SIMD Helium <https://www.arm.com/technologies/helium>`__ instruction set. Among many others, this can effectively speed up UI rendering. :ref:`Arm2D <arm2d>` is a library maintained by Arm that leverages the Helium instruction set."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:37
msgid "Note that GCC has some known issues with Helium intrinsics. It is recommended to use AC6 or LLVM when dealing with Helium code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:40
msgid "To add Arm2D to your project, follow these steps:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:42
msgid "To utilize its power, ensure that ``mcpu`` is set to ``cortex-m85``, ``cortex-m55``, or ``cortex-m52`` and add the ``-fvectorize`` flag. To test without SIMD, use e.g. ``cortex-m85+nomve``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:43
msgid "Arm2D can be downloaded from `https://github.com/ARM-software/Arm-2D <https://github.com/ARM-software/Arm-2D>`__. Consider using the ``developing`` branch, which contains the latest updates."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:44
msgid "Add ``Arm-2D/Library/Include`` to the include paths."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:45
msgid "Copy ``Arm-2D/Library/Include/template/arm_2d_cfg.h`` to any location you prefer to provide the default configuration for Arm2D. Ensure that the folder containing ``arm_2d_cfg.h`` is added to the include path."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:46
msgid "The Arm2D repository contains several examples and templates; however, ensure that only ``Arm-2D/Library/Source`` is compiled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:47
msgid "The CMSIS DSP library also needs to be added to the project. You can use CMSIS-PACKS or add it manually."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:48
msgid "For better performance, enable ``LTO`` (Link Time Optimization) and use ``-Omax`` or ``-Ofast``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:49
msgid "Arm2D tries to read/write multiple data with a single instruction. Therefore, it's important to use the fastest memory (e.g., ``BSS`` or ``TCM``) for LVGL's buffer to avoid memory bandwidth bottlenecks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:50
msgid "Enable ``LV_USE_DRAW_ARM2D_SYNC 1`` and ``LV_USE_DRAW_SW_ASM LV_DRAW_SW_ASM_HELIUM`` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:53
msgid "Neon Acceleration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/arm.rst:55
msgid "Several Cortex-A microprocessors support the `Neon SIMD <https://www.arm.com/technologies/neon>`__ instruction set. LVGL has built-in support to improve the performance of software rendering by utilizing Neon instructions. To enable Neon acceleration, set ``LV_USE_DRAW_SW_ASM`` to ``LV_DRAW_SW_ASM_NEON`` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:3
msgid "Espressif (ESP32 Chip Series)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:5
msgid "LVGL can be used and configured as standard `ESP-IDF <https://github.com/espressif/esp-idf>`__ component."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:7
msgid "If you are new to ESP-IDF, follow the instructions in the `ESP-IDF Programming guide <https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html>`__ to install and set up ESP-IDF on your machine."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:11
msgid "LVGL Demo Projects for ESP32"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:13
msgid "For a quick start with LVGL and ESP32, the following pre-configured demo projects are available for specific development boards:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:15
msgid "`ESP-BOX-3 <https://github.com/lvgl/lv_port_espressif_esp-box-3>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:16
msgid "`ESP32-S3-LCD-EV-BOARD <https://github.com/lvgl/lv_port_espressif_esp32-s3-lcd-ev-board>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:17
msgid "`M5Stack-CoreS3 <https://github.com/lvgl/lv_port_espressif_M5Stack_CoreS3>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:19
msgid "Refer to the README.md files in these repositories for build and flash instructions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:21
msgid "These demo projects use Espressif's Board Support Packages (BSPs). Additional BSPs and examples are available in the `esp-bsp <https://github.com/espressif/esp-bsp>`__ repository."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:25
msgid "Using LVGL in Your ESP-IDF Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:27
msgid "The simplest way to integrate LVGL into your ESP-IDF project is via the `esp_lvgl_port <https://components.espressif.com/components/espressif/esp_lvgl_port>`__ component. This component, used in the demo projects mentioned above, provides helper functions for easy installation of LVGL and display drivers. Moreover, it can add support for touch, rotary encoders, button or USB HID inputs. It simplifies power savings, screen rotation and other platform specific nuances."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:29
msgid "The esp_lvgl_port supports LVGL versions 8 and 9 and is compatible with ESP-IDF v4.4 and above. To add it to your project, use the following command:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:35
msgid "By default, esp_lvgl_port depends on the latest stable version of LVGL, so no additional steps are needed for new projects. If a specific LVGL version is required, specify this in your project to avoid automatic updates. LVGL can also be used without esp_lvgl_port, as described below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:38
msgid "Obtaining LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:40
msgid "LVGL is distributed through `ESP Registry <https://components.espressif.com/>`__, where all LVGL releases are uploaded. In case you do not want to use esp_lvgl_port, you can add `LVGL component <https://components.espressif.com/component/lvgl/lvgl>`__ into your project with following command:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:47
msgid "Adjust the ``^9.*`` part to match your LVGL version requirement. More information on version specifications can be found in the `IDF Component Manager documentation <https://docs.espressif.com/projects/idf-component-manager/en/latest/reference/versioning.html#range-specifications>`__. During the next build, the LVGL component will be fetched from the component registry and added to the project."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:49
msgid "**Advanced usage: Use LVGL as local component**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:51
msgid "For LVGL development and testing, it may be useful to use LVGL as a local component instead of from the ESP Registry, which offers only released versions and does not allow local modifications. To do this, clone LVGL to your project with the following command:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:59
msgid "All components from ``${project_dir}/components`` are automatically added to build."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:64
msgid "To configure LVGL, launch the configuration menu with ``idf.py menuconfig`` in your project root directory. Navigate to ``Component config`` and then ``LVGL configuration``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:68
msgid "Support for Display and Touch Drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:70
msgid "For successful LVGL project you will need a display driver and optionally a touch driver. Espressif provides these drivers that are built on its `esp_lcd <https://docs.espressif.com/projects/esp-idf/en/stable/esp32/api-reference/peripherals/lcd/index.html>`__ component."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:72
msgid "esp_lcd natively supports for some `basic displays <https://github.com/espressif/esp-idf/tree/master/components/esp_lcd/src>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:73
msgid "Other displays are maintained in `esp-bsp repository <https://github.com/espressif/esp-bsp/tree/master/components/lcd>`__ and are uploaded to ESP Registry"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:74
msgid "Touch drivers are maintained in `esp-bsp repository <https://github.com/espressif/esp-bsp/tree/master/components/lcd_touch>`__ and are uploaded to ESP Registry"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:76
msgid "These components share a common public API, making it easy to migrate your projects across different display and touch drivers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:78
msgid "To add a display or touch driver to your project, use a command like:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:85
msgid "Using the File System under ESP-IDF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:87
msgid "ESP-IDF uses the standard C file operation functions (``fopen``, ``fread``) in all its storage related APIs. This allows seamless interoperability with LVGL when enabling the :c:macro:`LV_USE_FS_STDIO` configuration. The process is described in details below, using ``SPIFFS`` as demonstration."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:91
msgid "**Decide what storage system you want to use**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:93
msgid "ESP-IDF has many, ready-to-use examples like `SPIFFS <https://github.com/espressif/esp-idf/tree/master/examples/storage/spiffsgen>`__ , `SD Card <https://github.com/espressif/esp-idf/tree/master/examples/storage/sd_card/sdspi>`__ and `LittleFS <https://github.com/espressif/esp-idf/tree/master/examples/storage/littlefs>`__ ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:101
msgid "**Re-configure your own project**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:103
msgid "The example project should be examined for details, but in general the changes involve:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:105
msgid "Enabling LVGL's STDIO file system in the configuration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:107
msgid "You can use ``menuconfig``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:109
msgid "``Component config → LVGL configuration → 3rd Party Libraries``: enable ``File system on top of stdio API``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:110
msgid "Then select ``Set an upper cased letter on which the drive will accessible`` and set it to ``65`` (ASCII **A**)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:111
msgid "You can also set ``Default driver letter`` to 65 to skip the prefix in file paths."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:113
msgid "Modifying the partition table"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:115
msgid "The exact configuration depends on your flash size and existing partitions, but the new final result should look something like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:118
msgid "Partition Table"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "nvs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "0x9000"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "0x6000"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "phy_init"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "phy"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "0xf000"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "0x1000"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "factory"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "app"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "0x10000"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "1400k"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "storage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "spiffs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:1
msgid "400k"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:128
msgid "If you are not using a custom ``partition.csv`` yet, it can be added via ``menuconfig`` (``Partition Table → Partition Table → Custom partition table CSV``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:131
msgid "Apply changes to the build system"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:133
msgid "Some ESP file systems provide automatic generation from a host folder using CMake. The proper line(s) must be copied to ``main/CMakeLists.txt``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:137
msgid "``LittleFS`` has extra dependencies that should be added to ``main/idf_component.yml``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:139
msgid "**Prepare the image files**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:141
msgid "LVGL's ``LVGLImage.py`` Python tool can be used to convert images to binary pixel map files. It supports various formats and compression."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:144
msgid "Meanwhile 3rd party libraries (like :ref:`LodePNG<lodepng_rst>` and :ref:`Tiny JPEG<tjpgd>`) allow using image files without conversion."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:148
msgid "After preparing the files, they should be moved to the target device:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:150
msgid "If properly activated a **SPIFFS** file system based on the ``spiffs_image`` folder should be automatically generated and later flashed to the target"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:151
msgid "Similar mechanism for **LittleFS** uses the ``flash_data`` folder, but it's only available for Linux hosts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:152
msgid "For the **SD Card**, a traditional file browser can be used"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:154
msgid "**Invoke proper API calls in the application code**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:156
msgid "The core functionality requires only a few lines. The following example draws the image as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:183
msgid "**Build and flash**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:185
msgid "After calling ``idf.py build flash`` the picture should be displayed on the screen."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:190
msgid "Changes made by ``menuconfig`` are not being tracked in the repository if the ``sdkconfig`` file is added to ``.gitignore``, which is the default for many ESP-IDF projects. To make your configuration permanent, add the following lines to ``sdkconfig.defaults``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:201
msgid "Support for Pixel Processing Accelerator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:203
msgid "Some ESP32 chip series, like the ESP32-P4 support the Pixel Processing Accelerator hardware (PPA), which is capable of speeding-up the filling and image blending operations, this peripheral works with the DMA-2D hardware which is responsible to move the input/output buffers into/from the PPA processing engine."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:208
msgid "Supported devices"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:210
msgid "The Espressif targets that supports the PPA are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:212
msgid "ESP32-P4 series."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:216
msgid "Using the PPA on your ESP-IDF project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:218
msgid "LVGL supports, in experimental level, the filling and the image blending acceleration through the PPA, the user can enable it inside their ``sdkconfig.default`` by adding the following option to enable the PPA draw unit in conjunction to the software render:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:226
msgid "Save the file and then rebuild the project, this will be sufficient to add the PPA code and it will start to run automatically, so no further steps are required from the user code perspective."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:230
#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:22
#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:30
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:63
msgid "Limitations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/espressif.rst:232
msgid "Please notice that the PPA is at experimental level where some performance gains are expected on drawing tasks related to rectangle copy or filling, while for image blending, even though it is operational, there is no signifcant gains, the initial cause for that according to the PPA section from reference manual is due to the DMA-2D memory bandwidth."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/index.rst:3
msgid "Chip vendors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:3
msgid "NXP"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:7
msgid "NXP has integrated LVGL into the MCUXpresso SDK packages for several of our microcontrollers as an optional software component, allowing easy evaluation and migration into your product design. LVGL is a free and open-source embedded graphic library with features that enable you to create embedded GUIs with intuitive graphical elements, beautiful visual effects and a low memory footprint. The complete graphic framework includes a variety of widgets for you to use in the creation of your GUI, and supports more advanced functions such as animations and anti-aliasing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:16
msgid "LVGL enables graphics in our free GUI Guider UI tool. It's available for use with NXP's general purpose and crossover microcontrollers, providing developers with a tool for creating complete, high quality GUI applications with LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:21
msgid "Creating new project with LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:23
msgid "`Download an SDK for a supported board <https://www.nxp.com/design/software/embedded-software/littlevgl-open-source-graphics-library:LITTLEVGL-OPEN-SOURCE-GRAPHICS-LIBRARY?&tid=vanLITTLEVGL-OPEN-SOURCE-GRAPHICS-LIBRARY>`__ today and get started with your next GUI application. It comes fully configured with LVGL (and with PXP/VGLite/G2D support if the modules are present), no additional integration work is required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:29
msgid "HW acceleration for NXP iMX RT platforms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:31
msgid "Depending on the RT platform used, the acceleration can be done by NXP PXP (PiXel Pipeline) and/or the Verisilicon GPU through an API named VGLite. Each accelerator has its own context that allows them to be used individually as well simultaneously (in LVGL multithreading mode)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:37
msgid "HW acceleration for NXP iMX platforms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:39
msgid "On MPU platforms, the acceleration can be done (hardware independent) by NXP G2D library. This accelerator has its own context that allows them to be used individually as well simultaneously with the CPU (in LVGL multithreading mode)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:44
msgid "PXP accelerator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:47
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:218
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:425
msgid "Basic configuration:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:49
msgid "Select NXP PXP engine in \"lv_conf.h\": Set :c:macro:`LV_USE_PXP` to `1`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:50
msgid "In order to use PXP as a draw unit, select in \"lv_conf.h\": Set :c:macro:`LV_USE_DRAW_PXP` to `1`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:51
msgid "In order to use PXP to rotate the screen, select in \"lv_conf.h\": Set :c:macro:`LV_USE_ROTATE_PXP` to `1`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:52
msgid "Enable PXP asserts in \"lv_conf.h\": Set :c:macro: `LV_USE_PXP_ASSERT` to `1`. There are few PXP assertions that can stop the program execution in case the :c:macro:`LV_ASSERT_HANDLER` is set to `while(1);` (Halt by default). Else, there will be logged just an error message via `LV_LOG_ERROR`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:56
msgid "If :c:macro:`SDK_OS_FREE_RTOS` symbol is defined, FreeRTOS implementation will be used, otherwise bare metal code will be included."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:60
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:231
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:435
msgid "Basic initialization:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:62
msgid "PXP draw initialization is done automatically in :cpp:func:`lv_init()` once the PXP is enabled as a draw unit or to rotate the screen, no user code is required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:71
msgid "During PXP initialization, a new draw unit `lv_draw_pxp_unit_t` will be created with the additional callbacks, if :c:macro:`LV_USE_DRAW_PXP` is set to `1`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:82
msgid "and an addition thread `_pxp_render_thread_cb()` will be spawned in order to handle the supported draw tasks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:91
msgid "If `LV_USE_PXP_DRAW_THREAD` is not defined, then no additional draw thread will be created and the PXP drawing task will get executed on the same LVGL main thread."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:94
msgid "`_pxp_evaluate()` will get called after each task is being created and will analyze if the task is supported by PXP or not. If it is supported, then an preferred score and the draw unit id will be set to the task. An `score` equal to `100` is the default CPU score. Smaller score means that PXP is capable of drawing it faster."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:100
msgid "`_pxp_dispatch()` is the PXP dispatcher callback, it will take a ready to draw task (having the `DRAW_UNIT_ID_PXP` set) and will pass the task to the PXP draw unit for processing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:104
msgid "`_pxp_delete()` will cleanup the PXP draw unit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:108
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:333
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:481
msgid "Features supported:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:110
msgid "Several drawing features in LVGL can be offloaded to the PXP engine. The CPU is available for other operations while the PXP is running. A RTOS is required to block the LVGL drawing thread and switch to another task or suspend the CPU for power savings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:115
msgid "Supported draw tasks are available in \"src/draw/nxp/pxp/lv_draw_pxp.c\":"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:133
msgid "Additionally, the screen rotation can be handled by the PXP:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:141
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:503
msgid "Fill area with color (w/o radius, w/o gradient) + optional opacity."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:142
msgid "Blit source image RGB565/ARGB888/XRGB8888 over destination. RGB565/RGB888/ARGB888/XRGB8888 + optional opacity."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:144
msgid "Recolor source image RGB565."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:145
msgid "Scale and rotate (90, 180, 270 degree) source image RGB565."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:146
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:381
msgid "Blending layers (w/ same supported formats as blitting)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:147
msgid "Rotate screen (90, 180, 270 degree)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:151
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:390
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:509
msgid "Known limitations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:153
msgid "PXP can only rotate the frames in angles that are multiple of 90 degrees."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:154
msgid "Rotation is not supported for images unaligned to blocks of 16x16 pixels. PXP is set to process 16x16 blocks to optimize the system for memory bandwidth and image processing time. The output engine essentially truncates any output pixels after the desired number of pixels has been written. When rotating a source image and the output is not divisible by the block size, the incorrect pixels could be truncated and the final output image can look shifted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:160
msgid "Recolor or transformation for images w/ opacity or alpha channel can't be obtained in a single PXP pipeline configuration. Two or multiple steps would be required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:163
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:521
msgid "Buffer address must be aligned to 64 bytes: set :c:macro:`LV_DRAW_BUF_ALIGN` to `64` in \"lv_conf.h\". No stride alignment is required: set :c:macro:`LV_DRAW_BUF_STRIDE_ALIGN` to `1` in \"lv_conf.h\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:169
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:402
#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:527
msgid "Project setup:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:171
msgid "Add PXP related source files (and corresponding headers if available) to project:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:174
msgid "\"src/draw/nxp/pxp/lv_draw_buf_pxp.c\": draw buffer callbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:175
msgid "\"src/draw/nxp/pxp/lv_draw_pxp_fill.c\": fill area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:176
msgid "\"src/draw/nxp/pxp/lv_draw_pxp_img.c\": blit image (w/ optional recolor or transformation)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:178
msgid "\"src/draw/nxp/pxp/lv_draw_pxp_layer.c\": layer blending"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:179
msgid "\"src/draw/nxp/pxp/lv_draw_pxp.c\": draw unit initialization"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:180
msgid "\"src/draw/nxp/pxp/lv_pxp_cfg.c\": init, deinit, run/wait PXP device"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:181
msgid "\"src/draw/nxp/pxp/lv_pxp_osa.c\": OS abstraction (FreeRTOS or bare metal)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:182
msgid "\"src/draw/nxp/pxp/lv_pxp_utils.c\": function helpers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:184
msgid "PXP related code depends on two drivers provided by MCU SDK. These drivers need to be added to project:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:187
msgid "fsl_pxp.c: PXP driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:188
msgid "fsl_cache.c: CPU cache handling functions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:192
msgid "PXP default configuration:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:194
msgid "Implementation depends on multiple OS-specific functions. The struct :cpp:struct:`pxp_cfg_t` with callback pointers is used as a parameter for the :cpp:func:`lv_pxp_init()` function. Default implementation for FreeRTOS in lv_pxp_osa.c."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:199
msgid ":cpp:func:`pxp_interrupt_init()`: Initialize PXP interrupt (HW setup, OS setup)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:201
msgid ":cpp:func:`pxp_interrupt_deinit()`: Deinitialize PXP interrupt (HW setup, OS setup)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:203
msgid ":cpp:func:`pxp_run()`: Start PXP job. Use OS-specific mechanism to block drawing thread."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:205
msgid ":cpp:func:`pxp_wait()`: Wait for PXP completion."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:209
msgid "VGLite accelerator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:211
msgid "Extra drawing features in LVGL can be handled by the VGLite engine. The CPU is available for other operations while the VGLite is running. A RTOS is required to block the LVGL drawing thread and switch to another task or suspend the CPU for power savings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:220
msgid "Select NXP VGLite engine in \"lv_conf.h\": Set :c:macro:`LV_USE_DRAW_VGLITE` to `1`. :c:macro:`SDK_OS_FREE_RTOS` symbol needs to be defined so that FreeRTOS driver osal implementation will be enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:223
msgid "Enable VGLite asserts in \"lv_conf.h\": Set :c:macro: `LV_USE_VGLITE_ASSERT` to `1`. VGLite assertions will verify the driver API status code and in any error, it can stop the program execution in case the :c:macro: `LV_ASSERT_HANDLER` is set to `while(1);` (Halt by default). Else, there will be logged just an error message via `LV_LOG_ERROR`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:233
msgid "Initialize VGLite GPU before calling :cpp:func:`lv_init()` by specifying the width/height of tessellation window. The default values for tessellation width and height, and command buffer size are in the SDK file \"vglite_support.h\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:262
msgid "VGLite draw initialization is done automatically in :cpp:func:`lv_init()` once the VGLite is enabled, no user code is required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:271
msgid "During VGLite initialization, a new draw unit `lv_draw_vglite_unit_t` will be created with the additional callbacks:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:281
msgid "and an addition thread `_vglite_render_thread_cb()` will be spawned in order to handle the supported draw tasks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:290
msgid "If `LV_USE_VGLITE_DRAW_THREAD` is not defined, then no additional draw thread will be created and the VGLite drawing task will get executed on the same LVGL main thread."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:293
msgid "`_vglite_evaluate()` will get called after each task is being created and will analyze if the task is supported by VGLite or not. If it is supported, then an preferred score and the draw unit id will be set to the task. An `score` equal to `100` is the default CPU score. Smaller score means that VGLite is capable of drawing it faster."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:299
msgid "`_vglite_dispatch()` is the VGLite dispatcher callback, it will take a ready to draw task (having the `DRAW_UNIT_ID_VGLITE` set) and will pass the task to the VGLite draw unit for processing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:303
msgid "`_vglite_delete()` will cleanup the VGLite draw unit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:307
msgid "Advanced configuration:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:309
msgid "Enable VGLite blit split in \"lv_conf.h\": Set :c:macro: `LV_USE_VGLITE_BLIT_SPLIT` to `1`. Enabling the blit split workaround will mitigate any quality degradation issue on screen's dimension > 352 pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:318
msgid "By default, the blit split threshold is set to 352. Blits with width or height higher than this value will be done in multiple steps. Value must be multiple of stride alignment in px. For most color formats, the alignment is 16px (except the index formats). Transformation will not be supported once with the blit split."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:324
msgid "Enable VGLite draw task synchronously in \"lv_conf.h\": Set :c:macro: `LV_USE_VGLITE_DRAW_ASYNC` to `1`. Multiple draw tasks can be queued and flushed them once to the GPU based on the GPU idle status. If GPU is busy, the task will be queued, and the VGLite dispatcher will ask for a new available task. If GPU is idle, the queue with any pending tasks will be flushed to the GPU. The completion status of draw task will be sent to the main LVGL thread asynchronously."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:335
msgid "Several drawing features in LVGL can be offloaded to the VGLite engine. The CPU is available for other operations while the GPU is running. RTOS is required to block the LVGL drawing thread and switch to another task or suspend the CPU for power savings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:340
msgid "Supported draw tasks are available in \"src/draw/nxp/vglite/lv_draw_vglite.c\":"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:374
msgid "All the below operation can be done in addition with optional opacity."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:376
msgid "Fill area with color (w/ radius or gradient)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:377
msgid "Blit source image (any format from ``_vglite_src_cf_supported()``) over destination (any format from ``_vglite_dest_cf_supported()``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:379
msgid "Recolor source image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:380
msgid "Scale and rotate (any decimal degree) source image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:382
msgid "Draw letters (blit bitmap letters / raster font)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:383
msgid "Draw full borders (LV_BORDER_SIDE_FULL)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:384
msgid "Draw arcs (w/ rounded edges)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:385
msgid "Draw lines (w/ dash or rounded edges)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:386
msgid "Draw triangles with color (w/ gradient)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:392
msgid "Source image alignment: The byte alignment requirement for a pixel depends on the specific pixel format. Both buffer address and buffer stride must be aligned. As general rule, the alignment is set to 16 pixels. This makes the buffer address alignment to be 32 bytes for RGB565 and 64 bytes for ARGB8888."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:396
msgid "For pixel engine (PE) destination, the alignment should be 64 bytes for all tiled (4x4) buffer layouts. The pixel engine has no additional alignment requirement for linear buffer layouts (:c:macro:`VG_LITE_LINEAR`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:404
msgid "Add VGLite related source files (and corresponding headers if available) to project:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:407
msgid "\"src/draw/nxp/vglite/lv_draw_buf_vglite.c\": draw buffer callbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:408
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_arc.c\": draw arc"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:409
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_border.c\": draw border"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:410
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_fill.c\": fill area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:411
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_img.c\": blit image (w/ optional recolor or transformation)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:412
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_label.c\": draw label"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:413
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_layer.c\": layer blending"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:414
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_line.c\": draw line"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:415
msgid "\"src/draw/nxp/vglite/lv_draw_vglite_triangle.c\": draw triangle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:416
msgid "\"src/draw/nxp/vglite/lv_draw_vglite.c\": draw unit initialization"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:417
msgid "\"src/draw/nxp/vglite/lv_vglite_buf.c\": init/get vglite buffer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:418
msgid "\"src/draw/nxp/vglite/lv_vglite_matrix.c\": set vglite matrix"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:419
msgid "\"src/draw/nxp/vglite/lv_vglite_path.c\": create vglite path data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:420
msgid "\"src/draw/nxp/vglite/lv_vglite_utils.c\": function helpers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:423
msgid "G2D accelerator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:427
msgid "Select NXP G2D engine in \"lv_conf.h\": Set :c:macro:`LV_USE_G2D` to `1`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:428
msgid "In order to use G2D as a draw unit, select in \"lv_conf.h\": Set :c:macro:`LV_USE_DRAW_G2D` to `1`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:429
msgid "Enable G2D asserts in \"lv_conf.h\": Set :c:macro: `LV_USE_G2D_ASSERT` to `1`. There are few G2D assertions that can stop the program execution in case the :c:macro: `LV_ASSERT_HANDLER` is set to `while(1);` (Halt by default). Else, there will be logged just an error message via `LV_LOG_ERROR`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:437
msgid "G2D draw initialization is done automatically in :cpp:func:`lv_init()` once the G2D is enabled as a draw unit , no user code is required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:446
msgid "During G2D initialization, a new draw unit `lv_draw_g2d_unit_t` will be created with the additional callbacks, if :c:macro:`LV_USE_DRAW_G2D` is set to `1`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:456
msgid "and an addition thread `_g2d_render_thread_cb()` will be spawned in order to handle the supported draw tasks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:465
msgid "If `LV_USE_G2D_DRAW_THREAD` is not defined, then no additional draw thread will be created and the G2D drawing task will get executed on the same LVGL main thread."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:468
msgid "`_g2d_evaluate()` will get called after each task is being created and will analyze if the task is supported by G2D or not. If it is supported, then an preferred score and the draw unit id will be set to the task. An `score` equal to `100` is the default CPU score. Smaller score means that G2D is capable of drawing it faster."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:474
msgid "`_g2d_dispatch()` is the G2D dispatcher callback, it will take a ready to draw task (having the `DRAW_UNIT_ID_G2D` set) and will pass the task to the G2D draw unit for processing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:478
msgid "`_g2d_delete()` will cleanup the G2D draw unit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:483
msgid "Several drawing features in LVGL can be offloaded to the G2D engine. The CPU is available for other operations while the G2D is running. Linux OS is required to block the LVGL drawing thread and switch to another task or suspend the CPU for power savings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:488
msgid "Supported draw tasks are available in \"src/draw/nx/g2d/lv_draw_g2d.c\":"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:504
msgid "Blit source image ARGB8888 over destination. ARGB8888 + optional opacity."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:506
msgid "Scale  source image ARGB8888."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:511
msgid "G2D/PXP can only rotate at 90\\ |deg| angles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:512
msgid "Rotation is not supported for images unaligned to blocks of 16x16 pixels. G2D/PXP is set to process 16x16 blocks to optimize the system for memory bandwidth and image processing time. The output engine essentially truncates any output pixels after the desired number of pixels has been written. When rotating a source image and the output is not divisible by the block size, the incorrect pixels could be truncated and the final output image can look shifted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:518
msgid "Recolor or transformation for images w/ opacity or alpha channel can't be obtained in a single G2D/PXP pipeline configuration. Two or multiple steps would be required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:529
msgid "Add G2D related source files (and corresponding headers if available) to project:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:532
msgid "\"src/draw/nxp/g2d/lv_draw_buf_g2d.c\": draw buffer callbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:533
msgid "\"src/draw/nxp/g2d/lv_draw_g2d_fill.c\": fill area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:534
msgid "\"src/draw/nxp/g2d/lv_draw_g2d_img.c\": blit image (w/ optional recolor or transformation)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:536
msgid "\"src/draw/nxp/g2d/lv_draw_g2d.c\": draw unit initialization"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:537
msgid "\"src/draw/nxp/g2d/lv_draw_g2d_buf_map.c\": hash map for g2d buffers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/nxp.rst:538
msgid "\"src/draw/nxp/g2d/lv_g2d_utils.c\": function helpers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:3
msgid "Built-in Drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:5
msgid "`Renesas <https://renesas.com/>`__ is an official partner of LVGL. Therefore, LVGL contains built-in support for `Dave2D <https://www.renesas.com/document/mas/tes-dave2d-driver-documentation>`__ (the GPU of Renesas) and we also maintain ready-to-use Renesas projects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:11
msgid "Dave2D"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:13
msgid "Dave2D is capable of accelerating most of the drawing operations of LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:15
msgid "Rectangle drawing, even with gradients"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:16
msgid "Image drawing, scaling, and rotation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:17
msgid "Letter drawing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:18
msgid "Triangle drawing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:19
msgid "Line drawing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:22
msgid "As Dave2D works in the background, the CPU is free for other tasks. In practice, during rendering, Dave2D can reduce the CPU usage by half to one-third, depending on the application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:27
msgid "GLCDC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:29
msgid "GLCDC is a multi-stage graphics output peripheral available in several Renesas MCUs. It is able to drive LCD panels via a highly configurable RGB interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:32
msgid "More info can be found at the :ref:`driver's page<renesas_glcdc>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:36
msgid "MPU Drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:38
msgid "Renesas MPUs (i.e., the RZ/G family) can use these LVGL MPU drivers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:41
msgid "Wayland"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:43
msgid "Use of the Wayland driver is supported on boards with a Wayland desktop AKA a Wayland compositor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:46
msgid "fbdev"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/built_in_drivers.rst:48
msgid "The LVGL ``fbdev`` (frame buffer) display driver can almost always be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/index.rst:5
msgid "Renesas"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:3
msgid "RA Family"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:10
msgid "Supported boards in the RA Family:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:12
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:13
msgid "**EK-RA8D1**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:13
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:31
msgid "**EK-RA8P1**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:14
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:48
msgid "**EK-RA6M3G**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:18
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:17
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:14
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:13
msgid "Run the Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:20
msgid "The official IDE of Renesas is called e\\ |sup2| studio. Because it's Eclipse-based, it runs on Windows, Linux, and Mac as well. Members of the RA family require certain minimum versions of the Flexible Software Package (FSP). See the individual README.md files in the applicable repositories for info. FSPs can be downloaded `here <https://www.renesas.com/us/en/software-tool/flexible-software-package-fsp>`__. Please notice from FSP version 6.0 and above, LVGL is now part of the middleware section of components.  Therefore when cloning the the latest versions of the supported LVGL board repositories, recursive updating of the the git submodules is no longer needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:29
msgid "JLink is used for debugging, it can be downloaded `here <https://www.segger.com/downloads/jlink/>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:32
msgid "Clone the ready-to-use repository for your selected board, for FSP version prior to 6.0:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:38
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:47
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:24
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:30
msgid "Downloading the `.zip` from GitHub doesn't work as it doesn't download the submodules."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:40
msgid "Clone the ready-to-use repository for your selected board, for FSP version from 6.0 and above:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:46
msgid "Open e\\ |sup2| studio, go to ``File`` -> ``Import project`` and select ``General`` / ``Existing projects into workspace``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:48
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:50
msgid "Select the cloned folder and press ``Finish``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:49
msgid "Double-click on ``configuration.xml``. This will activate the `Configuration Window`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:51
msgid "Renesas' Flexible Software Package (FSP) includes BSP and HAL layer support extended with multiple RTOS variants and other middleware stacks.  The components will be available via code generation, including the entry point in *\"main.c\"*."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:55
msgid "Press ``Generate Project Content`` in the top right corner."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:57
msgid "Code generation with FSP"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:60
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:62
msgid "Build the project by pressing ``Ctrl`` + ``Alt`` + ``B``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:61
msgid "Click the Debug button (|img_debug_btn|). If prompted with `Debug Configurations`, on the `Debugger` tab select the ``J-Link ARM`` as `Debug hardware` and the proper IC as `Target Device`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:7
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:7
msgid "Debug button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:65
msgid "``R7FA8D1BH`` for EK-RA8D1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:67
msgid "Debugger parameters for RA8"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:70
msgid "``R7FA6M3AH`` for EK-RA6M3G"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:72
msgid "Debugger parameters for RA6"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:77
msgid "On EK-RA8D1 boards, the ``SW1`` DIP switch 7 (in the middle of the board) should be ON, all others are OFF."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:80
msgid "Also note opening a project previously built on top of the FSP prior to v6.0 will trigger a dialog asking whether the user wants to migrate to the new FSP v6.0. The migration will not break the project,."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:86
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:75
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:31
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:43
msgid "Modify the project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:90
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:79
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:35
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:47
msgid "Open a demo"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:92
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:81
msgid "The entry point of the main task is contained in ``src/LVGL_thread_entry.c``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:94
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:83
msgid "You can disable the LVGL demos (or just comment them out) and call some ``lv_example_...()`` functions, or add your own custom code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:101
msgid "``src/lv_conf.h`` (or ``src/lv_conf_user.h``) contains the most important settings for LVGL. Namely:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:103
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:92
msgid ":c:macro:`LV_COLOR_DEPTH` to set LVGL's default color depth"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:104
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:93
msgid ":c:macro:`LV_MEM_SIZE` to set the maximum RAM available to LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:105
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:94
msgid ":c:macro:`LV_USE_DAVE2D` to enable the GPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:108
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:97
msgid "Hardware and software components can be modified in a visual way using the ``Configuration Window``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:111
msgid "As of e\\ |sup2| Studio 2025-04.1 and FSP 6.0.0, LVGL is a managed component."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:116
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:103
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:53
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:64
msgid "Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/ra_family.rst:118
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:105
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:55
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:66
msgid "In case of any problems or questions open an issue in the corresponding repository."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:3
msgid "RX Family"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:10
msgid "Supported boards in the RX Family:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:12
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:66
msgid "**RX72N Envision Kit**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:19
msgid "The official IDE of Renesas is called e\\ |sup2| studio. Because it's Eclipse-based, it runs on Windows, Linux, and Mac as well.  It can be downloaded `here <https://www.renesas.com/us/en/software-tool/e-studio>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:22
msgid "Download and install the required driver for the debugger"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:24
msgid "for Windows: `64 bit here <https://www.renesas.com/us/en/document/uid/usb-driver-renesas-mcu-tools-v27700-64-bit-version-windows-os?r=488806>`__ and `32 bit here <https://www.renesas.com/us/en/document/uid/usb-driver-renesas-mcu-toolse2e2-liteie850ie850apg-fp5-v27700for-32-bit-version-windows-os?r=488806>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:26
msgid "for Linux: `here <https://www.renesas.com/us/en/document/swo/e2-emulator-e2-emulator-lite-linux-driver?r=488806>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:28
msgid "RX72 requires an external compiler for the RXv3 core. A free and open-source version is available `here <https://llvm-gcc-renesas.com/rx-download-toolchains/>`__ after registration."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:31
msgid "The compiler must be activated in e\\ |sup2| studio:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:33
msgid "Go to go to ``Help`` -> ``Add Renesas Toolchains``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:34
msgid "Press the ``Add...`` button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:35
msgid "Select the installation folder of the toolchain"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:37
msgid "Toolchains"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:40
msgid "Clone the ready-to-use `lv_port_renesas_rx72n-envision-kit <https://github.com/lvgl/lv_port_renesas_rx72n-envision-kit.git>`__ repository:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:49
msgid "Open e\\ |sup2| studio, go to ``File`` -> ``Import project`` and select ``General`` / ``Existing projects into workspace``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:51
msgid "Double-click on ``RX72N_EnVision_LVGL.scfg`` to activate the ``Configuration Window``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:53
msgid "Renesas' Smart Configurator (SMC) includes BSP and HAL layer support extended with multiple RTOS variants and other middleware stacks.  The components will be available via code generation, including the entry point of the application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:57
msgid "Press ``Generate Code`` in the top right corner."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:59
msgid "Code generation with SMC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:63
msgid "Click the Debug button (|img_debug_btn|). If prompted with `Debug Configurations`, on the `Debugger` tab select the ``E2 Lite`` as `Debug hardware` and ``R5F572NN`` as `Target Device`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:66
msgid "Debugger parameters for RX72"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:70
msgid "Make sure that both channels of ``SW1`` DIP switch (next to ``ECN1``) are OFF."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rx_family.rst:90
msgid "``src/lv_conf.h`` contains the most important settings for LVGL. Namely:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:3
msgid "RZ/A Family"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:7
msgid "Supported boards in the RZ/A Family:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:9
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:112
msgid "**RZ/A3M**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:16
msgid "The RZ/A boards are MPUs with a focus on bare metal and RTOS applications. Projects are built for them using e\\ |sup2| Studio IDE, available for Windows, Mac, and Linux."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:17
msgid "Clone the ready-to-use repository for your board:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:25
msgid "Follow the instructions in the project README.md to build and flash the project to the board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:37
msgid "The entry point is contained in ``src/LVGL_thread_entry.c``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:39
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:51
msgid "You can disable the LVGL demos (``lv_demo_benchmark()``) (or just comment them out) and call some ``lv_example_...()`` functions, or add your own custom code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:46
msgid "Edit ``lv_conf.h`` to configure LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rza_family.rst:48
msgid "It will automatically run any demo that is enabled in ``lv_conf.h``. You can see ``lv_conf.defaults`` for a summary of the configs which have been changed from the defaults."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:3
msgid "RZ/G Family"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:5
msgid "Supported boards in the RZ/G Family:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:7
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:83
msgid "**RZ/G2L-EVKIT**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:8
#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:97
msgid "**RZ/G2UL-EVKIT**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:15
msgid "The RZ/G boards are MPUs with support for running Linux. Projects are built for them using a cross-compiler CLI toolchain SDK in a Linux PC environment (WSL, Docker, etc. can be used on Windows)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:18
msgid "The G2L has a Wayland desktop and the project appears as a Wayland window. The G2UL does not have a desktop so the project is fullscreen and uses the ``fbdev`` driver."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:20
msgid "The SDK currently uses LVGL v8.3 so this project uses this version to mirror the SDK version, even though LVGL is statically linked. You may try using newer versions of LVGL. See the `v8-to-v9 Migration Guide <https://docs.lvgl.io/9.0/CHANGELOG.html#migration-guide>`__ for things you will need to address."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:23
msgid "Clone the ready-to-use repository for your selected board:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:31
msgid "Follow the instructions in the project README.md to obtain the SD Card image and toolchain installer, build, and upload the project to the board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:33
msgid "Stop any automatically started demos (on G2UL run ``systemctl stop demo-launcher`` in the terminal)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:34
msgid "Run the project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:49
msgid "The entry point is contained in ``src/main.c``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/rzg_family.rst:58
msgid "Edit ``lv_conf.h`` and ``lv_drv_conf.h`` to configure LVGL. The board image contains LVGL and lv_drivers as dynamically linkable libraries. This project builds LVGL statically for customizability and to port the LVGL v9 benchmark from LVGL v8.3."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:3
msgid "Supported Boards"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:7
msgid "Board Name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:8
msgid "CPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:9
msgid "Memory"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:10
#: ../../lvgl/docs/intermediate/details/integration/driver/display/index.rst:3
msgid "Display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:11
msgid "`Board <https://lvgl.io/boards>`__ video"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:12
msgid "Links"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "480 MHz"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "Arm Cortex-M85"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1MB internal SDRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "64MB external SDRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "2MB internal flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "64MB external octo-SPI flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "4.5”"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "480x854"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "2-lane MIPI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:30
msgid "`Demo repository <https://github.com/lvgl/lv_port_renesas_ek-ra8d1>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1 GHz"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1872KB internal"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "128MB external"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1MB internal flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "7”"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1024x600"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "Parallel RGB888"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:47
msgid "`Demo repository <https://github.com/lvgl/lv_port_renesas_ek_ra8p1>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "120 MHz"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "Arm Cortex-M4"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "640kB internal SRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "2MB internal SRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "32MB external QSPI flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "4.3”"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "480x272"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "Parallel RGB565"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "`Demo repository <https://github.com/lvgl/lv_port_renesas_ek-ra6m3g>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "240 MHz"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "Renesas RXv3"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1MB internal SRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "4MB internal SRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:82
msgid "`Demo repository <https://github.com/lvgl/lv_port_renesas_rx72n-envision-kit>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1.2 GHz"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "Arm Cortex-A55"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "2GB DDR4 SDRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1920x1080"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "Micro-HDMI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:96
msgid "`Demo repository <https://github.com/lvgl/lv_port_renesas_rz-g2l-evkit>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1.0 GHz"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1GB DDR4 SDRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1280x800"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "with Micro-HDMI bridge"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:111
msgid "`Demo repository <https://github.com/lvgl/lv_port_renesas_rz-g2ul-evkit>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "128MB internal DDR3L-SDRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "128KB internal SRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "128MB external QSPI NAND flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "32MB external QSPI NOR flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "1280x720"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:0
msgid "MIPI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/renesas/supported_boards.rst:129
msgid "`Demo repository <https://github.com/lvgl/lv_port_renesas-ek-rz_a3m>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:3
msgid "STM32"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:5
msgid "LVGL Can be added to `STM32CubeIDE <https://www.st.com/en/development-tools/stm32cubeide.html>`__ in a similar fashion to any other Eclipse-based IDE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:10
msgid "Including LVGL in a Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:12
msgid "Create or open a project in STM32CubeIDE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:13
msgid "Copy the entire LVGL folder to *[project_folder]/Drivers/lvgl*."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:14
msgid "In the STM32CubeIDE **Project Explorer** pane: right click on the LVGL folder that you copied (you may need to refresh the view first before it will appear), and select **Add/remove include path…**. If this doesn't appear, or doesn't work, you can review your project include paths under the **Project** -> **Properties** menu, and then navigating to **C/C++ Build** -> **Settings** -> **Include paths**, and ensuring that the LVGL directory is listed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:22
msgid "Now that the source files are included in your project, follow the instructions to :ref:`add LVGL to your project <adding_lvgl_to_your_project>` and to create the ``lv_conf.h`` file, and initialise the display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:28
msgid "Bare Metal Example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:30
msgid "A minimal example using STM32CubeIDE, and HAL. \\* When setting up **Pinout and Configuration** using the **Device Configuration Tool**, select **System Core** -> **SYS** and ensure that **Timebase Source** is set to **SysTick**. \\* Configure any other peripherals (including the LCD panel), and initialise them in *main.c*. \\* ``#include \"lvgl.h\"`` in the *main.c* file. \\* Create some frame buffer(s) as global variables:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:47
msgid "In your ``main()`` function, after initialising your CPU,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:48
msgid "peripherals, and LCD panel, call :cpp:func:`lv_init` to initialise LVGL. You can then create the display driver using :cpp:func:`lv_display_create`, and register the frame buffers using :cpp:func:`lv_display_set_buffers`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:62
#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:180
msgid "Create some dummy Widgets to test the output:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:76
msgid "Add a call to :cpp:func:`lv_timer_handler` inside your ``while(1)`` loop:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:88
msgid "Add a call to :cpp:func:`lv_tick_inc` inside the :cpp:func:`SysTick_Handler` function. Open the *stm32xxxx_it.c* file (the name will depend on your specific MCU), and update the :cpp:func:`SysTick_Handler` function:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:111
msgid "Finally, write the callback function, ``my_flush_cb``, which will send the display buffer to your LCD panel. Below is one example, but it will vary depending on your setup."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:147
msgid "FreeRTOS Example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:149
msgid "A minimal example using STM32CubeIDE, HAL, and CMSISv1 (FreeRTOS). *Note that we have not used Mutexes in this example, however LVGL is* **NOT** *thread safe and so Mutexes should be used*. See: :ref:`threading` \\* ``#include \"lvgl.h\"`` \\* Create your frame buffer(s) as global variables:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:164
msgid "In your ``main`` function, after your peripherals (SPI, GPIOs, LCD etc) have been initialised, initialise LVGL using :cpp:func:`lv_init`, create a new display driver using :cpp:func:`lv_display_create`, and register the frame buffers using :cpp:func:`lv_display_set_buffers`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:193
msgid "Create two threads to call :cpp:func:`lv_timer_handler`, and :cpp:func:`lv_tick_inc`.You will need two ``osThreadId`` handles for CMSISv1. These don't strictly have to be globally accessible in this case, however STM32Cube code generation does by default. If you are using CMSIS and STM32Cube code generation it should look something like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:214
msgid "And create the thread functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:237
msgid "Finally, create the ``my_flush_cb`` function to output the frame buffer to your LCD. The specifics of this function will vary depending on which MCU features you are using. Below is a simple example of a parallel LCD interface, adjust this to suit your specific display and MCU capabilities."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:276
msgid "DMA2D Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:278
msgid "LVGL supports DMA2D - a feature of some STM32 MCUs which can improve performance when blending fills and images. Some STM32 product lines such as STM32F4 STM32F7, STM32L4, STM32U5, and STM32H7 include models with DMA2D support."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:282
msgid "LVGL's integration with DMA2D can be enabled by setting ``LV_USE_DRAW_DMA2D`` to ``1`` in ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:285
msgid "With ``LV_USE_DRAW_DMA2D_INTERRUPT`` set to ``0`` and ``LV_USE_OS`` set to ``LV_OS_NONE``, DMA2D will draw some fills and images concurrently with the software render where possible. If ``LV_USE_DRAW_DMA2D_INTERRUPT`` is set to ``1`` and ``LV_USE_OS`` set to ``LV_OS_FREERTOS`` (or another OS) the main difference will be that the core will idle instead of \"busywait\" while waiting for a DMA2D transfer to complete."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:291
msgid "If ``LV_USE_DRAW_DMA2D_INTERRUPT`` is enabled then you are required to call :cpp:expr:`lv_draw_dma2d_transfer_complete_interrupt_handler` whenever the DMA2D \"transfer complete\" global interrupt is received."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:295
msgid "DMA2D also makes possible to mix layers that have color format on :c:macro:`LV_COLOR_FORMAT_ARGB1555` on top of :c:macro:`LV_COLOR_FORMAT_RGB565` layers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/chip/stm32.rst:299
msgid "If your STM device has a NeoChrom GPU, you can use the :ref:`Nema GFX renderer <nema_gfx>` instead."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:3
msgid "X11 Display/Inputs driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:8
msgid "The **X11** display/input `driver <https://github.com/lvgl/lvgl/src/drivers/x11>`__ offers support for simulating the LVGL display and keyboard/mouse inputs in an X11 desktop window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:12
#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:15
msgid "It is an alternative to **Wayland**, **XCB**, **SDL** or **Qt**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:14
msgid "The main purpose for this driver is for testing/debugging the LVGL application in a **Linux** simulation window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:21
msgid "The X11 driver uses XLib to access the linux window manager."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:23
msgid "Install XLib: ``sudo apt-get install libx11-6`` (should be installed already)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:24
msgid "Install XLib development package: ``sudo apt-get install libx11-dev``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:28
msgid "Configure X11 driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:30
msgid "Enable the X11 driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:35
#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:46
msgid "Optional configuration options:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:36
msgid "Direct Exit"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:44
msgid "Double buffering"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:51
msgid "Render mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:63
msgid "The minimal initialisation opening a window and enabling keyboard/mouse support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:64
msgid "(e.g. in main.c, LV_X11_DIRECT_EXIT must be 1):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:89
msgid "Full initialisation with mouse pointer symbol and own application exit handling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/X11.rst:90
msgid "(dependent on LV_X11_DIRECT_EXIT (can be 1 or 0))"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:3
msgid "Linux Framebuffer Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:8
msgid "The Linux framebuffer (fbdev) is a linux subsystem used to display graphics. It is a hardware-independent API that gives user space software access to the framebuffer (the part of a computer's video memory containing a current video frame) using only the Linux kernel's own basic facilities and its device file system interface, avoiding the need for libraries that implement video drivers in user space."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:15
msgid "Your system has a framebuffer device configured (usually under ``/dev/fb0``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:18
#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:35
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:24
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:26
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:25
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:26
#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:38
#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:17
msgid "Configuring the driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:20
msgid "Enable the framebuffer driver support in lv_conf.h, by cmake compiler define or by KConfig. Additionally you may configure the rendering mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:31
msgid "To set up a framebuffer-based display, first create a display with ``lv_linux_fbdev_create``. Afterwards set the framebuffer device node on the display (usually this is ``/dev/fb0``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:39
msgid "If your screen stays black or only draws partially, you can try enabling direct rendering via ``LV_DISPLAY_RENDER_MODE_DIRECT``. Additionally, you can activate a force refresh mode with ``lv_linux_fbdev_set_force_refresh(true)``. This usually has a performance impact though and shouldn't be enabled unless really needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:44
msgid "Hide the cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:46
msgid "You may encounter a blinking cursor on the screen. The method to hide it varies depending on the platform. For instance, here is how it can be done on a Raspberry Pi:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:50
msgid "Edit ``/boot/cmdline.txt`` file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:51
msgid "Add ``vt.global_cursor_default=0``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:54
msgid "Common mistakes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:57
msgid "Default resolution issue"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:59
msgid "When the Linux kernel initializes, it sets up subsystems like the framebuffer (fbdev) to manage display output. If an HDMI display is connected, the kernel detects it and allocates a portion of RAM as the framebuffer, which holds the pixel data for rendering images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:64
msgid "However, a common issue arises when the display is not powered on during the boot process. If the board is powered on before the screen, the kernel may incorrectly configure the framebuffer resolution. As a result, both the visible and virtual resolutions can be incorrect, leading to display problems."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:69
msgid "This issue often occurs with HDMI connections where the display is powered up after the system has already booted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:72
msgid "The following command outputs the current settings of the specified framebuffer device, such as resolution, pixel depth, and timings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/fbdev.rst:79
msgid "To prevent display-related issues, it is recommended to ensure all devices, including the HDMI display, are connected and powered on before powering up the board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ft81x.rst:5
msgid "FT81x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ft81x.rst:7
msgid "A minimal framebuffer driver for EVE FT81x smart display controllers. Works for BT81x too."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ft81x.rst:9
msgid "Single-buffered partial render mode supported for now. It may not support DSPI or QSPI currently."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ft81x.rst:11
msgid "Tested at 32 MHz on ft812 and at 23 MHz on bt817."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ft81x.rst:112
msgid "Troubleshooting"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ft81x.rst:114
msgid "If the backlight does not come on (or is too bright or dim), try changing the value of ``PWM_DUTY_BACKLIGHT_ON`` in ``lv_ft81x.c``, which can vary by board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:3
msgid "Generic MIPI DCS compatible LCD Controller driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:8
msgid "From the `Wikipedia <https://en.wikipedia.org/wiki/MIPI_Alliance>`__:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:10
msgid "`MIPI Alliance <https://www.mipi.org/>`__ is a global business alliance that develops technical specifications for the mobile ecosystem, particularly smart phones but including mobile-influenced industries. MIPI was founded in 2003 by Arm, Intel, Nokia, Samsung, STMicroelectronics and Texas Instruments."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:14
msgid "MIPI Alliance published a series of specifications related to display devices, including DBI (Display Bus Interface), DSI (Display Serial Interface) and DCS (Display Command Set). Usually when one talks about a MIPI-compatible display, one thinks of a device with a DSI serial interface. However, the Display Bus Interface specification includes a number of other, legacy interfaces, like SPI serial, or i8080-compatible parallel interface, which are often used to interface LCD displays to lower-end microcontrollers. Furthermore, the DCS specification contains a standard command set, which is supported by a large number of legacy TFT LCD controllers, including the popular Sitronix (ST7735, ST7789, ST7796) and Ilitek (ILI9341) SOCs. These commands provide a common interface to configure display orientation, color resolution, various power modes, and provide generic video memory access. On top of that standard command set each LCD controller chip has a number of vendor-specific commands to configure voltage generator levels, timings, or gamma curves."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:23
msgid "It is important to understand that this generic MIPI LCD driver is not a hardware driver for displays with the DSI (\"MIPI\") serial interface. Instead, it implements the MIPI DCS command set used in many LCD controllers with an SPI or i8080 bus, and provides a common framework for chip-specific display controllers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:26
msgid "Although this is a generic driver, it can be used to support compatible chips which do not have a specific driver."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:32
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:21
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:23
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:22
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:23
msgid "There are no prerequisites."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:37
msgid "Enable the generic MIPI LCD driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:44
msgid ":c:macro:`LV_USE_GENERIC_MIPI` is automatically enabled when a compatible driver is enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:49
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:35
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:37
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:36
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:37
msgid "You need to implement two platform-dependent functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:65
msgid "The only difference between the :cpp:func:`my_lcd_send_cmd()` and :cpp:func:`my_lcd_send_color()` functions is that :cpp:func:`my_lcd_send_cmd()` is used to send short commands and it is expected complete the transaction when it returns (in other words, it should be blocking), while :cpp:func:`my_lcd_send_color()` is only used to send pixel data, and it is recommended to use DMA to transmit data in the background. More sophisticated methods can be also implemented, like queuing transfers and scheduling them in the background."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:69
msgid "Please note that while display flushing is handled by the driver, it is the user's responsibility to call :cpp:func:`lv_display_flush_ready()` when the color transfer completes. In case of a DMA transfer this is usually done in a transfer ready callback."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:73
msgid "While it is acceptable to use a blocking implementation for the pixel transfer as well, performance will suffer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:76
msgid "Care must be taken to avoid sending a command while there is an active transfer going on in the background. It is the user's responsibility to implement this either by polling the hardware, polling a global variable (which is reset at the end of the transfer), or by using a semaphore or other locking mechanism."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:79
msgid "Please also note that the driver does not handle the draw buffer allocation, because this may be platform-dependent, too. Thus you need to allocate the buffers and assign them to the display object as usual by calling :cpp:func:`lv_display_set_buffers()`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:82
msgid "The driver can be used to create multiple displays. In such a configuration the callbacks must be able to distinguish between the displays. Usually one would implement a separate set of callbacks for each display. Also note that the user must take care of arbitrating the bus when multiple devices are connected to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:89
#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:72
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:74
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:73
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:74
msgid "You can find a step-by-step guide and the actual implementation of the callbacks on an STM32F746 using STM32CubeIDE and the ST HAL libraries here: :ref:`lcd_stm32_guide`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:173
msgid "Advanced topics"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:176
msgid "Create flags"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:178
msgid "The third argument of the :cpp:func:`lv_lcd_generic_mipi_create()` function is a flag array. This can be used to configure the orientation and RGB ordering of the panel if the default settings do not work for you. In particular, the generic MIPI driver accepts the following flags:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:188
msgid "You can pass multiple flags by ORing them together, e.g., :c:macro:`LV_LCD_FLAG_MIRROR_X` ``|`` :c:macro:`LV_LCD_FLAG_BGR`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:191
msgid "Custom command lists"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:193
msgid "While the chip-specific drivers do their best to initialize the LCD controller correctly, it is possible, that different TFT panels need different configurations. In particular a correct gamma setup is crucial for good color reproduction. Unfortunately, finding a good set of parameters is not easy. Usually the manufacturer of the panel provides some example code with recommended register settings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:197
msgid "You can use the ``my_lcd_send_cmd()`` function to send an arbitrary command to the LCD controller. However, to make it easier to send a large number of parameters the generic MIPI driver supports sending a custom command list to the controller. The commands must be put into a 'uint8_t' array:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:213
msgid "You can add a delay between the commands by using the pseudo-command ``LV_LCD_CMD_DELAY_MS``, which must be followed by the delay given in 10ms units. To terminate the command list you must use a delay with a value of ``LV_LCD_CMD_EOF``, as shown above."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/gen_mipi.rst:216
msgid "See an actual example of sending a command list `here <https://github.com/lvgl/lvgl/blob/master/src/drivers/display/st7789/lv_st7789.c>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:3
msgid "ILI9341 LCD Controller driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:8
msgid "The `ILI9341 <https://www.buydisplay.com/download/ic/ILI9341.pdf>`__ is a 262,144-color single-chip SOC driver for a-TFT liquid crystal display with resolution of 240RGBx320 dots, comprising a 720-channel source driver, a 320-channel gate driver, 172,800 bytes GRAM for graphic display data of 240RGBx320 dots, and power supply circuit. ILI9341 supports parallel 8-/9-/16-/18-bit data bus MCU interface, 6-/16-/18-bit data bus RGB interface and 3-/4-line serial peripheral interface (SPI)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:14
msgid "The ILI9341 LCD controller `driver <https://github.com/lvgl/lvgl/src/drivers/display/ili9341>`__ is a platform-agnostic driver, based on the `generic MIPI driver <https://github.com/lvgl/lvgl/doc/integration/drivers/display/gen_mipi.rst>`__. It implements display initialization, supports display rotation and implements the display flush callback. The user needs to implement only two platform-specific functions to send a command or pixel data to the controller via SPI or parallel bus. Typically these are implemented by calling the appropriate SDK library functions on the given platform."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:26
msgid "Enable the ILI9341 driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:51
msgid "To create an ILI9341-based display use the function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/ili9341.rst:68
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:70
#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:69
msgid "For additional details and a working example see the `generic MIPI driver documentation <https://github.com/lvgl/lvgl/doc/integration/drivers/display/gen_mipi.rst>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:5
msgid "Step-by-step Guide: How to use the LVGL v9 LCD drivers with STM32 devices"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:10
msgid "This guide is intended to be a step-by-step instruction of how to configure the STM32Cube HAL with the new TFT-LCD display drivers introduced in LVGL v9.0. The example code has been tested on the STM32F746-based Nucleo-F746ZG board with an ST7789-based LCD panel connected via SPI. The application itself and the hardware configuration code were generated with the STM32CubeIDE 1.14.0 tool."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:13
msgid "ST Micro provide their own TFT-LCD drivers in their X-CUBE-DISPLAY Software Extension Package. While these drivers can be used with LVGL as well, the LVGL LCD drivers do not depend on this package."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:15
msgid "The LVGL LCD drivers are meant as an alternative, simple to use API to implement LCD support for your LVGL-based project on any platform. Moreover, even in the initial release we support more LCD controllers than X-CUBE-DISPLAY currently provides, and we plan to add support for even more LCD controllers in the future."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:17
msgid "Please note however, that – unlike X-CUBE-DISPLAY – the LVGL LCD drivers do not implement the communication part, whether SPI, parallel i8080 bus or other. It is the user's responsibility to implement – and optimize – these on their chosen platform. LVGL will only provide examples for the most popular platforms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:19
msgid "By following the steps you will have a fully functional program, which can be used as the foundation of your own LVGL-based project. If you are in a hurry and not interested in the details, you can find the final project `here <https://github.com/lvgl/lv_port_lcd_stm32>`__. You will only need to configure LVGL to use the driver corresponding to your hardware (if it is other than the ST7789), and implement the function ``ui_init()`` to create your widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:23
msgid "This example is not meant as the best possible implementation, or the recommended solution. It relies solely on the HAL drivers provided by ST Micro, which favor portability over performance. Despite of this the performance is very good, thanks to the efficient, DMA-based implementation of the drivers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:27
msgid "Although the example uses FreeRTOS, this is not a strict requirement with the LVGL LCD display drivers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:29
msgid "You can find the source code snippets of this guide in the `lv_port_lcd_stm32_template.c <https://github.com/lvgl/lvgl/examples/porting/lv_port_lcd_stm32_template.c>`__ example."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:32
msgid "Hardware configuration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:34
msgid "In this example we'll use the SPI1 peripheral to connect the microcontroller to the LCD panel. Besides the hardware-controlled SPI pins SCK and MOSI we need some additional output pins for the chip select, command/data select, and LCD reset:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:37
msgid "pin"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:37
msgid "configuration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:37
msgid "LCD"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:37
msgid "user label"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:39
msgid "PA4"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:39
#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:42
#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:43
msgid "GPIO_Output"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:39
msgid "CS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:39
msgid "LCD_CS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:40
msgid "PA5"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:40
msgid "SPI1_SCK"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:40
msgid "SCK"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:40
#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:41
msgid "--"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:41
msgid "PA7"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:41
msgid "SPI1_MOSI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:41
msgid "SDI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:42
msgid "PA15"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:42
msgid "RESET"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:42
msgid "LCD_RESET"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:43
msgid "PB10"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:43
msgid "DC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:43
msgid "LCD_DCX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:47
msgid "Step-by-step instructions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:49
msgid "Create new project in File/New/STM32 Project."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:50
msgid "Select target processor/board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:51
msgid "Set project name and location."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:52
msgid "Set Targeted Project Type to STM32Cube and press Finish."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:53
msgid "Say \"Yes\" to Initialize peripherals with their default Mode? After the project is created, the configuration file (.ioc) is opened automatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:54
msgid "Switch to the Pinout & Configuration tab."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:55
msgid "In the System Core category switch to RCC."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:56
msgid "Set High Speed Clock to \"BYPASS Clock Source\", and Low Speed Clock to \"Crystal/Ceramic Resonator\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:57
msgid "In the System Core category select SYS, and set Timebase Source to other than SysTick (in our example, TIM2)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:58
msgid "Switch to the Clock Configuration tab."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:59
msgid "Set the HCLK clock frequency to the maximum value (216 MHz for the STM32F746)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:60
msgid "Switch back to the Pinout & Configuration tab, and in the Middleware and Software Packs category select FREERTOS."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:61
msgid "Select Interface: CMSIS_V1."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:62
msgid "In the Advanced Settings tab enable USE_NEWLIB_REENTRANT. We are finished here."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:63
msgid "In the Pinout view configure PA5 as SPI1_SCK, PA7 as SPI1_MOSI (right click the pin and select the function)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:64
msgid "In the Pinout & Configuration/Connectivity category select SPI1."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:65
msgid "Set Mode to Transmit Only Master, and Hardware NSS Signal to Disable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:66
msgid "In the Configuration subwindow switch to Parameter Settings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:67
msgid "Set Frame Format to Motorola, Data Size to 8 Bits, First Bit to MSB First."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:68
msgid "Set the Prescaler to the maximum value according to the LCD controller's datasheet (e.g., 15 MBits/s). Set CPOL/CPHA as required (leave as default)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:69
msgid "Set NSSP Mode to Disabled and NSS Signal Type to Software."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:70
msgid "In DMA Settings add a new Request for SPI1_TX (when using SPI1)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:71
msgid "Set Priority to Medium, Data Width to Half Word."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:72
msgid "In NVIC Settings enable SPI1 global interrupt."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:73
msgid "In GPIO Settings set SPI1_SCK to Pull-down and Very High output speed and set the User Label to ``LCD_SCK``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:74
msgid "Set SPI1_MOSI to Pull-up and Very High, and name it ``LCD_SDI``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:75
msgid "Select System Core/GPIO category. In the Pinout view configure additional pins for chip select, reset and command/data select. Name them ``LCD_CS``, ``LCD_RESET`` and ``LCD_DCX``, respectively. Configure them as GPIO Output. (In this example we will use PA4 for ``LCD_CS``, PA15 for ``LCD_RESET`` and PB10 for ``LCD_DCX``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:76
msgid "Set ``LCD_CS`` to No pull-up and no pull-down, Low level and Very High speed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:77
msgid "Set ``LCD_RESET`` to Pull-up and High level."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:78
msgid "Set ``LCD_DCX`` to No pull-up and no pull-down, High level and Very High speed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:79
msgid "Open the Project Manager tab, and select Advanced Settings. On the right hand side there is a Register Callback window. Select SPI and set it to ENABLE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:80
msgid "We are ready with the hardware configuration. Save the configuration and let STM32Cube generate the source."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:81
msgid "In the project tree clone the LVGL repository into the Middlewares/Third_Party folder (this tutorial uses the release/v9.0 branch of LVGL):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:87
msgid "Cloning should create an 'lvgl' subfolder inside the 'Third_Party' folder. From the 'lvgl' folder copy 'lv_conf_template.h' into the 'Middlewares' folder, and rename it to 'lv_conf.h'. Refresh the project tree."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:88
msgid "Open 'lv_conf.h', and in line 15 change ``#if 0`` to ``#if 1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:89
msgid "Search for the string ``LV_USE_ST7735``, and enable the appropriate LCD driver by setting its value to 1. This example uses the ST7789 driver:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:95
msgid "Right click the folder 'Middlewares/Third_Party/lvgl/tests', select Resource Configurations/Exclude from Build..., check both Debug and Release, then press OK."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:96
msgid "Right click the project name and select \"Properties\". In the C/C++ Build/Settings panel select MCU GCC Compiler/Include paths. In the Configuration dropdown select [ All configurations ]. Add the following Include path:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:102
msgid "Open Core/Src/stm32xxx_it.c (the file name depends on the processor variation). Add 'lv_tick.h' to the Private includes section:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:111
msgid "Find the function ``TIM2_IRQHandler``. Add a call to ``lv_tick_inc()``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:127
msgid "Save the file, then open Core/Src/main.c. Add the following lines to the Private includes (if your LCD uses other than the ST7789, replace the driver path and header with the appropriate one):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:137
msgid "Add the following lines to Private defines (change them according to your LCD specs):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:146
msgid "Add the following lines to the Private variables:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:154
msgid "Add the following line to the Private function prototypes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:161
msgid "Add the following lines after USER CODE BEGIN RTOS_THREADS:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:168
msgid "Copy and paste the hardware initialization and the transfer callback functions from the example code after USER CODE BEGIN 4:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:251
msgid "Add the LVGL_Task() function. Replace the ``lv_st7789_create()`` call with the appropriate driver. You can change the default orientation by adjusting the parameter of ``lv_display_set_rotation()``. You will also need to create the display buffers here. This example uses a double buffering scheme with 1/10th size partial buffers. In most cases this is a good compromise between the required memory size and performance, but you are free to experiment with other settings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/lcd_stm32_guide.rst:298
msgid "All that's left is to implement ``ui_init()`` to create the screen. Here's a simple \"Hello World\" example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:5
msgid "NXP eLCDIF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:9
msgid "eLCDIF is a peripheral that is provided on some of the NXP devices capable to drive display panels through the RGB interface, it supports different color depths and, on MIPI-DSI capable devices, its output ca be directed to the MIPI display physical interface. The LVGL's NXP eLCDIF driver is responsible to bind the NXP MCUx SDK low-level driver to the LVGL display subsystem."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:18
msgid "This driver relies on the presence of the MCUx SDK from NXP in the same project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:19
msgid "Activate the diver by setting :c:macro:`LV_USE_NXP_ELCDIF` to ``1`` in your *\"lv_conf.h\"*."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:24
msgid "The LVGL driver for eLCDIF assumes the platform already configured the display low-level driver, set the pin-mux, clocks, etc. It also requires the base address of the peripheral and configuration structure already set."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:28
msgid "The following code demonstrates using the diver in :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_DIRECT` mode, please notice in this mode of operation the application is responsible to allocate the framebuffers space and pass them to the display, in the example below `buffer1` and `buffer2` are the current and the next buffers that will be copied to the display screen, being swapped at each flush operation (managed internally by the display driver). Also observe, in direct mode, each buffer should have the space at least to hold at least the size of the screen, that is it, the heigh times the width times the bytes for a pixel (which is application dependent or display supported), on the code below this size is represented by `buf_size`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:45
#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:57
msgid "To use the driver in :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_PARTIAL` mode, an extra buffer must be allocated, preferably in the fastest available memory region."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:48
msgid "Buffer swapping can be activated by passing a second buffer of same size instead of the :cpp:expr:`NULL` argument. please notice in this case the `BUF_SIZE` needs to have, at least, space to hold data of 1/10 of the actual display dimensions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/nxp_elcdif.rst:58
msgid "In runtime, the event handler function from the eLCDIF driver should be called inside of the eLCDIF interrupt handler This function is responsible for notify the LVGL display subsystem about a finished flush operation:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:5
msgid "Renesas GLCDC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:12
msgid "Architectural overview of Renesas GLCDC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:16
msgid "<br/>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:18
msgid "GLCDC is a multi-stage graphics output peripheral used in Renesas MCUs. It is designed to automatically generate timing and data signals for different LCD panels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:21
msgid "Supports LCD panels with RGB interface (up to 24 bits) and sync signals (HSYNC, VSYNC and Data Enable optional)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:22
msgid "Supports various color formats for input graphics planes (RGB888, ARGB8888, RGB565, ARGB1555, ARGB4444, CLUT8, CLUT4, CLUT1)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:23
msgid "Supports the Color Look-Up Table (CLUT) usage for input graphics planes (ARGB8888) with 512 words (32 bits/word)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:24
msgid "Supports various color formats for output (RGB888, RGB666, RGB565, Serial RGB888)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:25
msgid "Can input two graphics planes on top of the background plane and blend them on the screen"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:26
msgid "Generates a dot clock to the panel. The clock source is selectable from internal or external (LCD_EXTCLK)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:27
msgid "Supports brightness adjustment, contrast adjustment, and gamma correction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:28
msgid "Supports GLCDC interrupts to handle frame-buffer switching or underflow detection"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:31
msgid "Setting up a project and further integration with Renesas' ecosystem is described in detail on :ref:`page Renesas <renesas>`. Check out the following repositories for ready-to-use examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:34
msgid "`EK-RA8D1 <https://github.com/lvgl/lv_port_renesas_ek-ra8d1>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:35
msgid "`EK-RA6M3G <https://github.com/lvgl/lv_port_renesas_ek-ra6m3g>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:36
msgid "`RX72N Envision Kit <https://github.com/lvgl/lv_port_renesas_rx72n-envision-kit>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:42
msgid "This diver relies on code generated by e\\ |sup2| studio. Missing the step while setting up the project will cause a compilation error."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:43
msgid "Activate the diver by setting :c:macro:`LV_USE_RENESAS_GLCDC` to ``1`` in your ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:48
msgid "There is no need to implement any platform-specific functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:50
msgid "The following code demonstrates using the diver in :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_DIRECT` mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:60
msgid "Buffer swapping can be activated by passing a second buffer of same size instead of the :cpp:expr:`NULL` argument."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:71
msgid "Partial mode can be activated via the macro in ``src/board_init.c`` file of the demo projects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:75
msgid "Screen rotation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:77
msgid "Software based screen rotation is supported in partial mode. It uses the common API, no extra configuration is required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/renesas_glcdc.rst:87
msgid "Make sure the heap is large enough, as a buffer with the same size as the partial buffer will be allocated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:3
msgid "ST7735 LCD Controller driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:8
msgid "The `ST7735S <https://www.buydisplay.com/download/ic/ST7735S.pdf>`__ is a single-chip controller/driver for 262K-color, graphic type TFT-LCD. It consists of 396 source line and 162 gate line driving circuits. This chip is capable of connecting directly to an external microprocessor, and accepts Serial Peripheral Interface (SPI), 8-bit/9-bit/16-bit/18-bit parallel interface. Display data can be stored in the on-chip display data RAM of 132 x 162 x 18 bits. It can perform display data RAM read/write operation with no external operation clock to minimize power consumption. In addition, because of the integrated power supply circuits necessary to drive liquid crystal, it is possible to make a display system with fewer components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:16
msgid "The ST7735 LCD controller `driver <https://github.com/lvgl/lvgl/src/drivers/display/st7735>`__ is a platform-agnostic driver, based on the `generic MIPI driver <https://github.com/lvgl/lvgl/doc/integration/drivers/display/gen_mipi.rst>`__. It implements display initialization, supports display rotation and implements the display flush callback. The user needs to implement only two platform-specific functions to send a command or pixel data to the controller via SPI or parallel bus. Typically these are implemented by calling the appropriate SDK library functions on the given platform."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:28
msgid "Enable the ST7735 driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7735.rst:53
msgid "To create an ST7735-based display use the function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:3
msgid "ST7789 LCD Controller driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:8
msgid "The `ST7789 <https://www.buydisplay.com/download/ic/ST7789.pdf>`__ is a single-chip controller/driver for 262K-color, graphic type TFT-LCD. It consists of 720 source line and 320 gate line driving circuits. This chip is capable of connecting directly to an external microprocessor, and accepts, 8-bits/9-bits/16-bits/18-bits parallel interface. Display data can be stored in the on-chip display data RAM of 240x320x18 bits. It can perform display data RAM read/write operation with no external operation clock to minimize power consumption. In addition, because of the integrated power supply circuit necessary to drive liquid crystal; it is possible to make a display system with the fewest components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:15
msgid "The ST7789 LCD controller `driver <https://github.com/lvgl/lvgl/src/drivers/display/st7789>`__ is a platform-agnostic driver, based on the `generic MIPI driver <https://github.com/lvgl/lvgl/doc/integration/drivers/display/gen_mipi.rst>`__. It implements display initialization, supports display rotation and implements the display flush callback. The user needs to implement only two platform-specific functions to send a command or pixel data to the controller via SPI or parallel bus. Typically these are implemented by calling the appropriate SDK library functions on the given platform."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:27
msgid "Enable the ST7789 driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7789.rst:52
msgid "To create an ST7789-based display use the function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:3
msgid "ST7796 LCD Controller driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:8
msgid "The `ST7796S <https://www.buydisplay.com/download/ic/ST7796S.pdf>`__ is a single-chip controller/driver for 262K-color, graphic type TFT-LCD. It consists of 960 source lines and 480 gate lines driving circuits. The ST7796S is capable of connecting directly to an external microprocessor, and accepts 8-bit/9-bit/16-bit/18-bit parallel interface, SPI, and the ST7796S also provides MIPI interface. Display data can be stored in the on-chip display data RAM of 320x480x18 bits. It can perform display data RAM read-/write-operation with no external clock to minimize power consumption. In addition, because of the integrated power supply circuit necessary to drive liquid crystal; it is possible to make a display system with fewest components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:16
msgid "The ST7796 LCD controller `driver <https://github.com/lvgl/lvgl/src/drivers/display/st7796>`__ is a platform-agnostic driver, based on the `generic MIPI driver <https://github.com/lvgl/lvgl/doc/integration/drivers/display/gen_mipi.rst>`__. It implements display initialization, supports display rotation and implements the display flush callback. The user needs to implement only two platform-specific functions to send a command or pixel data to the controller via SPI or parallel bus. Typically these are implemented by calling the appropriate SDK library functions on the given platform."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:28
msgid "Enable the ST7796 driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:53
msgid "To create an ST7796-based display use the function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st7796.rst:70
msgid "For additional details and a working example see the `generic MIPI driver documentation <https://github.com/lvgl/lvgl/blob/master/docs/src/details/integration/driver/display/gen_mipi.rst>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:5
msgid "STM32 LTDC Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:7
msgid "Some STM32s have a specialized peripheral for driving displays called LTDC (LCD-TFT display controller)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:11
msgid "Usage Modes With LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:13
msgid "The driver within LVGL is designed to work with an already-configured LTDC peripheral. It relies on the HAL to detect information about the configuration. The color format of the created LVGL display will match the LTDC layer's color format. Use STM32CubeIDE or STM32CubeMX to generate LTDC initialization code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:20
msgid "There are some different use cases for LVGL's driver. All permutations of the below options are well supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:23
msgid "single or double buffered"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:24
msgid "direct or partial render mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:25
msgid "OS and no OS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:26
msgid "parallelized flushing with DMA2D (only for partial render mode)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:28
msgid "If OS is enabled, a synchronization primitive will be used to give the thread a chance to yield to other threads while blocked, improving CPU utilization. See :c:macro:`LV_USE_OS` in your lv_conf.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:33
msgid "LTDC Layers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:35
msgid "This driver creates an LVGL display which is only concerned with a specific layer of the LTDC peripheral, meaning two LVGL LTDC displays can be created and operate independently on the separate layers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:41
msgid "Direct Render Mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:43
msgid "For direct render mode, invoke :cpp:func:`lv_st_ltdc_create_direct` like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:53
msgid "``my_ltdc_framebuffer_address`` is the framebuffer configured for use by LTDC. ``optional_other_full_size_buffer`` can be another buffer which is the same size as the default framebuffer for double-buffered mode, or ``NULL`` otherwise. ``my_ltdc_layer_index`` is the layer index of the LTDC layer to create the display for."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:59
msgid "For the best visial results, ``optional_other_full_size_buffer`` should be used if enough memory is available. Single-buffered mode is what you should use if memory is very scarce. If there is almost enough memory for double-buffered direct mode, but not quite, then use partial render mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:64
msgid "To clarify what ``my_ltdc_framebuffer_address`` exactly is, it's the value of ``pLayerCfg.FBStartAdress`` when the LTDC layer is configured using the STM32 HAL, which is written to the ``CFBAR`` register of the LTDC layer peripheral."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:72
msgid "Partial Render Mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:74
msgid "For partial render mode, invoke :cpp:func:`lv_st_ltdc_create_partial` like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:86
msgid "The driver will use the information in the LTDC layer configuration to find the layer's framebuffer and flush to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:89
msgid "Providing a second partial buffer can improve CPU utilization and increase performance compared to a single buffer if :c:macro:`LV_ST_LTDC_USE_DMA2D_FLUSH` is enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:95
msgid "Linker Script"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:100
msgid "You should ensure the LTDC framebuffer memory is actually reserved in the linker script. This is a file that normally has the extension ``.ld``. In the below example, ``1125K`` is specified because the color depth is 24 (3 bytes per pixel), the display width is 800, the display height is 480, and ``1K`` means 1024 bytes. 3 |times| 800 |times| 480 |divide| 1024 = 1125. You should ensure the sum of the RAM entries (``FB_RAM`` + ``RAM``) equals the total RAM of the device."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:119
#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:162
msgid "Display Rotation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:121
msgid "The driver supports display rotation with :cpp:expr:`lv_display_set_rotation(disp, rotation)` where rotation is one of :cpp:enumerator:`LV_DISP_ROTATION_90`, :cpp:enumerator:`LV_DISP_ROTATION_180`, or :cpp:enumerator:`LV_DISP_ROTATION_270`. The rotation is initially :cpp:enumerator:`LV_DISP_ROTATION_0`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:127
msgid "The rotation is done in software and only works if the display was created using :cpp:func:`lv_st_ltdc_create_partial`. :c:macro:`LV_ST_LTDC_USE_DMA2D_FLUSH` will be have no effect if rotation is used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:133
#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:99
msgid "DMA2D"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:135
msgid ":c:macro:`LV_ST_LTDC_USE_DMA2D_FLUSH` can be enabled to use DMA2D to flush partial buffers in parallel with other LVGL tasks, whether or not OS is enabled. If the display is not partial, then there is no need to enable this option."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:140
msgid "Additionally it is possible to mix layers that have color format on :c:macro:`LV_COLOR_FORMAT_ARGB1555` on top of :c:macro:`LV_COLOR_FORMAT_RGB565` layers using the DMA2D."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:144
msgid "It must not be enabled at the same time as :c:macro:`LV_USE_DRAW_DMA2D`. See the :ref:`DMA2D support <dma2d>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:150
msgid "You may be interested in enabling the :ref:`Nema GFX renderer <nema_gfx>` if your STM32 has a NeoChrom GPU."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/display/st_ltdc.rst:153
msgid "`lv_port_riverdi_stm32u5 <https://github.com/lvgl/lv_port_riverdi_stm32u5>`__ is a way to quick way to get started with LTDC on LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/index.rst:5
msgid "Drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:3
msgid "Libinput Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:8
msgid "Libinput is an input stack for processes that need to provide events from commonly used input devices. That includes mice, keyboards, touchpads, touchscreens and graphics tablets. Libinput handles device-specific quirks and provides an easy-to-use API to receive events from devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:14
msgid "You have the development version of libinput installed (usually ``libinput-dev``). If your input device requires quirks, make sure they are installed as well (usually in ``/usr/share/libinput/*.quirks``). To test if your device is set up correctly for use with libinput, you can run ``libinput list-devices``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:32
msgid "If your device doesn't show up, you may have to configure udev and the appropriate udev rules to connect it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:34
msgid "Additionally, if you want full keyboard support, including letters and modifiers, you'll need the development version of libxkbcommon installed (usually ``libxkbcommon-dev``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:40
msgid "Enable the libinput driver support in lv_conf.h, by cmake compiler define or by KConfig."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:46
msgid "Full keyboard support needs to be enabled separately."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:53
msgid "To find the right key map values, you may use the ``setxkbmap -query`` command."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:58
msgid "To set up an input device via the libinput driver, all you need to do is call ``lv_libinput_create`` with the respective device type (``LV_INDEV_TYPE_POINTER`` or ``LV_INDEV_TYPE_KEYPAD``) and device node path (e.g. ``/dev/input/event5``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:65
msgid "Note that touchscreens are treated as (absolute) pointer devices by the libinput driver and require ``LV_INDEV_TYPE_POINTER``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:67
msgid "Depending on your system, the device node paths might not be stable across reboots. If this is the case, you can use ``lv_libinput_find_dev`` to find the first device that has a specific capability."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:74
msgid "The second argument controls whether or not all devices are rescanned. If you have many devices connected this can get quite slow. Therefore, you should only specify ``true`` on the first call when calling this method multiple times in a row. If you want to find all devices that have a specific capability, use ``lv_libinput_find_devs``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/libinput.rst:78
msgid "If you want to connect a keyboard device to a textarea, create a dedicated input group and set it on both the indev and textarea."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:5
msgid "OpenGL ES Display/Inputs Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:10
msgid "The **OpenGL ES** display/input `driver <https://github.com/lvgl/lvgl/tree/master/src/drivers/glfw/lv_opengles_driver.c>`__ offers support for simulating the LVGL display and keyboard/mouse inputs in an desktop window created via GLFW."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:17
msgid "The main purpose for this driver is for testing/debugging the LVGL application in an **OpenGL** simulation window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:23
msgid "The OpenGL driver uses GLEW GLFW to access the OpenGL window manager."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:25
msgid "Install GLEW and GLFW: ``sudo apt-get install libglew-dev libglfw3-dev``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:28
msgid "Configure OpenGL Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:30
msgid "Required linked libraries: -lGL -lGLEW -lglfw"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:31
msgid "Enable the OpenGL driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:37
#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:39
msgid "Basic Usage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:87
msgid "Advanced Usage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:89
msgid "The OpenGL driver can draw textures from the user. A third-party library could be used to add content to a texture and the driver will draw the texture in the window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:207
msgid "OpenGL Texture Caching Renderer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:209
msgid "There is a renderer in LVGL which caches software-rendered areas as OpenGL textures. The textures are retrieved from the cache and reused when there is a match. The performance will be drastically improved in most cases."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:218
msgid "Known Limitations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:220
msgid "Performance will be the same or slightly worse if the drawn areas are never found in the cache due to Widgets with continuously varying colors or shapes. One example is a label whose color is set to a random value every frame, as in the \"Multiple labels\" scene of the benchmark demo."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:223
msgid "Layers with transparent pixels and an overall layer transparency will not blend correctly. The effect can be observed in the \"Containers with opa_layer\" scene of the benchmark demo in the border corners."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/opengles.rst:226
msgid "Layers with rotation are not currently supported. Images with rotation are fine."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:5
msgid "SDL Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:10
msgid "SDL (Simple DirectMedia Layer) provides a cross-platform way to handle graphics, input, and multimedia, making it an excellent choice for running LVGL applications on a PC."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:18
msgid "Install SDL according to your platform."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:20
msgid "Linux ``sudo apt install libsdl2-dev``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:21
msgid "MacOS ``brew install sdl2``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:22
msgid "Windows https://github.com/libsdl-org/SDL/releases"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:26
msgid "Configure SDL Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:28
msgid "Required linked libraries: -lSDL2"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:29
msgid "Enable SDL driver support in lv_conf.h, CMake compiler definitions or KConfig."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:104
msgid "Using an IDE"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:106
msgid "LVGL with SDL has been ported to various IDEs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:108
#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:28
msgid "`Eclipse with SDL driver <https://github.com/lvgl/lv_sim_eclipse_sdl>`__: Recommended on Linux and Mac, supports CMake as well"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:109
#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:30
msgid "`VSCode with SDL driver <https://github.com/lvgl/lv_port_pc_vscode>`__: Recommended on Linux (SDL) and Mac (SDL)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/sdl.rst:110
#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:33
msgid "`Generic Linux <https://github.com/lvgl/lv_port_linux>`__: CMake based project where you can easily switch between fbdev, DRM, and SDL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:3
msgid "Linux Evdev Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:8
msgid "The Linux event device (evdev) is a hardware-independent API that gives access to input events from, for example, a mouse or touchscreen. It is exposed via the Linux device file system interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:14
msgid "Your system has an input device configured (usually under ``/dev/input/`` such as ``/dev/input/event0``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:19
msgid "Enable the Linux LVGL evdev driver support in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:28
msgid "To set up an event input, first create an input device with ``lv_edev_create`` setting it to the correct Linux event device. Then link this to the LVGL display with ``lv_indev_set_display``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:36
msgid "Ensure that an ``lv_display_t`` object is already created for ``disp``. An example for this is shown below, using the Linux framebuffer driver."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:45
msgid "Locating your input device"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:47
msgid "If you can't determine your input device, first run"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:49
msgid "```$cat /proc/bus/input/devices```"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:51
msgid "This should show input devices and there will be entries with the word ``event`` which give a clue as to the device to use eg. ``event1`` would be ``/dev/input/event1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:53
msgid "You can use ``evtest`` to show data from that event source to see if it is actually the one you want."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:55
msgid "Try:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:57
msgid "``$evtest /dev/input/event1`` replacing ``eventX`` with your event device from above."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:60
msgid "Automatic input device discovery"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:62
msgid "There is support for automatically finding and adding input devices in ``/dev/input/``. New devices will automatically be added when they are connected. To enable this feature, you can simply call :cpp:expr:`lv_evdev_discovery_start(NULL, NULL)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:65
msgid "You may want to react to a new device being added so that a cursor image can be applied, for example. You can provide a callback function which will be called when a new device is added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/evdev.rst:102
msgid "At the time of writing, this feature is not supported in BSD."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/touchpad/index.rst:3
msgid "Touchpad"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:3
msgid "UEFI Display/Inputs driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:8
msgid "The **UEFI** display/input `driver <https://github.com/lvgl/lvgl/src/drivers/uefi>`__ offers support for using LVGL with UEFI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:13
msgid "You need the following protocols available:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:15
msgid "*EFI_LOADED_IMAGE_PROTOCOL_GUID*, for file system support (used to determine the file system that was used to load the application)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:16
msgid "*EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID*, for file system support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:17
msgid "*EFI_SIMPLE_TEXT_INPUT_EX_PROTOCOL_GUID*, for keyboard support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:18
msgid "*EFI_SIMPLE_POINTER_PROTOCOL_GUID*, for mouse support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:19
msgid "*EFI_ABSOLUTE_POINTER_PROTOCOL_GUID*, for touch support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:20
msgid "*EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID*, for drawing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:21
msgid "*EFI_EDID_ACTIVE_PROTOCOL_GUID*, for drawing (optional)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:24
msgid "Configure UEFI driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:26
msgid "Enable the UEFI driver support in lv_conf.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:32
msgid "Enable the the memory core functions, which are wrappers around AllocatePool and FreePool (using memory of type *EfiBootServicesData*) if you do not wan't to use your own implementations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:38
msgid "You can enable file system support for the file system from which the application got loaded (default letter 'E')"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/uefi.rst:44
msgid "You need to define an include file which contains the basic UEFI definitions (protocols and types), there are 2 predefined files which can be used for EDK2 and gnu-efi"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:5
msgid "Wayland Display/Inputs driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:10
msgid "The **Wayland** `driver <https://github.com/lvgl/lvgl/tree/master/src/drivers/wayland>`__ offers support for simulating the LVGL display and keyboard/mouse inputs in a desktop window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:14
msgid "It is an alternative to **X11** or **SDL2**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:16
msgid "The main purpose for this driver is for testing/debugging the LVGL application. It can also be used to run applications in \"kiosk mode\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:22
msgid "The wayland driver requires some dependencies."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:24
msgid "On Ubuntu"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:30
msgid "On Fedora"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:38
msgid "Configuring the wayland driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:40
msgid "Enable the wayland driver in ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:48
msgid "Some optional settings depend on whether DMA buffer support is enabled (`LV_WAYLAND_USE_DMABUF`). The table below summarizes valid combinations and limitations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:50
msgid "Configuration possibilities"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:54
msgid "Configuration Option"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:55
msgid "Without DMABUF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:56
msgid "With DMABUF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:58
msgid "`LV_DRAW_USE_G2D`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:59
msgid "Not required"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:60
msgid "**Required**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:62
msgid "`LV_WAYLAND_BUF_COUNT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:63
msgid "`1`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:64
msgid "`1` or `2`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:66
msgid "`LV_WAYLAND_RENDER_MODE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:67
msgid "`LV_DISPLAY_RENDER_MODE_PARTIAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:68
msgid "`LV_DISPLAY_RENDER_MODE_DIRECT` or `LV_DISPLAY_RENDER_MODE_FULL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:70
msgid "`LV_WAYLAND_WINDOW_DECORATIONS`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:71
msgid "`1` or `0`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:72
msgid "`0`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:74
msgid "`LV_WAYLAND_WL_SHELL` (**Deprecated**)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:75
#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:76
msgid "Optional (`1` or `0`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:79
msgid "Additional notes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:81
msgid "DMABUF support (`LV_WAYLAND_USE_DMABUF`) improves performance and enables more render modes but has specific requirements and restrictions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:82
msgid "`LV_WAYLAND_WINDOW_DECORATIONS` is only required for some compositors (e.g., GNOME/Mutter or Weston)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:83
msgid "`LV_WAYLAND_WL_SHELL` Enables support for the deprecated `wl_shell`. Only useful when the BSP on the target has weston ``9.x``. (**Deprecated** and will be removed in a future release)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:88
#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:153
msgid "An example simulator is available in this `repo <https://github.com/lvgl/lv_port_linux/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:93
msgid "In ``main.c`` ``#include \"lv_drivers/wayland/wayland.h\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:94
msgid "Enable the Wayland driver in ``lv_conf.h`` with ``LV_USE_WAYLAND 1``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:96
msgid "``LV_COLOR_DEPTH`` should be set either to ``32`` or ``16`` in ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:98
msgid "Add a display using ``lv_wayland_window_create()``, possibly with a close callback to track the status of each display:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:110
msgid "As part of the above call, the Wayland driver will register four input devices for each display:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:113
msgid "a KEYPAD connected to Wayland keyboard events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:114
msgid "a POINTER connected to Wayland touch events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:115
msgid "a POINTER connected to Wayland pointer events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:116
msgid "an ENCODER connected to Wayland pointer axis events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:118
msgid "Handles for input devices of each display can be obtained using ``lv_wayland_get_indev_keyboard()``, ``lv_wayland_get_indev_touchscreen()``, ``lv_wayland_get_indev_pointer()`` and ``lv_wayland_get_indev_pointeraxis()`` respectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:123
msgid "Fullscreen mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:125
msgid "To programmatically fullscreen the window, use the ``lv_wayland_window_set_fullscreen()`` function respectively with ``true`` or ``false`` for the ``fullscreen`` argument."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:130
msgid "Maximized mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:132
msgid "To programmatically maximize the window, use the ``lv_wayland_window_set_maximized()`` function respectively with ``true`` or ``false`` for the ``maximized`` argument."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:138
msgid "Custom timer handler"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:140
msgid "Always call ``lv_wayland_timer_handler()`` in your timer loop instead of the regular ``lv_timer_handler()``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:142
msgid "**Note:** ``lv_wayland_timer_handler()`` internally calls ``lv_timer_handler()``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:144
msgid "This allows the wayland client to work well on weston, resizing shared memory buffers during a commit does not work well on weston."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:147
msgid "Wrapping the call to ``lv_timer_handler()`` is a necessity to have more control over when the LVGL flush callback is called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:151
msgid "Building the wayland driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:155
msgid "If there is a need to use driver with another build system. The source and header files for the XDG shell must be generated from the definitions for the XDG shell protocol."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:158
msgid "In the example CMake is used to perform the operation by invoking the ``wayland-scanner`` utility"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:160
msgid "To achieve this manually,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:162
msgid "Make sure the dependencies listed at the start of the article are installed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:164
msgid "The wayland protocol is defined using XML files which are present in ``/usr/share/wayland-protocols``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:166
msgid "To generate the required files run the following commands:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:173
msgid "When `LV_WAYLAND_USE_DMABUF` is set to `1`, the following protocols must also be generated:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:181
msgid "The resulting files can then be integrated into the project, it's better to re-run ``wayland-scanner`` on each build to ensure that the correct versions are generated, they must match the version of the ``wayland-client`` dynamically linked library installed on the system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:186
msgid "Current state and objectives"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:188
msgid "Add direct rendering mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:189
msgid "Refactor the shell integrations to avoid excessive conditional compilation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:190
msgid "Technically, the wayland driver allows to create multiple windows - but this feature is experimental."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:191
msgid "Eventually add enhanced support for XDG shell to allow the creation of desktop apps on Unix-like platforms, similar to what the win32 driver does."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:193
msgid "Add a support for Mesa, currently wl_shm is used and it's not the most effective technique."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:197
msgid "Bug reports"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:199
msgid "The wayland driver is currently under construction, bug reports, contributions and feedback are always welcome."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:201
msgid "It is however important to create detailed issues when a problem is encountered, logs and screenshots of the problem are of great help."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:203
msgid "Please enable ``LV_USE_LOG`` and launch the simulator executable like so"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:209
msgid "This will create a log file called ``debug`` in the ``/tmp`` directory, copy-paste the content of the file in the github issue. The log file contains LVGL logs and the wayland messages."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/wayland.rst:212
msgid "Be sure to replicate the problem quickly otherwise the logs become too big"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:3
msgid "Windows Display/Inputs driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:8
msgid "The **Windows** display/input `driver <https://github.com/lvgl/lvgl/src/drivers/windows>`__ offers support for simulating the LVGL display and keyboard/mouse inputs in a Windows Win32 window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:10
msgid "The main purpose for this driver is for testing/debugging the LVGL application in a **Windows** simulation window via **simulator mode**, or developing a standard **Windows** desktop application with LVGL via **application mode**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:12
msgid "These are the **similarities** between simulator mode and application mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:14
msgid "Support LVGL pointer, keypad and encoder devices integration."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:15
msgid "Support Windows touch input."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:16
msgid "Support Windows input method integration input."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:17
msgid "Support Per-monitor DPI Aware (both V1 and V2)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:18
msgid "Provide HWND-based interoperability for other Windows UI infrastructures."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:20
msgid "These are the **differences** between simulator mode and application mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:23
msgid "Simulator Mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:25
msgid "Designed for LVGL device-simulation scenario --- simulates LVGL rendering to a hardware display panel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:26
msgid "Keeps LVGL display resolution constant in order to best simulate UI layout which will will be seen in production devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:27
msgid "When Windows DPI scaling setting is changed, Windows backend will stretch display content."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:30
msgid "Application Mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:32
msgid "Designed for Windows desktop application-development scenario."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:33
msgid "Has Window resizing support and LVGL display resolution is changed dynamically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:34
msgid "When Windows DPI scaling setting is changed, LVGL display DPI value is also changed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:35
msgid "The resolution you set for lv_windows_create_display is the window size instead of window client size for following the convention of other Windows desktop UI infrastructures."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:36
msgid "The applications based on this mode should adapt the LVGL display resolution changing for supporting window resizing properly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:41
msgid "The minimum Windows OS requirement for this driver is Windows Vista RTM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:43
msgid "If you use Windows API shim libraries like `YY-Thunks <https://github.com/Chuyu-Team/YY-Thunks>`__, the tested minimum Windows OS requirement for this driver is Windows XP RTM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:47
msgid "According to the Windows GDI API this driver used, it is possible the minimum Windows OS requirement limitation for this driver is Windows 2000 RTM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:51
msgid "Configure Windows Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/driver/windows.rst:53
msgid "Enable the Windows driver support in lv_conf.h, by cmake compiler define or by KConfig"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:3
msgid "Arduino"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:5
msgid "The `LVGL library <https://github.com/lvgl/lvgl>`__ is directly available as Arduino libraries."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:7
msgid "Note that you need to choose a board powerful enough to run LVGL and your GUI. See the :ref:`requirements of LVGL <requirements>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:10
msgid "For example ESP32 is a good candidate to create UI's with LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:12
msgid "If you are using the Arduino GIGA Display Shield (docs `here <https://docs.arduino.cc/hardware/giga-display-shield>`__), use the `Arduino_H7_Video <https://github.com/arduino/ArduinoCore-mbed/tree/main/libraries/Arduino_H7_Video>`__ library, included in the Arduino Mbed OS board package (`here <https://github.com/arduino/ArduinoCore-mbed>`__), which provides built-in LVGL compatibility."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:15
msgid "Get the LVGL Arduino library"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:17
msgid "LVGL can be installed via the Arduino IDE Library Manager or as a .ZIP library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:19
msgid "You can `Download <https://github.com/lvgl/lvgl/archive/refs/heads/master.zip>`__ the latest version of LVGL from GitHub and simply copy it to Arduino's library folder."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:24
msgid "Set up drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:26
msgid "To get started it's recommended to use `TFT_eSPI <https://github.com/Bodmer/TFT_eSPI>`__ library as a TFT driver to simplify testing. To make it work, setup ``TFT_eSPI`` according to your TFT display type via editing either:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:30
msgid "``User_Setup.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:31
msgid "or by selecting a configuration in the ``User_Setup_Select.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:33
msgid "Both files are located in ``TFT_eSPI`` library's folder."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:37
msgid "Configure LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:39
msgid "LVGL has its own configuration file called ``lv_conf.h``. When LVGL is installed, follow these configuration steps:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:42
msgid "Go to the directory of the installed Arduino libraries"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:43
msgid "Go to ``lvgl`` and copy ``lv_conf_template.h`` as ``lv_conf.h`` into the Arduino Libraries directory next to the ``lvgl`` library folder."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:44
msgid "Open ``lv_conf.h`` and change the first ``#if 0`` to ``#if 1`` to enable the content of the file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:45
msgid "Set the color depth of you display in :c:macro:`LV_COLOR_DEPTH`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:47
msgid "Finally the layout with ``lv_conf.h`` should look like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:60
msgid "Initialize and run LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:62
msgid "Take a look at `LVGL_Arduino.ino <https://github.com/lvgl/lvgl/blob/master/examples/arduino/LVGL_Arduino/LVGL_Arduino.ino>`__ to see how to initialize LVGL. ``TFT_eSPI`` is used as the display driver."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:65
msgid "In the INO file you can see how to register a display and a touchpad for LVGL and call an example."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:70
msgid "Use the examples and demos"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:72
msgid "Note that, there is no dedicated INO file for every example. Instead, you can load an example by calling an ``lv_example_...`` function. For example :cpp:func:`lv_example_btn_1`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:0
msgid "important"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:76
msgid "Due to some the limitations of Arduino's build system you need to copy ``lvgl/examples`` to ``lvgl/src/examples``. Similarly for the demos ``lvgl/demos`` to ``lvgl/src/demos``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:82
msgid "Debugging and logging"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:84
msgid "LVGL can display debug information in case of trouble. In the ``LVGL_Arduino.ino`` example there is a ``my_print`` method, which sends this debug information to the serial interface. To enable this feature you have to edit the ``lv_conf.h`` file and enable logging in the section ``log settings``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/arduino.rst:104
msgid "After enabling the log module and setting :c:macro:`LV_LOG_LEVEL` accordingly, the output log is sent to the ``Serial`` port @ 115200 bps."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/index.rst:3
msgid "Frameworks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/platformio.rst:3
msgid "PlatformIO"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:3
msgid "Tasmota and berry"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:6
msgid "What is Tasmota?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:8
msgid "`Tasmota <https://github.com/arendst/Tasmota>`__ is a widely used open-source firmware for ESP8266 and ESP32 based devices. It supports a wide variety of devices, sensors and integrations to Home Automation and Cloud services. Tasmota firmware is downloaded more than 200,000 times each month, and has an active and growing community."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:14
msgid "Tasmota provides access to hundreds of supported devices, full support of MQTT, HTTP(S), integration with major Home Automation systems, myriad of sensors, IR, RF, Zigbee, Bluetooth, AWS IoT, Azure IoT, Alexa and many more."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:20
msgid "What is Berry?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:22
msgid "`Berry <https://github.com/berry-lang/berry>`__ is a ultra-lightweight dynamically typed embedded scripting language. It is designed for lower-performance embedded devices. The interpreter of Berry include a one-pass compiler and register-based VM, all the code is written in ANSI C99. Berry offers a syntax very similar to Python, and is inspired from LUA VM. It is fully integrated in Tasmota"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:30
msgid "Highlights of Berry"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:32
msgid "Berry has the following advantages:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:34
msgid "Lightweight: A well-optimized interpreter with very little resources. Ideal for use in microprocessors."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:35
msgid "Fast: optimized one-pass bytecode compiler and register-based virtual machine."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:36
msgid "Powerful: supports imperative programming, object-oriented programming, functional programming."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:37
msgid "Flexible: Berry is a dynamic type script, and it's intended for embedding in applications. It can provide good dynamic scalability for the host system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:39
msgid "Simple: simple and natural syntax, support garbage collection, and easy to use FFI (foreign function interface)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:40
msgid "RAM saving: With compile-time object construction, most of the constant objects are stored in read-only code data segments, so the RAM usage of the interpreter is very low when it starts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:43
msgid "All features are detailed in the `Berry Reference Manual <https://github.com/berry-lang/berry/wiki/Reference>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:48
msgid "Why LVGL + Tasmota + Berry?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:50
msgid "In 2021, Tasmota added full support of LVGL for ESP32 based devices. It also introduced the Berry scripting language, a small-footprint language similar to Python and fully integrated in Tasmota."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:54
msgid "A comprehensive mapping of LVGL in Berry language is now available, similar to the mapping of MicroPython. It allows to use +98% of all LVGL features. It is also possible to write custom widgets in Berry."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:58
msgid "Versions supported: LVGL v8.0.2, LodePNG v20201017, Freetype 2.10.4"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:61
msgid "Tasmota + Berry + LVGL could be used for:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:63
msgid "Fast prototyping GUI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:64
msgid "Shortening the cycle of changing and fine-tuning the GUI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:65
msgid "Modelling the GUI in a more abstract way by defining reusable composite Widgets, taking advantage of Berry's language features such as Inheritance, Closures, Exception Handling…"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:67
msgid "Make LVGL accessible to a larger audience. No need to know C to create a nice GUI on an embedded system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:69
msgid "A higher level interface compatible with `OpenHASP <https://github.com/HASwitchPlate/openHASP>`__ is also under development."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:76
msgid "So what does it look like?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:78
msgid "TL;DR: Similar to MicroPython, it's very much like the C API, but Object-Oriented for LVGL components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:95
msgid "How can I use it?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:97
msgid "You can start in less than 10 minutes on a M5Stack or equivalent device in less than 10 minutes in this `short tutorial <https://tasmota.github.io/docs/LVGL_in_10_minutes/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:103
msgid "`Tasmota Documentation <https://tasmota.github.io/docs/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:104
msgid "`Berry Documentation <https://github.com/berry-lang/berry/wiki/Reference>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/framework/tasmota-berry.rst:105
msgid "`Tasmota LVGL Berry documentation <https://tasmota.github.io/docs/LVGL/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/index.rst:3
msgid "IDEs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/mdk.rst:3
msgid "MDK"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:5
msgid "Simulator on PC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:7
msgid "You can try out LVGL **using only your PC** (i.e. without any development boards). LVGL will run on a simulator environment on the PC where anyone can write and experiment with real LVGL applications."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:11
msgid "Using the simulator on a PC has the following advantages:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:13
msgid "Hardware independent: Write code, run it on the PC and see the result on a monitor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:14
msgid "Cross-platform: Any Windows, Linux or macOS system can run the PC simulator."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:15
msgid "Portability: The written code is portable, which means you can simply copy it when migrating to embedded hardware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:16
msgid "Easy Validation: The simulator is also very useful to report bugs because it provides a common platform for every user."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:18
msgid "Better developer experience: On PC Debuggers are usually faster and better, you can log to files, add a lot of ``printf`` s, do profiling, and so on."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:23
msgid "Select an IDE"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:25
msgid "The simulator is ported to various IDEs (Integrated Development Environments). Choose your favorite IDE, read its README on GitHub, download the project, and load it to the IDE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:29
msgid "`VisualStudio <https://github.com/lvgl/lv_port_pc_visual_studio>`__: Recommended on Windows"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:31
msgid "`CodeBlocks <https://github.com/lvgl/lv_sim_codeblocks_win>`__: Recommended on Windows"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:32
msgid "`PlatformIO with SDL driver <https://github.com/lvgl/lv_platformio>`__: Recommended on Linux and Mac but has an STM32 environment as well"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:34
msgid "`MDK with FastModel <https://github.com/lvgl/lv_port_an547_cm55_sim>`__: For Windows"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:36
msgid "External project not maintained by the LVGL organization:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:38
msgid "`QT Creator <https://github.com/Varanda-Labs/lvgl-qt-sim>`__: Cross platform"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:41
msgid "Built-in drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:43
msgid "LVGL comes with several :ref:`built-in drivers <drivers>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:45
msgid "Even if a simulator project comes with e.g. SDL, you can easily replace it by enabling another driver in ``lv_conf.h`` and calling its ``create`` function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/ide/pc-simulator.rst:48
msgid "For example to use the Linux frame buffer device instead of SDL just enable ``LV_USE_LINUX_FBDEV`` and call"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/index.rst:5
msgid "Integration and Drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:2
msgid "RPi4 custom image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:4
msgid "This chapter offers a detailed guide for creating a custom image for the Raspberry Pi 4 (RPi4). Key Buildroot components and concepts will be introduced. The process outlined here can be adapted for use with other boards. For advanced features not covered in this guide, please consult the `Buildroot manual <https://buildroot.org/downloads/manual/manual.html>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:10
msgid "This guide was done on ``Ubuntu 22.04``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:13
msgid "Prepare the workspace"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:15
msgid "The workspace is structured to utilize Buildroot without any modifications. Execute the following commands:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:29
msgid "Each folder utility will be explained throughout the guide."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:32
msgid "Get Buildroot"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:34
msgid "First, according to the `Builroot Manual <https://buildroot.org/downloads/ manual/manual.html>`_, Buildroot requires certain packages to be installed before starting the build. Lets install them using Ubuntu's package manager."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:43
msgid "Now that we have satisfied all the prerequisites lets download a stable release of Buildroot."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:51
msgid "Create RPi4 image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:53
msgid "Let's see if there is already a configuration for RPi4 in Buildroot:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:60
msgid "There is a build available for RPi4 62 bits: ``raspberrypi4_64_defconfig``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:62
msgid "You can also find all the configurations in the Buildroot repository ``buildroot > configs``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:65
msgid "Start with this configuration as a base, but this configuration needs to be changed to meet lvgl requirements. So let's copy this base and keep it out of Buildroot."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:74
msgid "Create a new file ``build.sh`` at the root of the project with this content:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:86
msgid "Make this file executable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:93
msgid "Running this script creates an output folder that contains everything the process will generate:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:96
msgid "Fetched resources"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:97
msgid "Toolchain"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:98
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:5
msgid "Images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:100
msgid "This helps maintain a clean Buildroot directory. When the script is executed, an (almost) empty folder named ``output`` is created, as the build process has not yet begun."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:104
msgid "Let's modify the configuration with ``menuconfig``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:111
msgid "Change these configurations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:113
msgid "System host name to ``lvgl-buildroot`` under ``system_configuration > System hostname``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:114
msgid "Root password to ``lvgl-buildroot``  under ``system_configuration > Root password``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:115
msgid "Enable SSH in ``target-packages > Networking applications > openssh``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:119
#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:15
msgid "Build the image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:126
msgid "What happened?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:128
msgid "Let's explore the contents of the output folder and what it contains."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:131
msgid "build"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:133
msgid "This folder contains the intermediate files and build artifacts for the various packages that are being compiled. Each package has its own subdirectory within the ``build`` folder, where the build process takes place. It includes files such as configuration files, source code, and object files that are generated as part of the build process."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:140
msgid "host"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:142
msgid "The ``host`` folder contains files and binaries that are built for the host system rather than the target system. This includes tools and utilities that are needed to build packages or to run the build system itself. It may contain compilers, build tools, and libraries that are required to support the build process for the target."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:151
msgid "images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:153
msgid "This directory holds the final output images generated for the target system, such as filesystem images, kernel images, or bootloader images. Depending on the configuration, you may find files like ``rootfs.tar``, ``zImage``, ``uImage``, or others that are ready to be deployed onto the target hardware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:159
msgid "target"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:161
msgid "The ``target`` folder contains the files that are specifically intended for the target system. This includes the root filesystem and any additional files that will be included in the target environment. The structure within this folder often mimics the directory structure of a standard Linux system, containing directories like ``bin``, ``lib``, ``etc``, ``usr``, and others, which hold the binaries, libraries, configuration files, and other necessary components for the target system to function properly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:172
msgid "Flash the image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:174
msgid "Insert the SD card into the laptop and check its mount point. It is typically labeled as sda or sdb, but you can use the lsblk command to confirm this information."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:178
msgid "If it is mounted on /dev/sda, run the following command"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:184
msgid "As mentioned in :ref:`images`, the output image is in ``images`` and named ``sdcard.img``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:187
msgid "Connect an Ethernet cable to the RPi4 and ensure the laptop and the RPi4 are on the same network."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:190
msgid "You can use ``ifconfig`` or ``ip a`` to find your IP address. Then, use ``nmap`` or any tool to scan the network and find the IP address of the RPi4."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/image_generation.rst:198
msgid "All of this can be done with the UART instead of SSH if you don't want to connect the RPi4 to the network."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/index.rst:5
msgid "Buildroot"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/index.rst:7
msgid "Buildroot is a set of Makefiles and patches that simplifies and automates the process of building a complete and bootable Linux environment for an embedded system, while using cross-compilation to allow building for multiple target platforms on a single Linux-based development system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:2
msgid "LVGL application"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:4
msgid "This section provides information about the steps to follow to get a custom application using LVGL running on the board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:8
msgid "Update RootFS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:10
msgid "Depending on the application, it might be necessary to update the rootfs. Let's take as example the compilation of LVGL with DRM. The system must have ``libdrm`` installed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:19
msgid "To search for a string pattern in the configuration, press ``/`` followed by the desired pattern. For example, search for ``libdrm``. You should find ``BR2_PACKAGE_LIBDRM`` set to **[=n]**. The Location field indicates where to find this option. By pressing the corresponding number key (9-0), you can navigate directly to the option."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:25
msgid "In the ``Search Results`` window, the ``Depends on`` section lists the required packages or options that need to be enabled (or disabled) to make the target package configurable. For any package you wish to add, these dependencies must be met; otherwise, the option will remain hidden."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:30
msgid "When the package configuration is completed, build the environment to add the packages (``make`` in **output** folder)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:33
msgid "To verify the library was installed, we can find it in the target sysroot:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:39
msgid "You should see the include folder and the .so files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:44
msgid "Generate SDK and set up environment"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:46
msgid "Generate an SDK that you can use to cross-compile the application for the target (RPi4)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:53
msgid "A ``.tar.gz`` is generated in output/images. This is the SDK!"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:55
msgid "To use it, extract it anywhere."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:63
msgid "To set up the environment"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:70
msgid "The script ``setup-build-env.sh`` looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:95
msgid "Build the application"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:97
msgid "The environment is now set up, and we're ready to build an application using the ``lv_benchmark`` repository that is inspired from `lv_port_linux <https://github.com/lvgl/lv_port_linux>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:101
msgid "Navigate back to the root of the project and clone the repository:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:107
msgid "The application is configured to run on fbdev. You can either maintain the default configuration or modify it according to your preferences."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:110
msgid "Compile the application"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:118
msgid "Verify that the output executable was compiled with the correct toolchain:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:125
msgid "The output should contain these information:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:127
msgid "ARM aarch64"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:128
msgid "interpreter /lib/ld-linux-aarch64.so.1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:131
msgid "Set a rootfs overlay"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:133
msgid "In Buildroot, a rootfs overlay (or root filesystem overlay) is a mechanism that allows you to add custom files, directories, and configurations directly into the root filesystem of the target image during the build process. It is a way to extend or modify the content of the root filesystem without altering the base packages or recompiling everything."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:139
msgid "Create the rootfs overlay structure and include the executable of the built application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:147
msgid "Update the configuration."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:154
msgid "Find the rootfs overlay option ``System configuration > Root filesystem overlay directories`` and use the relative path to the rootfs overlay with your application (**../resources/board/rootfs_overlay**) and save the configuration."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:159
msgid "Now use ``make`` command to apply the rootfs overlay and confirm the sysroot was updated as expected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/lvgl_app.rst:166
msgid ":ref:`flash_the_image` and run the benchmark application on the board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:2
msgid "Quick Setup"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:4
msgid "A Git repository is available that includes everything needed to test the Buildroot setup without following the guide. It is intended for testing purposes and can be used if you are already familiar with Buildroot concepts and architecture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:9
msgid "Get the repository"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:21
msgid "At this point, you have an image that can be flashed on an SD and used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:23
msgid "Now build the SDK and install it"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:32
msgid "The SDK is installed. Compile the application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:42
msgid "Install the binary in the rootfs_overlay"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:48
msgid "Regenerate the image with the rootfs overlay updated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/buildroot/quick_setup.rst:55
msgid "Go to :ref:`flash_the_image` to test the system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/freertos.rst:3
msgid "FreeRTOS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/index.rst:3
msgid "(RT)OS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/mqx.rst:5
msgid "MQX RTOS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/mqx.rst:7
msgid "See `MQX RTOS's homepage <https://www.nxp.com/design/design-center/software/embedded-software/mqx-software-solutions/mqx-real-time-operating-system-rtos:MQXRTOS>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:3
msgid "NuttX RTOS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:6
msgid "What is NuttX?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:8
msgid "`NuttX <https://nuttx.apache.org/>`__ is a mature and secure real-time operating system (RTOS) with an emphasis on technical standards compliance and small size. It is scalable from 8-bit to 64-bit microcontrollers and microprocessors and compliant with the Portable Operating System Interface (POSIX) and the American National Standards Institute (ANSI) standards and with many Linux-like subsystems. The best way to think about NuttX is to think of it as a small Unix/Linux for microcontrollers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:18
msgid "Highlights of NuttX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:20
msgid "**Small** - Fits and runs in microcontrollers as small as 32 kB Flash and 8 kB of RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:22
msgid "**Compliant** - Strives to be as compatible as possible with POSIX and Linux."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:24
msgid "**Versatile** - Supports many architectures (ARM, ARM Thumb, AVR, MIPS, OpenRISC, RISC-V 32-bit and 64-bit, RX65N, x86-64, Xtensa, Z80/Z180, etc.)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:27
msgid "**Modular** - Its modular design allows developers to select only what really matters and use modules to include new features."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:29
msgid "**Popular** - NuttX is used by many companies around the world. Probably you already used a product with NuttX without knowing it was running NuttX."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:32
msgid "**Predictable** - NuttX is a preemptible Realtime kernel, so you can use it to create predictable applications for realtime control."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:36
msgid "Why NuttX + LVGL?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:38
msgid "Although NuttX has its own graphic library called `NX <https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=139629474>`__, LVGL is a good alternative because users could find more eye-candy demos and they can reuse code from previous projects. LVGL is an `Object-Oriented Component Based <https://blog.lvgl.io/2018-12-13/extend-lvgl-objects>`__ high-level GUI library, that could fit very well for a RTOS with advanced features like NuttX. LVGL is implemented in C and its APIs are in C."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:49
msgid "Here are some advantages of using LVGL in NuttX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:51
msgid "Develop GUI in Linux first and when it is done just compile it for NuttX. Nothing more, no wasting of time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:53
msgid "Usually, GUI development for low level RTOS requires multiple iterations to get things right, where each iteration consists of **Change code > Build > Flash > Run**. Using LVGL, Linux and NuttX you can reduce this process and just test everything on your computer and when it is done, compile it on NuttX and that is it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:61
msgid "NuttX + LVGL could be used for"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:63
msgid "GUI demos to demonstrate your board graphics capacities."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:64
msgid "Fast prototyping GUI for MVP (Minimum Viable Product) presentation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:65
msgid "visualize sensor data directly and easily on the board without using a computer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:67
msgid "Final products with a GUI without a touchscreen (i.e. 3D Printer Interface using Rotary Encoder to Input data)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:69
msgid "Final products with a touchscreen (and all sorts of bells and whistles)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:73
msgid "How to get started with NuttX and LVGL?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:75
msgid "There are many boards in the `NuttX mainline <https://github.com/apache/incubator-nuttx>`__ with support for LVGL. Let's use the `STM32F429IDISCOVERY <https://www.st.com/en/evaluation-tools/32f429idiscovery.html>`__ as an example because it is a very popular board."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:82
msgid "First you need to install the pre-requisites on your system"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:84
msgid "Let's use the `Windows Subsystem for Linux <https://acassis.wordpress.com/2018/01/10/how-to-build-nuttx-on-windows-10/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:92
msgid "Now let's create a workspace to save our files"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:100
msgid "Clone the NuttX and Apps repositories"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:108
msgid "NuttX Simulator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:110
msgid "The NuttX simulator allows you to run NuttX and LVGL on your PC. This can be especially useful for developing LVGL UIs with immediate visual feedback, and also developing platform independent NuttX apps."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:115
msgid "Configure NuttX to use the ``sim`` board and the LVGL Demo"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:122
msgid "If everything went fine you should have now the file ``nuttx``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:130
msgid "Running the NuttX Simulator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:136
msgid "Using the ``NSH>`` terminal start the LVGL demo:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:143
msgid "NuttX On-Device"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:145
msgid "If you don't have an STM32F429I-DISCO, this process will be similar for other boards."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:149
msgid "Configure NuttX to use the stm32f429i-disco board and the LVGL Demo"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:156
msgid "If everything went fine you should have now the file ``nuttx.bin`` to flash on your board:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:165
msgid "Flashing the firmware in the board using OpenOCD"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:171
msgid "Reset the board and using the 'NSH>' terminal start the LVGL demo:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:178
msgid "Custom Usage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:180
msgid "The example app called ``lvgldemo`` uses LVGL's NuttX integration to run the demos in NuttX."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:183
msgid "https://github.com/apache/nuttx-apps/tree/master/examples/lvgldemo"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:185
msgid "It is used by all LVGL defconfigs. See ``sim:lvgl_fb`` and ``sim:lvgl_lcd``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:187
msgid "You can use it as a reference for adding LVGL to your own NuttX app. Start by copying the contents of ``lvgldemo.c``. It handles fb and lcd based display drivers, the touchscreen input driver, and libuv."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:192
msgid "NuttX Driver Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:194
msgid "**fbdev** - LVGL can create a display for ``/dev/fb*`` devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:195
msgid "**lcd** - LVGL can create a display for ``/dev/lcd*`` devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:196
msgid "**input/uinput touchscreen** - LVGL can create an indev(s) for touch devices that use the NuttX input/uinput system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:198
msgid "**libuv** - LVGL has support for using libuv as its event loop manager. libuv apps can integrate seamlessly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:201
msgid "There is no support for input/uinput keyboards yet. The NuttX X11 sim keyboard driver emits keycodes that are not standard so the LVGL integration with it would not be generic, if it were added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:206
msgid "Other Integrations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:208
msgid "LVGL+NuttX profiler integration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:209
msgid "Optional dedicated image cache heap"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:212
#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:109
msgid "Configurations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:214
msgid "The LVGL library is a NuttX \"app\". You can configure LVGL in ``menuconfig``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:221
msgid "The LVGL `Kconfig` file provides the available config options to the NuttX build system. The LVGL configs in ``menuconfig`` can be found under **Application Configuration > Graphics Support > Light and Versatile Graphic Library (LVGL) > LVGL configuration**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:226
msgid "To find the location of a specific config, Press the \"/\" key to open a search interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:228
msgid "Here are some configurations that you can use to customize your NuttX and LVGL setup:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:230
msgid "**LV_USE_NUTTX_INDEPENDENT_IMAGE_HEAP** - You can enable or disable the LVGL image heap in NuttX. By default, it is disabled. If you enable it, LVGL will use the NuttX heap instead."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:234
msgid "Using :c:macro:`LV_STDLIB_CLIB` for :c:macro:`LV_USE_STDLIB_MALLOC`, :c:macro:`LV_USE_STDLIB_STRING`, or :c:macro:`LV_USE_STDLIB_SPRINTF` is reasonable as NuttX fully implements these standard library APIs. Whether or not you choose to use NuttX's ``malloc`` depends on whether you want LVGL to allocate from the NuttX global heap or use its own."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:241
msgid "Where is ``LV_OS_NUTTX``?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:243
msgid "NuttX tries to be POSIX compliant where possible, meaning it supports pthreads (POSIX threads). To enable OS features in LVGL on NuttX, set :c:macro:`LV_USE_OS` to :c:macro:`LV_OS_PTHREAD`. The main reason for enabling OS features is for multi-core rendering. See :c:macro:`LV_DRAW_SW_DRAW_UNIT_CNT`. Otherwise there is no case for setting it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:251
msgid "Using a Specific Version of LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:253
msgid "Here are the steps to use the latest (or any) version of LVGL in NuttX."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:255
msgid "First ensure the build artifacts have been cleared. It will remove the existing unpacked LVGL and ZIP if there is one."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:262
msgid "Now you can ``git clone`` the latest LVGL into the NuttX apps tree. It will persist even after ``make distclean`` because the build system will not remove lvgl if it is a Git repo."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:270
msgid "Finally, you must copy the content of ``apps/graphics/lvgl/lvgl/Kconfig`` into the middle of ``apps/graphics/lvgl/Kconfig``. See the \"PASTE THE CONTENTS ...\" section below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:273
msgid "``apps/graphics/lvgl/Kconfig``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:301
msgid "This blog post: `LVGL on LPCXpresso54628 <https://acassis.wordpress.com/2018/07/19/running-nuttx-on-lpcxpresso54628-om13098/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/nuttx.rst:303
msgid "NuttX mailing list: `Apache NuttX Mailing List <http://nuttx.incubator.apache.org/community/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/px5.rst:3
msgid "PX5 RTOS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/px5.rst:5
msgid "See `PX5 RTOS's homepage <https://px5rtos.com/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:5
msgid "QNX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:8
msgid "What is QNX?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:10
msgid "QNX is a commercial operating system first released in 1980. The operating system is based on a micro-kernel design, with the file system(s), network stack, and various other drivers each running in its own process with a separate address space."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:15
msgid "See www.qnx.com for more details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:18
msgid "Highlight of QNX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:20
msgid "64-bit only, runs on x86_64 and ARMv8"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:21
msgid "Requires an MMU as the design mandates separation among processes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:22
msgid "Support for thousands of processes and millions of threads"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:23
msgid "Up to 64 cores, up to 16TB of RAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:24
msgid "Virtualization support (as host and guest)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:25
msgid "Full POSIX compatibility"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:26
msgid "Safety certification to various automotive, industrial and medical standards"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:29
msgid "How to run LVGL on QNX?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:31
msgid "There are two ways to use LVGL in your QNX project. The first is similar to how LVGL is used on other systems. The second is to build LVGL as either a shared or a static library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:36
msgid "Include LVGL in Your Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:38
msgid "Follow the generic instructions for getting started with LVGL. After copying `lv_conf_template.h` to  `lv_conf.h` make the following changes to the latter:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:41
msgid "Enable QNX support:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:47
msgid "Set colour depth to 32:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:53
msgid "(Optional) Enable double-buffering:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:60
msgid "Build LVGL as a Library"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:62
msgid "**Note that this method is an alternative to including LVGL in your project. If you choose to build a library then you do not need to follow the instructions in the previous section.**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:66
msgid "The top-level `qnx` directory includes a recursive make file for building LVGL, both as a shared library and as a static library for the supported architectures. To build all libraries, simply invoke `make` in this directory:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:75
msgid "If you prefer to build for a specific architecture and variant, go to the appropriate directory and run `make` there. For example, to build a shared library for ARMv8:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:84
msgid "As a general rule, if you only want to have one LVGL application in your system then it is better to use a static library. If you have more than one, and especially if they run concurrently, it is better to use the shared library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:88
msgid "Before building the library, you may wish to edit `$(LVGL_ROOT)/env_support/qnx/lv_conf.h`, e.g. to add fonts or disable double-buffering."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:93
msgid "Writing a LVGL Application"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:95
msgid "To create a LVGL application for QNX, follow these steps in your code:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:97
msgid "Initialize the library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:98
msgid "Create a window."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:99
msgid "Add the input devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:100
msgid "Create the UI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:101
msgid "Run the event loop."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:103
msgid "Steps 2, 3 and 5 use QNX-specific calls, but the rest of the code should be identical to that of a LVGL application written for any other platform."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:106
msgid "The following code shows how to create a \"Hello World\" application:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:139
msgid "Build the Application"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/qnx.rst:141
msgid "Building the application consists of compiling the source with the LVGL headers, and then linking against the library. This can be done in many ways, using different build systems. The following is a simple make file for the example above, which builds for ARMv8 with the shared library:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:3
msgid "RT-Thread RTOS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:6
msgid "What is RT-Thread?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:8
msgid "`RT-Thread <https://www.rt-thread.io/>`__ is an `open source <https://github.com/RT-Thread/rt-thread>`__, neutral, and community-based real-time operating system (RTOS). RT-Thread has **Standard version** and **Nano version**. For resource-constrained microcontroller (MCU) systems, the Nano version that requires only 3 KB Flash and 1.2 KB RAM memory resources can be tailored with easy-to-use tools. For resource-rich IoT devices, RT-Thread can use the **online software package** management tool, together with system configuration tools, to achieve intuitive and rapid modular cutting, seamlessly import rich software packages; thus, achieving complex functions like Android's graphical interface and touch sliding effects, smart voice interaction effects, and so on."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:22
msgid "Key features"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:24
msgid "Designed for resource-constrained devices, the minimum kernel requires only 1.2KB of RAM and 3 KB of Flash."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:26
msgid "A variety of standard interfaces, such as POSIX, CMSIS, C++ application environment."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:28
msgid "Has rich components and a prosperous and fast growing `package ecosystem <https://packages.rt-thread.org/en/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:29
msgid "Elegant code style, easy to use, read and master."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:30
msgid "High Scalability. RT-Thread has high-quality scalable software architecture, loose coupling, modularity, is easy to tailor and expand."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:33
msgid "Supports high-performance applications."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:34
msgid "Supports all mainstream compiling tools such as GCC, Keil and IAR."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:35
msgid "Supports a wide range of `architectures and chips <https://www.rt-thread.io/board.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:38
msgid "How to run LVGL on RT-Thread?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:40
msgid "`中文文档 <https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/packages-manual/lvgl-docs/introduction>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:42
msgid "LVGL has registered as a `softwarepackage <https://packages.rt-thread.org/en/detail.html?package=LVGL>`__ of RT-Thread. By using `Env tool <https://www.rt-thread.io/download.html?download=Env>`__ or `RT-Thread Studio IDE <https://www.rt-thread.io/download.html?download=Studio>`__, RT-Thread users can easily download LVGL source code and combine with RT-Thread project."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:50
msgid "RT-Thread community has port LVGL to several BSPs:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:53
msgid "BSP"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:55
msgid "`QEMU simulator <https://github.com/RT-Thread/rt-thread/tree/master/bsp/qemu-vexpress-a9/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:55
msgid "`Infineon psoc6-evaluationkit-062S2 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/Infineon/psoc6-evaluationkit-062S2/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:57
msgid "`Visual Studio simulator <https://github.com/RT-Thread/rt-thread/tree/master/bsp/simulator/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:57
msgid "`Renesas ra6m3-ek <https://github.com/RT-Thread/rt-thread/tree/master/bsp/renesas/ra6m3-ek/board/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:59
msgid "`Nuvoton numaker-iot-m487 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/numaker-iot-m487/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:59
msgid "`Renesas ra6m4-cpk <https://github.com/RT-Thread/rt-thread/tree/master/bsp/renesas/ra6m4-cpk/board/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:61
msgid "`Nuvoton numaker-pfm-m487 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/numaker-pfm-m487/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:61
msgid "`Renesas ra6m3-hmi <https://github.com/RT-Thread/rt-thread/tree/master/bsp/renesas/ra6m3-hmi-board/board/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:63
msgid "`Nuvoton nk-980iot <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/nk-980iot/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:63
msgid "`STM32H750 ART-Pi <https://github.com/RT-Thread/rt-thread/tree/master/bsp/stm32/stm32h750-artpi/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:65
msgid "`Nuvoton numaker-m2354 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/numaker-m2354/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:65
msgid "`STM32F469 Discovery <https://github.com/RT-Thread/rt-thread/tree/master/bsp/stm32/stm32f469-st-disco/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:67
msgid "`Nuvoton nk-n9h30 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/nk-n9h30/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:67
msgid "`STM32F407 explorer <https://github.com/RT-Thread/rt-thread/tree/master/bsp/stm32/stm32f407-atk-explorer/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:69
msgid "`Nuvoton numaker-m032ki <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/numaker-m032ki/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:69
msgid "`STM32L475 pandora <https://github.com/RT-Thread/rt-thread/tree/master/bsp/stm32/stm32l475-atk-pandora/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:71
msgid "`Nuvoton numaker-hmi-ma35d1 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/numaker-hmi-ma35d1/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:71
msgid "`NXP imxrt1060-evk <https://github.com/RT-Thread/rt-thread/tree/master/bsp/imxrt/imxrt1060-nxp-evk/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:73
msgid "`Nuvoton numaker-iot-m467 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/numaker-iot-m467/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:73
msgid "`Raspberry PICO <https://github.com/RT-Thread/rt-thread/tree/master/bsp/raspberry-pico/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:75
msgid "`Nuvoton numaker-m467hj <https://github.com/RT-Thread/rt-thread/tree/master/bsp/nuvoton/numaker-m467hj/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:75
msgid "`NXP LPC55S69 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/lpc55sxx/lpc55s69_nxp_evk/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:77
msgid "`synwit swm341 <https://github.com/RT-Thread/rt-thread/tree/master/bsp/synwit/swm341/applications/lvgl>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:82
msgid "Tutorials"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:84
msgid "`Introduce about RT-Thread and how to run LVGL on RT-Thread in simulators <https://www.youtube.com/watch?v=k7QYk6hSwnc>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:85
msgid "`How to import a BSP project with latest code into RT-Thread Studio <https://www.youtube.com/watch?v=fREPLuh-h8k>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:86
msgid "`How to Use LVGL with RT-Thread Studio in STM32F469 Discovery Board <https://www.youtube.com/watch?v=O_QA99BxnOE>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:87
msgid "`RT-Thread Youtube Channel <https://www.youtube.com/channel/UCdDHtIfSYPq4002r27ffqPw>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/rt-thread.rst:88
msgid "`RT-Thread documentation center <https://www.rt-thread.io/document/site/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:4
msgid "Torizon OS"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:6
msgid "Torizon OS is an open-source software platform that aims to simplify the development and maintenance of embedded Linux software."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:9
msgid "By using docker containers it allows developers to focus on the application instead of building and maintaining a custom distribution."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:12
msgid "This guide explains how to create a docker image containing LVGL and a simple demo application that can be deployed on any Toradex device running TorizonOS."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:18
msgid "To follow this guide you obviously need to have a Toradex SoM along with a carrier board. More information is available on the Toradex `website <https://www.toradex.com/computer-on-modules>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:24
msgid "You need to be familiar with some Docker fundamentals to be able to understand and follow this guide. Also Docker needs to be present on the development host."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:27
msgid "The `Toradex documentation <https://developer.toradex.com>`_ is a helpful resource. This article contains many references to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:31
msgid "Board setup"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:33
msgid "Begin by installing TorizonOS by using the Toradex Easy Installer. Follow the official bring-up `guides <https://developer.toradex.com/quickstart/bringup/>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:36
msgid "In the Easy Installer, select TorizonCore as the operating system to install."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:38
msgid "Copy the IP address that was assigned to the device by the DHCP server on your network. The address is displayed in the bottom right corner. It will be used later."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:41
msgid "Once the setup is complete, the device will boot into TorizonOS."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:44
msgid "Creating the Docker image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:46
msgid "Toradex provides a `VSCode extension <https://developer.toradex.com/torizon/application-development/ide-extension/>`_ that offers a collection of templates used to configure and automate the tasks needed to cross-compile applications and build Docker images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:50
msgid "However, this guide explains how to perform those operations manually."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:54
msgid "The template for a LVGL application is currently being added to the VSCode extension and will be available soon."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:56
msgid "To build a Torizon container Docker ARM emulation needs to be enabled by typing the following commands:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:64
msgid "The second command should print ``aarch64``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:66
msgid "More information on the build environment for Torizon containers is available `here <https://developer.toradex.com/torizon/application-development/working-with-containers/configure-build-environment-for-torizon-containers/>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:69
msgid "Let's begin by creating a directory that will contain the ``Dockerfile`` and source code that will be used to build the image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:72
msgid "Type the following commands in a terminal window:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:83
msgid "These commands create the project directory and the ``Dockerfile``. ``git`` is used to download the ``lv_port_linux`` and ``lvgl`` repositories from Github."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:88
msgid "By default, ``lv_port_linux`` is configured to use the legacy framebuffer device ``/dev/fb0``. It is also possible to use another rendering backend by enabling the correct options in ``lv_port_linux/lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:93
msgid "Now edit the Dockerfile. Copy-paste the block below into the file:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:146
msgid "The ``Dockerfile`` acts like a recipe to build two images:  ``build`` and ``deploy``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:148
msgid "First it downloads the necessary packages to build the simulator using Debian's package manager ``apt-get``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:150
msgid "After compilation, the resulting executable is written to ``lv_port_linux/bin/lvglsim``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:152
msgid "The ``deploy`` image will be deployed on the device. The executable created in the previous image is copied to the ``/usr/bin`` directory of the current image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:155
msgid "This creates a smaller image that does not include the tool chain and the build dependencies."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:157
msgid "The images are built with the following command:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:159
msgid "``docker build . -t lvgl_app``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:161
msgid "Docker will interpret the ``Dockerfile`` present in the current working directory. The ``-t`` argument gives a name to the resulting image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:164
msgid "Upon completion, ensure that the image is listed by Docker:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:166
msgid "``docker image list | grep lvgl_app``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:168
msgid "It should display the image along with its ID that will be used later."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:171
msgid "Deploying the container image to the device"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:173
msgid "The image is now ready to be deployed on the device. There are several ways to perform this task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:176
msgid "Read `this article <https://developer.toradex.com/torizon/application-development/working-with-containers/deploying-container-images-to-torizoncore/>`_ for more information."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:178
msgid "For this guide, we are going to setup a Docker registry container on the development host which will be accessible from any device on your LAN. The Toradex board being on the same network will be able to pull the image from the registry."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:182
msgid "The registry is created like so:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:184
msgid "``docker run -d -p 5000:5000 --name registry registry:2.7``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:186
msgid "The ``-d`` flag runs the container in detached mode. The ``-p`` argument specifies the port mapping. The registry container will listen on port ``TCP/5000`` and will map to the same port externally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:189
msgid "Push the image created in the previous step to the newly created registry:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:191
msgid "``docker tag <IMAGE_ID> 127.0.0.1:5000/lvgl-app``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:193
msgid "``docker push 127.0.0.1:5000/lvgl-app``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:195
msgid "By default a local container registry uses clear text HTTP so the Docker instance running on the device has to be configured to allow fetching images from an 'insecure' repository."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:198
msgid "Get the IP address of the development host and open a remote shell on the device."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:220
msgid "By default, Docker containers are isolated from the hardware of the host system. While this is great for security, an embedded application will obviously need `access to the hardware. <https://developer.toradex.com/torizon/application-development/use-cases/peripheral-access/best-practices-with-hardware-access/>`_"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:224
msgid "The container running the LVGL application needs access to the framebuffer device ``/dev/fb0``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:226
msgid "By using the ``--device`` argument it is possible to map a device to a container."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:228
msgid "Start the container like so:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:230
msgid "``docker run --device /dev/fb0:/dev/fb0 <IMAGE_ID>``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:233
msgid "Conclusion"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:235
msgid "You now have a running LVGL application. Where to go from here?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:237
msgid "You are now ready to build your LVGL application for Torizon OS. It is recommended to get familiar with VSCode IDE extension as it will simplify your workflow."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:241
msgid "If you are a VSCode user, it is the best way to develop for Torizon OS. If you use another editor or IDE you can always write scripts to automate the building/pushing/pulling operations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:245
msgid "Read this `article <https://developer.toradex.com/torizon/application-development/application-development-overview>`_ to understand how to design applications for Torizon OS."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/torizon_os.rst:248
msgid "Getting familiar with Torizon Cloud and Torizon OS builder is also recommended when you get closer to production."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:5
msgid "Yocto Project Core Components"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:7
msgid "The BitBake task executor together with various types of configuration files form the OpenEmbedded-Core (OE-Core). This section overviews these components by describing their use and how they interact."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:11
msgid "BitBake handles the parsing and execution of the data files. The data itself is of various types:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:14
msgid "*Recipes:* Provides details about particular pieces of software."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:16
msgid "*Class Data:* Abstracts common build information (e.g. how to build a Linux kernel)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:19
msgid "*Configuration Data:* Defines machine-specific settings, policy decisions, and so forth. Configuration data acts as the glue to bind everything together."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:23
msgid "BitBake knows how to combine multiple data sources together and refers to each data source as a layer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:26
msgid "Here are some brief details on these core components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:31
msgid "BitBake"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:33
msgid "BitBake is the tool at the heart of the OpenEmbedded Build System and is responsible for parsing the Metadata, generating a list of tasks from it, and then executing those tasks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:37
msgid "This section briefly introduces BitBake. If you want more information on BitBake, see the `BitBake User Manual <https://docs.yoctoproject.org/bitbake/2. 8/index.html>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:41
msgid "To see a list of the options BitBake supports, use either of the following commands::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:47
msgid "The most common usage for BitBake is ``bitbake recipename``, where ``recipename`` is the name of the recipe you want to build (referred to as the \"target\"). The target often equates to the first part of a recipe's filename (e.g. \"foo\" for a recipe named ``foo_1.3.0-r0.bb``). So, to process the ``matchbox-desktop_1.2.3.bb`` recipe file, you might type the following::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:56
msgid "Several different versions of ``matchbox-desktop`` might exist. BitBake chooses the one selected by the distribution configuration. You can get more details about how BitBake chooses between different target versions and providers in the \"`Preferences <https://docs.yoctoproject.org/bitbake/2.8/bitbake-user-manual/ bitbake-user-manual-execution.html#preferences>`_\" section of the BitBake User Manual."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:63
msgid "BitBake also tries to execute any dependent tasks first. So for example, before building ``matchbox-desktop``, BitBake would build a cross compiler and ``glibc`` if they had not already been built."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:67
msgid "A useful BitBake option to consider is the ``-k`` or ``--continue`` option. This option instructs BitBake to try and continue processing the job as long as possible even after encountering an error. When an error occurs, the target that failed and those that depend on it cannot be remade. However, when you use this option other dependencies can still be processed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:77
msgid "Recipes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:79
msgid "Files that have the ``.bb`` suffix are \"recipes\" files. In general, a recipe contains information about a single piece of software. This information includes the location from which to download the unaltered source, any source patches to be applied to that source (if needed), which special configuration options to apply, how to compile the source files, and how to package the compiled output."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:86
msgid "The term \"package\" is sometimes used to refer to recipes. However, since the word \"package\" is used for the packaged output from the OpenEmbedded build system (i.e. ``.ipk`` or ``.deb`` files), this document avoids using the term \"package\" when referring to recipes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:95
msgid "Classes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:97
msgid "Class files (``.bbclass``) contain information that is useful to share between recipes files. An example is the autotools* class, which contains common settings for any application that is built with the `GNU Autotools <https://en.wikipedia.org/wiki/GNU_Autotools>`. The \"`Classes <https://docs.yoctoproject.org/ref-manual/classes. html#classes>`_\" chapter in the Yocto Project Reference Manual provides details about classes and how to use them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:111
msgid "The configuration files (``.conf``) define various configuration variables that govern the OpenEmbedded build process. These files fall into several areas that define machine configuration options, distribution configuration options, compiler tuning options, general common configuration options, and user configuration options in ``conf/local.conf``, which is found in the `Build Directory <https://docs. yoctoproject.org/ref-manual/terms.html#term-Build-Directory>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:124
msgid "Layers are repositories that contain related metadata (i.e. sets of instructions) that tell the OpenEmbedded build system how to build a target. `The yocto project layer model <https://docs.yoctoproject.org/ overview-manual/yp-intro.html#the-yocto-project-layer-model>`_ facilitates collaboration, sharing, customization, and reuse within the Yocto Project development environment. Layers logically separate information for your project. For example, you can use a layer to hold all the configurations for a particular piece of hardware. Isolating hardware-specific configurations allows you to share other metadata by using a different layer where that metadata might be common across several pieces of hardware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:136
msgid "There are many layers working in the Yocto Project development environment. The `Yocto Project Compatible Layer Index <https://www.yoctoproject.org/development/ yocto-project-compatible-layers/>`_ and `OpenEmbedded Layer Index <https:// layers.openembedded.org/layerindex/branch/master/layers/>`_ both contain layers from which you can use or leverage."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/core_components.rst:143
msgid "By convention, layers in the Yocto Project follow a specific form. Conforming to a known structure allows BitBake to make assumptions during builds on where to find types of metadata. You can find procedures and learn about tools (i.e. ``bitbake-layers``) for creating layers suitable for the Yocto Project in the \"`understanding and creating layers <https://docs.yoctoproject.org/dev-manual/ layers.html#understanding-and-creating-layers>`_\" section of the Yocto Project Development Tasks Manual."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/index.rst:5
msgid "Yocto"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/index.rst:7
msgid "The Yocto Project (YP) is an open source collaboration project that helps developers create custom Linux-based systems regardless of the hardware architecture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/index.rst:11
msgid "The project provides a flexible set of tools and a space where embedded developers worldwide can share technologies, software stacks, configurations, and best practices that can be used to create tailored Linux images for embedded and IOT devices, or anywhere a customized Linux OS is needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/index.rst:16
msgid "This section objective is to ease to process of understanding the basic concepts of Yocto and to help beginners to start with Yocto."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:5
msgid "LVGL in Yocto"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:7
msgid "This chapter serves as a guide to help you create a recipe for an application using LVGL. While the process will be demonstrated for the Raspberry Pi 3 (64-bit), it can be applied to any board in a similar way."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:12
msgid "Build Host Packages"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:13
msgid "You must install essential host packages on your build host. The following command installs the host packages based on an Ubuntu distribution"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:25
msgid "For host package requirements on all supported Linux distributions, see the `Required Packages for the Build Host <https://docs.yoctoproject.org/ ref-manual/system-requirements.html#required-packages-for-the-build-host>`_ section in the Yocto Project Reference Manual."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:33
msgid "Use Git to clone the required repositories"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:34
msgid "After this section the folder tree will be like this"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:49
msgid "Start creating the folder architecture"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:55
msgid "Clone Poky, meta-openembedded and meta-raspberrypi in the sources"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:66
msgid "Build a base image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:67
msgid "To understand better what is going on, let's build the image like it is prepared for us"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:75
msgid "Now you should have a folder named ``build`` next to ``sources``. The last command also sets the current directory to the build directory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:79
msgid "In the build directory, there is a ``conf`` folder with some files in it"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:91
msgid "The important files for us are ``local.conf`` and ``bblayers.conf``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:93
msgid "To add layers to the project there are 2 options:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:95
msgid "**Bitbake commands (Option 1)**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:97
msgid "You need to be in the same terminal you did the ``source`` command. Add the layers with the Bitbake command like this"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:105
msgid "**Modify conf file (Option 2)**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:107
msgid "Open ``conf/bblayers.conf`` file and add manually the paths:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:129
msgid "To ensure the layers were added as expected, run the Bitbake command to show all the layers::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:134
msgid "The following layers should be listed:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:136
msgid "core"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:137
msgid "yocto"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:138
msgid "yoctobsp"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:139
msgid "raspberrypi"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:140
msgid "openembedded-layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:141
msgid "multimedia-layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:142
msgid "networking-layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:143
msgid "meta-python"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:147
msgid "Build for RaspberryPi3 64"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:149
msgid "The available machine configurations for Raspberrypi can be listed like this"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:155
msgid "To build an image for Raspberrypi3 64 bits, modify the file ``local.conf`` file replacing the ``MACHINE ??=`` default value like this"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:162
msgid "To build the image we will target, it is also needed to add this to the file:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:170
msgid "You can find more information about this variable `here <https://meta-raspberrypi.readthedocs.io/en/latest/ipcompliance.html#linux-firmware-rpidistro>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:172
msgid "Everything is setup, time to build the image::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:178
msgid "Overview of the build"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:180
msgid "Let's go through the build folders to understand what happened."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:183
msgid "Downloads"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:185
msgid "The folder location can be changed with the ``DL_DIR`` variable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:187
msgid "The Downloads folder is a fundamental part of the Yocto build environment, serving as a local cache for all external sources and dependencies. This caching mechanism is essential for efficient builds, ensuring that repeated builds do not waste time downloading the same files again."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:194
msgid "tmp/deploy"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:196
msgid "This folder contains the final output artifacts that are ready for deployment. These artifacts include kernel images, root filesystems, packages, SDKs, bootloader files, and other components that are generated during the Yocto build process."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:201
msgid "There are some key folders:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:203
msgid "**images**: it contains the images that can be flashed or deployed to the target device. Files like the Linux kernel, root filesystem (e.g., .ext4, .tar.gz, .squashfs), bootloaders (e.g., U-Boot), and other bootable images for the device are found here. t's organized by the machine (or target board) for which the image was built."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:208
msgid "**rmp/deb/ipk**: These folders contain the individual software packages generated during the build, in the specified package format (RPM, DEB, or IPK). These packages are typically created when you're building your Yocto project with package management support enabled. These can later be installed on the target device using package management tools"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:213
msgid "**sdk**: This subdirectory contains Software Development Kits (SDKs) that you can use to cross-compile applications for your target system. The SDKs are generated when you use the ``bitbake -c populate_sdk`` command."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:220
msgid "tmp/sysroots-components"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:221
msgid "This folder is a modular approach introduced in Yocto to handle sysroots. It divides the sysroot into individual components, which can be thought of as the building blocks or packages that make up the entire sysroot environment."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:225
msgid "Each component corresponds to a specific package or dependency that is staged into the sysroot. This approach allows for more efficient reuse of sysroots across multiple packages or builds, and it helps with dependency tracking and management during the build process."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:230
msgid "The sysroot-components directory helps optimize the build process because if one package changes, Yocto only needs to update the corresponding component rather than rebuilding or copying the entire sysroot."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:234
msgid "If you followed the previous steps, here are the folders you will find:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:236
msgid "``all``: Architecture-independent files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:237
msgid "``cortexa53``: Files for the Cortex-A53 (ARMv8-A) architecture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:238
msgid "``manifests``: Track files installed in the sysroot by package."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:239
msgid "``raspberrypi3_64``: Files specific to the Raspberry Pi 3 (64-bit)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:240
msgid "``x86_64``: Files for the x86_64 (PC) architecture, typically for cross-compilation tools."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:242
msgid "``x86_64-nativesdk``: Files related to the SDK for cross-compilation on an x86_64 host."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:245
msgid "Each folder corresponds to components relevant to the specific architecture, and they collectively form the complete environment needed to compile and run software for the target and host systems."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:250
msgid "tmp/sysroots-uninative"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:252
msgid "The sysroots-uninative directory in Yocto is used to support the \"uninative\" feature, which allows for more reproducible builds by ensuring that the build environment remains consistent across different host systems. It essentially provides a way to use the same native build tools across different Linux distributions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:259
msgid "tmp/work"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:261
msgid "The ``work`` folder in Yocto is a key directory in the ``tmp`` folder that holds all the temporary build artifacts for each package during the build process. It is where the actual building and compiling of individual packages or recipes takes place. Each package (or \"recipe\") that BitBake processes generates temporary files and directories inside this ``work`` folder."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:267
msgid "The ``work`` folder is typically structured by machine architecture and package. Here's how it generally works:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:281
msgid "This folder is very important and helps a lot during debug phases. The ``temp`` subfolder contains important logs that can help you diagnose build issues. This is where you'll look when a build fails to figure out what went wrong."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:287
msgid "LVGL recipe"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:289
msgid "Find more information about recipes in :ref:`recipes_section` section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:291
msgid "There is a recipe in ``meta-openembedded`` since ``honister``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:293
msgid "lvgl recipe version"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:297
msgid "Branch"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:298
msgid "Recipe"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:299
msgid "scarthgap (Yocto Project 5.0)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:300
msgid "lvgl 9.1.0"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:301
msgid "nanbield (Yocto Project 4.3)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:302
msgid "lvgl 8.3.10"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:303
msgid "mickledore (Yocto Project 4.2)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:304
#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:306
#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:308
msgid "lvgl 8.1.0"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:305
#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:307
msgid "langdale (Yocto Project 4.1)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:309
msgid "kirkstone (Yocto Project 4.0)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:310
msgid "lvgl 8.0.3"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:312
msgid "In this guide, we are on the ``scarthgap`` branch, so we are using lvgl 9.1.0."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:314
msgid "Let's dive into this recipe to understand what is done. The objective is to add this library as a shared object in the target rootfs, and also to generate a SDK with lvgl."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:318
msgid "This is the path of lvgl recipes: ``lvgl_yocto_guide/sources/meta-openembedded/ meta-oe/recipes-graphics/lvgl``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:321
msgid "Here is the architecture of lvgl recipes folder:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:338
msgid "``file`` folder contains all the patches that can be applied when building the recipe."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:340
msgid "``lv_conf.inc`` is an include file, usually containing common configuration settings for LVGL that can be shared between multiple recipes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:342
msgid "``lvgl_9.1.0.bb`` is the recipe to build lvgl library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:343
msgid "``lvgl-demo-fb_9.1.0.bb`` is a recipe to build an application using lvgl."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:345
msgid "For now let's understand the recipe of lvgl library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:383
msgid "**LICENSE**: Indicates the licensing of the software, stating that it is distributed under the MIT License."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:386
msgid "**LIC_FILES_CHKSUM**: This variable contains a checksum (in this case, an MD5 hash) for the license file (here assumed to be LICENCE.txt). This helps to ensure the integrity of the license file included in the package. In LVGL repository, there is a LICENSE.txt. To get the value of the hash of the file, you can do this command: ``md5sum LICENSE.txt``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:392
msgid "SRC_URI: Specifies the locations of the source code and patches for the recipe:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:394
msgid "The main source repository for LVGL specifying the master branch."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:395
msgid "The following arguments are the local patch files that will be applied to the source code during the build process."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:398
msgid "**SRCREV**: Defines the specific commit (in this case, a Git SHA hash) from which the source code will be fetched. This ensures that the build uses a consistent version of the code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:402
msgid "**inherit**: This line indicates that the recipe uses the ``cmake`` class, which provides functionality for building projects that use CMake as their build system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:406
msgid "**EXTRA_OECMAKE**: Additional options passed to CMake during the configuration step."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:409
msgid "**S**: This variable defines the source directory where the unpacked source code will be located after fetching. ``${WORKDIR}`` is a standard variable in BitBake that points to the working directory for the recipe. require: This line includes another configuration file, ``lv-conf.inc``, which likely contains additional configuration options or variables specific to the LVGL library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:416
msgid "**FILES**: This is a BitBake variable used to specify the files that should be included in a particular package. In this case, the variable is specifying files for a package related to development (i.e., header files)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:422
msgid "Recipe Tasks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:424
msgid "When a recipe is compiled, it will run multiple tasks. You can run each task manually to understand what is generated each step, or you can run ``bitbake lvgl`` to run all the tasks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:428
msgid "Fetch (do_fetch)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:434
msgid "Fetch task fetches the package source from the local or remote repository."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:436
msgid "The fetch Repo address has to be stored in **SRC_URI** variable. In **SRCREV** Variable the commit hash of github repo is defined."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:439
msgid "When the fetch task has been completed, you can find the fetched sources in ``build/downloads``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:442
msgid "For this recipe, you will find a new folder here: ``lvgl_yocto_guide build/downloads/git2/github.com.lvgl.lvgl``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:445
msgid "You can also find the folder architecture created in ``lvgl_yocto_guide/ build/tmp/work/cortexa53-poky-linux/lvgl`` but these folders are empty since only the fetch was done."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:452
msgid "Unpack (do_unpack)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:458
msgid "Unpack task unpacks the package that has been downloaded with Fetch task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:460
msgid "In the ``lvgl_yocto_guide/build/tmp/work/cortexa53-poky-linux/lvgl/9.1.0`` folder, you can now find the source code in ``git`` (as it was defined in the recipe). You will also see the patches that will be applied on the next step. So for now, the sources are unmodified and the same than the commit that was specified."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:468
msgid "Patch (do_patch)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:474
msgid "Patch task locates the patch files and applies the patches to the sources if any patch is available. This is optional task, executes if patch is available."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:478
msgid "Patch file is also defined in **SRC_URI** variable. By default it runs in current source directory **${S}**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:481
msgid "Configure (do_configure)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:487
msgid "The Configuration task configures the source by enabling and disabling any build-time and configuration options for the software being built before compilation if any configuration is available."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:491
msgid "This is a optional steps, executes if configuration is available."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:493
msgid "In this case, it creates a build directory, It invokes CMake to configure the project, specifying build options and paths based on variables in your recipe. It generates Makefiles or project files needed for the build. Also, there are operations added in the task in ``lv-conf.inc``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:498
msgid "So at the end of the task, in the ``lvgl_yocto_guide/build/tmp/work/ cortexa53-poky-linux/lvgl/9.1.0``, you will find a ``build`` folder that was generated running the CMake command, but nothing is built yet. Also, the sysroots have everything required to build lvgl library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:503
msgid "Compile (do_compile)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:509
msgid "The Compilation task compiles the source code if any compilation steps are available and generates a binary file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:512
msgid "This is a optional steps, executes if compilation is available."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:514
msgid "If there are any compilation steps, then these steps are define in do_compile() function of bitbake."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:517
msgid "Like in the previous task, this is handle by ``inherit cmake``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:519
msgid "In the build folder, you can now see the built library. The ``.so`` files are available in ``lvgl_yocto_guide/build/tmp/work/ cortexa53-poky-linux/lvgl/9.1.0/build/lib``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:522
msgid "After this task has been completed, everything is ready to be installed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:524
msgid "Install (do_install)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:530
msgid "The Install task copies files that are to be packaged into the holding area **${D}**. This task runs with the current working directory **${S}** which is the compilation directory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:534
msgid "It creates the necessary directory for the header files in the destination installation directory. It installs the ``lv_conf.h`` header file from the source directory into the appropriate include directory in the destination path, ensuring it has the correct permissions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:540
msgid "The lvgl library (``.so`` files) are also ready to be installed in the final image. A new folder ``image`` was created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:545
msgid "In the file ``build/conf/local.conf``, add these 2 lines at the end of the file:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:553
msgid "This will add the lvgl library in the generated image, and it will also add the library to the host SDK we will generate later on."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:556
msgid "With these modifications, you can now run the image recipe again::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:560
msgid "This will execute all the previous described tasks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:562
msgid "If everything went well, you should now found this file ``build/tmp/deploy/ rpm/cortexa53/lvgl-9.1.0-r0.cortexa53.rpm`` and other rpm files related to lvgl."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:567
msgid "SDK generation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:569
msgid "Generating a Software Development Kit (SDK) in Yocto serves several important purposes, particularly in embedded development:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:572
msgid "**Development Environment**: The SDK provides developers with a ready-to-use development environment tailored for a specific target hardware platform. This includes the necessary tools, libraries, and headers to build applications that run on the target device."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:577
msgid "**Cross-Compilation**: The SDK allows developers to cross-compile applications from a host machine (typically x86 or x86_64 architecture) for a different architecture (e.g., ARM). This is essential for embedded systems, where development often occurs on more powerful machines."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:581
msgid "**Simplified Development**: By packaging all required components, the SDK simplifies the process of setting up a development environment. Developers don't need to manually install and configure tools and libraries; everything needed is included in the SDK."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:585
msgid "**Consistent Build Environment**: The SDK ensures that developers are working with the same versions of and tools used in the Yocto build, which helps to avoid compatibility issues and ensures that applications will behave as expected on the target device."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:590
msgid "To generate an SDK of the environment, run the following command:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:596
msgid "This will create a script ``build/tmp/deploy/sdk/poky-glibc-x86_64-core-image-base-cortexa53-raspberrypi3-64-toolchain-5.0.4.sh``. This script allows you to install the SDK where you prefer. Here is the execution output of the script"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:609
msgid "If you want to ensure the SDK was generated with lvgl being installed, go to the path you extracted the SDK and find all lvgl files:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:617
msgid "The ``.so`` files you will find will depend on the LVGL configuration you used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:619
msgid "Now to use the SDK environment and cross-compile an application:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:627
msgid "The tools available in LVGL library will depend on the build configuration the recipe was done with."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:632
msgid "Custom recipe"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:634
msgid "Until this section, everything was already done for you. We used existing recipes. The objective here is to create a recipe from scratch and to add the generated binary in the image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:639
msgid "Create a layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:641
msgid "First, create a layer and add it to the configuration file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:648
msgid "In the ``sources`` folder, a new folder was created: ``meta-mylvgl`` and the directory tree should look like the following"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:663
msgid "Create a recipe"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:665
msgid "Following this structure, create a folder containing the recipes to build 1 or multiple applications using lvgl"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:674
msgid "We will focus on 1 application that will clone an lvgl git repository and patch it for our needs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:677
msgid "The content of ``recipes-lvglapp/lvgl-fbdev-benchmark/lvglbenchmarkfbdev_2.4.bb``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:704
msgid "The sources come from ``lv_port_linux`` repository. We apply 2 patches to modify the ``CMakeLists.txt`` and ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:707
msgid "Patch 1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:709
#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:841
msgid "Create the first patch file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:715
msgid "Content of ``0001-change-config-file-to-run-fbdev-with-2-threads.patch``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:839
msgid "Patch 2"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:847
msgid "Content of ``0002-adapt-CMakeLists-file-to-compile-and-link-fbdev.patch``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:898
msgid "Build the recipe"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:900
msgid "You should now be able to see the recipe listing the existing recipes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:906
msgid "Now add the recipe to the project. Modify ``build/conf/local.conf`` file adding this line"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:913
msgid "Now build the image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/lvgl_recipe.rst:919
msgid "Run this command to ensure the binary was generated and was installed in the rootfs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:5
msgid "Yocto Project Terms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:7
msgid "Getting started in Yocto can be overwheming. There are many terms used that are specific to Yocto and Bitbake environment."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:10
msgid "A list of terms and definitions users new to the Yocto Project development environment might find helpful can be found `here <https://docs. yoctoproject.org/ref-manual/terms.html>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:16
msgid "Yocto Variables Glossary"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:18
msgid "This chapter lists basic variables used in the LVGL Yocto guide and gives an overview of their function and contents."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:21
msgid "A more complete variable glossary can be found in `Yocto Variable Glossary <https://docs.yoctoproject.org/ref-manual/variables.html>`_. This section covers a lot of variables used in the OpenEmbedded build system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:28
msgid "S"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:30
msgid "The location in the Build Directory where unpacked recipe source code resides. By default, this directory is ${WORKDIR}/${BPN}-${PV}, where ${BPN} is the base recipe name and ${PV} is the recipe version. If the source tarball extracts the code to a directory named anything other than ${BPN}-${PV}, or if the source code is fetched from an SCM such as Git or Subversion, then you must set S in the recipe so that the OpenEmbedded build system knows where to find the unpacked source."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:38
msgid "As an example, assume a Source Directory top-level folder named poky and a default Build Directory at poky/build. In this case, the work directory the build system uses to keep the unpacked recipe for db is the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:46
msgid "The unpacked source code resides in the db-5.1.19 folder."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:48
msgid "This next example assumes a Git repository. By default, Git repositories are cloned to ${WORKDIR}/git during do_fetch. Since this path is different from the default value of S, you must set it specifically so the source can be located:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:61
msgid "D"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:63
msgid "The destination directory. The location in the Build Directory where components are installed by the do_install task. This location defaults to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:72
msgid "Tasks that read from or write to this directory should run under fakeroot."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:77
msgid "B"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:79
msgid "The directory within the Build Directory in which the OpenEmbedded build system places generated objects during a recipe's build process. By default, this directory is the same as the S directory, which is defined as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:87
msgid "You can separate the (S) directory and the directory pointed to by the B variable. Most Autotools-based recipes support separating these directories. The build system defaults to using separate directories for gcc and some kernel recipes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:95
msgid "WORKDIR"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:97
msgid "The pathname of the work directory in which the OpenEmbedded build system builds a recipe. This directory is located within the TMPDIR directory structure and is specific to the recipe being built and the system for which it is being built."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:102
msgid "The WORKDIR directory is defined as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:108
msgid "The actual directory depends on several things:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:110
msgid "**TMPDIR**: The top-level build output directory"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:111
msgid "**MULTIMACH_TARGET_SYS**: The target system identifier"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:112
msgid "**PN**: The recipe name"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:113
msgid "**EXTENDPE**: The epoch — if PE is not specified, which is usually the case for most recipes, then EXTENDPE is blank."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:115
msgid "**PV**: The recipe version"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:116
msgid "**PR**: The recipe revision"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:118
msgid "As an example, assume a Source Directory top-level folder name poky, a default Build Directory at poky/build, and a qemux86-poky-linux machine target system. Furthermore, suppose your recipe is named foo_1.3.0-r0.bb. In this case, the work directory the build system uses to build the package would be as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:130
msgid "PN"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:132
msgid "This variable can have two separate functions depending on the context: a recipe name or a resulting package name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:135
msgid "PN refers to a recipe name in the context of a file used by the OpenEmbedded build system as input to create a package. The name is normally extracted from the recipe file name. For example, if the recipe is named expat_2.0.1.bb, then the default value of PN will be “expat”."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:140
msgid "The variable refers to a package name in the context of a file created or produced by the OpenEmbedded build system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:143
msgid "If applicable, the PN variable also contains any special suffix or prefix. For example, using bash to build packages for the native machine, PN is bash-native. Using bash to build packages for the target and for Multilib, PN would be bash and lib64-bash, respectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:151
msgid "PR"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:153
msgid "The revision of the recipe. The default value for this variable is \"r0\". Subsequent revisions of the recipe conventionally have the values \"r1\", \"r2\", and so forth. When PV increases, PR is conventionally reset to \"r0\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:160
msgid "The OpenEmbedded build system does not need the aid of PR to know when to rebuild a recipe. The build system uses the task input checksums along with the stamp and shared state cache mechanisms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:164
msgid "The PR variable primarily becomes significant when a package manager dynamically installs packages on an already built image. In this case, PR, which is the default value of PKGR, helps the package manager distinguish which package is the most recent one in cases where many packages have the same PV (i.e. PKGV). A component having many packages with the same PV usually means that the packages all install the same upstream version, but with later (PR) version packages including packaging fixes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:176
msgid "PR does not need to be increased for changes that do not change the package contents or metadata."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:179
msgid "Because manually managing PR can be cumbersome and error-prone, an automated solution exists. See the \"`working with a pr service <https://docs.yoctoproject.org/dev-manual/packages. html#working-with-a-pr-service>`_\" section in the Yocto Project Development Tasks Manual for more information."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:188
msgid "PV"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:190
msgid "The version of the recipe. The version is normally extracted from the recipe filename. For example, if the recipe is named expat_2.0.1.bb, then the default value of PV will be “2.0.1”. PV is generally not overridden within a recipe unless it is building an unstable (i.e. development) version from a source code repository (e.g. Git or Subversion)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/yocto/terms_and_variables.rst:196
msgid "PV is the default value of the PKGV variable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:3
msgid "Zephyr"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:6
msgid "What is Zephyr?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:8
msgid "`Zephyr <https://zephyrproject.org/>`__ is an `open source <https://github.com/zephyrproject-rtos/zephyr>`__ real-time operating system (RTOS) that is easy to deploy, secure, connect and manage. It has a growing set of software libraries that can be used across various applications and industry sectors such as Industrial IoT, wearables, machine learning and more. Zephyr is built with an emphasis on broad chipset support, security, dependability, long-term support releases and a growing open source ecosystem."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:19
msgid "Highlights of Zephyr"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:21
msgid "**Small** - Runs on microcontrollers as small as 8 kB Flash and 5 kB of RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:23
msgid "**Scalable** - Usable for complex multicore systems."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:24
msgid "**Customizable** - Out-of-the-box support for 500+ boards and high portability."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:26
msgid "**Secure** - Built with safety and security in mind, offers Long-term support."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:28
msgid "**Ecosystem** - Zephyr not only provides the RTOS kernel but also developer tooling, device drivers, connectivity, logging, tracing, power management and much more."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:31
msgid "**Decoupling** - Leverages devicetree to describe and configure the target system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:33
msgid "**Compliant** - Apps are runnable as native Linux applications, which simplifies debugging and profiling."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:37
msgid "How to run LVGL on Zephyr?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:39
msgid "To set up your development environment refer to the `getting started guide <https://docs.zephyrproject.org/latest/develop/getting_started/index.html>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:42
msgid "After you completed the setup above you can check out all of the `provided samples <https://docs.zephyrproject.org/latest/samples/>`__ for various boards. You can check the list of available boards using:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:49
msgid "After you chose a board you can build one of the LVGL demos for it. Here we are using the :code:`native_posix` board, which allows for running the application on your posix compliant host system:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:56
msgid "To run the application on your host:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:62
msgid "In case you chose any of the other supported boards you can flash to the device with:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:68
msgid "If you want to build any of the other demo applications check out the samples `README <https://docs.zephyrproject.org/latest/samples/modules/lvgl/demos/README.html>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:72
msgid "Leveraging Zephyr Features"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:75
msgid "Shell"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:77
msgid "Zephyr includes a powerful shell implementation that can be enabled with the Kconfig symbols :code:`CONFIG_SHELL` and :code:`CONFIG_LV_Z_SHELL` (the demos from above have it enabled by default)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:80
msgid "The shell offers enabling/disabling of LVGL monkeys:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:90
msgid "This is useful for checking your application for memory leaks and other bugs. Speaking of memory leaks, you can also acquire stats of the memory used by LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:97
msgid "For more details refer to the `shell documentation <https://docs.zephyrproject.org/latest/services/shell/index.html>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:100
msgid "Devicetree"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:102
msgid "Zephyr uses the devicetree description language to create and manage LVGL input devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:104
msgid "The pseudo device binding descriptions can be found at:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:106
msgid "`button input <https://docs.zephyrproject.org/latest/build/dts/api/bindings/input/zephyr,lvgl-button-input.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:107
msgid "`pointer input <https://docs.zephyrproject.org/latest/build/dts/api/bindings/input/zephyr,lvgl-pointer-input.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:108
msgid "`encoder input <https://docs.zephyrproject.org/latest/build/dts/api/bindings/input/zephyr,lvgl-encoder-input.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:109
msgid "`keypad input <https://docs.zephyrproject.org/latest/build/dts/api/bindings/input/zephyr,lvgl-keypad-input.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:111
msgid "Essentially those buffer the :code:`input_event` generated by the device pointed to by the :code:`input` phandle or if left empty the binding captures all events regardless of the source. You do not have to instantiate or manage the devices yourself, they are created at application start up before :code:`main()` is executed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:115
msgid "Most boards or shields that have a display or display connector have the pointer input device already declared:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:124
msgid "You can access the underlying lvgl :code:`lv_indev_t` for configuration. Example with the encoder device to assign a :code:`lv_group_t`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:146
msgid "Aside from enabling the shell you can also use Kconfig to fine-tune the footprint of your application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:157
msgid "Overlays can be used to enable/disable features for specific boards or build targets. For more information refer to the `application development guide <https://docs.zephyrproject.org/latest/develop/application/index.html#application-configuration>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:162
msgid "Performance Tuning in LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:164
msgid "To optimize LVGL's performance, several `kconfig` options can be configured:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:166
msgid "**CONFIG_LV_Z_VDB_SIZE**: Sets the rendering buffer size as a percentage of the display area, adjustable from 1% to 100%. Larger buffers can enhance performance, especially when used with **CONFIG_LV_Z_FULL_REFRESH**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:168
msgid "**CONFIG_LV_Z_DOUBLE_VDB**: Enables the use of two rendering buffers, allowing for parallel rendering and data flushing, thus improving responsiveness and reducing latency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:170
msgid "**CONFIG_LV_Z_VDB_ALIGN**: Ensures that the rendering buffer is properly aligned, which is critical for efficient memory access based on the color depth."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:172
msgid "**CONFIG_LV_Z_VBD_CUSTOM_SECTION**: Allows rendering buffers to be placed in a custom memory section (e.g., `.lvgl_buf`), useful for leveraging specific memory types like tightly coupled or external memory to enhance performance."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:175
msgid "Zephyr ≤ 3.7.0 Specific Options"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:177
msgid "For Zephyr versions 3.7.0 and below, additional options are available to manage LVGL's frame flushing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:179
msgid "**CONFIG_LV_Z_FLUSH_THREAD**: Enables flushing LVGL frames in a separate thread, allowing the main thread to continue rendering the next frame simultaneously. This option can be disabled if the performance gain is not needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:181
msgid "**CONFIG_LV_Z_FLUSH_THREAD_STACK_SIZE**: Specifies the stack size for the flush thread, with a default of 1024 bytes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:183
msgid "**CONFIG_LV_Z_FLUSH_THREAD_PRIO**: Sets the priority of the flush thread, with a default priority of 0, indicating cooperative priority."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:185
msgid "For newer versions of Zephyr, the OSAL (Operating System Abstraction Layer) can be utilized, which takes care of the flushing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:190
msgid "Zephyr Documentation: `Zephyr Documentation <https://docs.zephyrproject.org/latest/index.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:191
msgid "Zephyr mailing list: `Zephyr Mailing List <https://lists.zephyrproject.org/g/main>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/os/zephyr.rst:193
msgid "Zephyr Discord server: `Zephyr Discord server <https://chat.zephyrproject.org/>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:5
msgid "Arm-2D GPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:7
msgid "Arm-2D is not a GPU but **an abstraction layer for 2D GPUs dedicated to Microcontrollers**. It supports all Cortex-M processors ranging from Cortex-M0 to the latest Cortex-M85."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:11
msgid "Arm-2D accelerates LVGL9 with two modes: **Synchronous Mode** and **Asynchronous Mode**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:14
msgid "When **Helium** and **ACI (Arm Custom Instruction)** are available, it is recommend to use **Synchronous Mode** to accelerate LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:16
msgid "When Arm-2D backed 2D-GPUs are available, for example, **DMAC-350 based 2D GPUs**, it is recommend to use **Asynchronous Mode** to accelerate LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:19
msgid "Arm-2D is an open-source project on GitHub. For more, please refer to: https://github.com/ARM-software/Arm-2D."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:26
msgid "In general:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:28
msgid "you can set the macro :c:macro:`LV_USE_DRAW_ARM2D_SYNC` to ``1`` and :c:macro:`LV_DRAW_SW_ASM` to ``LV_DRAW_SW_ASM_HELIUM`` in ``lv_conf.h`` to enable Arm-2D synchronous acceleration for LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:31
msgid "You can set the macro :c:macro:`LV_USE_DRAW_ARM2D_ASYNC` to ``1`` in ``lv_conf.h`` to enable Arm-2D Asynchronous acceleration for LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:35
msgid "If you are using `CMSIS-Pack <https://github.com/lvgl/lvgl/tree/master/env_support/cmsis-pack>`__ to deploy the LVGL. You don't have to define the macro :c:macro:`LV_USE_DRAW_ARM2D_SYNC` manually, instead the lv_conf_cmsis.h will check the environment and set the :c:macro:`LV_USE_DRAW_ARM2D_SYNC` accordingly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:42
msgid "Design Considerations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:44
msgid "As mentioned before, Arm-2D is an abstraction layer for 2D GPU; hence if there is no accelerator or dedicated instruction set (such as Helium or ACI) available for Arm-2D, it provides negligible performance boost for LVGL (sometimes worse) for regular Cortex-M processors."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:49
msgid "**We highly recommend you enable Arm-2D acceleration for LVGL** when:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:51
msgid "The target processors are **Cortex-M55**, **Cortex-M52** and **Cortex-M85**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:52
msgid "The target processors support `Helium <https://developer.arm.com/documentation/102102/0103/?lang=en>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:54
msgid "The device vendor provides an arm-2d compliant driver for their proprietary 2D accelerators and/or ACI (Arm Customized Instruction)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:56
msgid "The target device contains `DMAC-350 <https://community.arm.com/arm-community-blogs/b/internet-of-things-blog/posts/arm-corelink-dma-350-next-generation-direct-memory-access-for-endpoint-ai>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:62
msgid "`A Cortex-M55 (supports Helium) based MDK Project, PC emulation is available. <https://github.com/lvgl/lv_port_an547_cm55_sim>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:68
msgid ":ref:`draw/sw/arm2d/lv_draw_sw_arm2d.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/arm2d.rst:70
msgid ":ref:`draw/sw/blend/arm2d/lv_blend_arm2d.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/espressif_ppa.rst:3
msgid "Espressif Pixel Processing Accelerator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/espressif_ppa.rst:11
msgid ":ref:`draw/espressif/ppa/lv_draw_ppa.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/espressif_ppa.rst:13
#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:157
msgid ":ref:`draw/espressif/ppa/lv_draw_ppa_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:3
msgid "EVE External GPU Renderer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:5
msgid "EVE is a type of external GPU IC which accepts high-level drawing commands over SPI and outputs the rendered graphics to a display over parallel RGB."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:8
msgid "The advantage of using an EVE chip is that the rendering responsibility is removed from the driving MCU so it can be a lower-spec part or dedicate more of its processing time to other tasks. The SPI interface is simpler to connect than parallel RGB especially if the EVE chip is integrated into a display assembly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:13
msgid "LVGL features a renderer for EVE. LVGL UIs can be rendered by EVE and are effectively indistinguishable from the software renderer is most cases."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:16
msgid "See also the :ref:`ft81x` framebuffer driver. It drives the same EVE chips but is a simpler, more standalone implementation which uses software rendering and sends all the pixels over SPI so it is much slower."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:24
msgid "Image format, size, and count limit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:25
msgid "Font format, size, and count limit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:26
msgid "The total number of tasks rendered per refresh has an upper limit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:27
msgid "Layers are not supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:34
msgid "Board Parameters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:36
msgid "Find your display parameters and populate a :cpp:struct:`lv_draw_eve_parameters_t` struct with them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:39
msgid "Here is an example ``lv_draw_eve_target_parameters.h`` for the Riverdi RVT50HQBNWC00-B which has a BT817Q --- the EVE chip. These parameters were taken from the collection of configs provided by the EVE library supporting this renderer. `See here <https://github.com/RudolphRiedel/FT800-FT813/blob/ee35fa45c37aed78dc4f1196b874ee1c8f80429f/EVE_config.h#L856-L872>`__. Check there for your board parameters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:71
msgid "EVE Chip IO Implementation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:73
msgid "The user is required to implement the GPIO and SPI IO functionality. The LVGL EVE renderer will call this callback to perform SPI communication with the EVE chip."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:112
msgid "You will also need to initialize your SPI peripheral and GPIO pins."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:114
msgid "22 MHz was the highest SPI speed that worked during testing with the Riverdi board and the ESP32-S3. You may not have success with this speed so it is recommended to validate with an ``SPI_SPEED`` value of ``10`` (10 MHz) and increase experimentally in your testing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:121
msgid "LVGL EVE Display Creation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:123
msgid "To create the LVGL display for the EVE renderer, you call :cpp:expr:`lv_draw_eve_display_create(params, op_cb, your_user_data)` which returns the created display. ``your_user_data`` can be ``NULL``. It should be called after GPIO and SPI is initialized. You may choose to initialize your IO the first time ``op_cb`` is called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:129
msgid "No buffers are required for the LVGL EVE renderer because no pixels are written to any buffers in the device running LVGL. When something needs to be drawn, a series of commands are sent to EVE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:135
msgid "Touch Indev Creation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:137
msgid ":cpp:expr:`lv_draw_eve_touch_create(disp)` creates a touch :ref:`indev` for the display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:139
msgid "You may need to configure the i2c address of the touch controller connected to EVE. See the section :ref:`eve register access` for more info about register access."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:142
msgid "Here is an example of setting the ``REG_TOUCH_CONFIG`` register on a BT817q EVE chip for a capacitive touch screen with a controller that has the i2c address ``0x15``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:164
msgid "Efficient display rotation is fully supported through :cpp:func:`lv_display_set_rotation`. Touch input rotation is handled accordingly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:171
msgid "EVE Register Access"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:173
msgid "The functions :cpp:func:`lv_draw_eve_memread8`, :cpp:func:`lv_draw_eve_memread16`, :cpp:func:`lv_draw_eve_memread32`, :cpp:func:`lv_draw_eve_memwrite8`, :cpp:func:`lv_draw_eve_memwrite16`, are :cpp:func:`lv_draw_eve_memwrite32` available if needed. They are wrappers around ``EVE_memRead8``, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:177
msgid "Register definitions and other EVE enumerations are available when you include ``lvgl.h`` under the prefix namespace ``LV_EVE_``. I.e., ``REG_ID`` is available as ``LV_EVE_REG_ID`` and ``EVE_ROM_CHIPID`` is available as ``LV_EVE_EVE_ROM_CHIPID``, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:185
msgid "https://brtchip.com/wp-content/uploads/Support/Documentation/Programming_Guides/ICs/EVE/FT81X_Series_Programmer_Guide.pdf"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/eve.rst:186
msgid "https://brtchip.com/wp-content/uploads/2024/06/BRT_AN_033_BT81X-Series-Programming-Guide.pdf"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/index.rst:3
msgid "Renderers and GPUs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:5
msgid "NemaGFX Acceleration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:7
msgid "NemaGFX is a high-level graphics API supported by many embedded 2.5D GPUs. LVGL can use it to natively render LVGL graphics."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:12
msgid "Get Started with the Riverdi STM32U5 5-inch Display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:14
msgid "`lv_port_riverdi_stm32u5 <https://github.com/lvgl/lv_port_riverdi_stm32u5>`__ is a ready-to-use port for the Riverdi STM32 5.0\" Embedded Display (STM32U599NJH6Q or STM32U5A9NJH6Q) which has Nema enabled. Follow the instructions in the readme to get started."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:19
msgid "`lv_port_stm32u5g9j-dk2 <https://github.com/lvgl/lv_port_stm32u5g9j-dk2>`__ is a ready-to-use port for the STM32U5G9J-DK2 devkit with a 5.0\" display and a NeoChrom VG GPU. Follow the instructions in the readme to get started."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:25
msgid "Usage and Configuration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:27
msgid "Enable the renderer by setting :c:macro:`LV_USE_NEMA_GFX` to ``1`` in lv_conf.h. If using :c:macro:`LV_USE_NEMA_VG`, set :c:macro:`LV_NEMA_GFX_MAX_RESX` and :c:macro:`LV_NEMA_GFX_MAX_RESY` to the size of the display you will be using so that enough static memory will be reserved for VG. Without VG, more task types will be performed by the software renderer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:34
msgid "\"libs/nema_gfx\" contains pre-compiled binaries for the Nema GPU drivers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:36
msgid "`lv_port_riverdi_stm32u5 <https://github.com/lvgl/lv_port_riverdi_stm32u5>`__ is already configured to link the \"cortex_m33_revC\" binaries when building and `lv_port_stm32u5g9j-dk2 <https://github.com/lvgl/lv_port_stm32u5g9j-dk2>`__ is configured to link the \"cortex_m33_NemaPVG\" binaries when building."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:41
msgid "\"cortex_m33_revC\" works on all STM32 m33 devices with a Nema core while \"cortex_m33_NemaPVG\" additionally supports the tesselation and matrix multiplication acceleration that the STM32 U5F and U5G Nema cores are capable of."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:45
msgid "With a different STM32CubeIDE project, you can configure the libraries to be linked by right-clicking the project in the \"Project Explorer\" sidebar, clicking \"Properties\", navigating to \"C/C++ Build\", \"Settings\", \"MCU G++ Linker\", and then \"Libraries\". Add an entry under \"Libraries (-l)\" that is \"nemagfx-float-abi-hard\". Add an entry under \"Library search path (-L)\" which is a path to \"libs/nema_gfx/lib/core/cortex_m33_revC/gcc\" e.g. \"${workspace_loc:/${ProjName}/Middlewares/LVGL/lvgl/libs/nema_gfx/lib/core/cortex_m33_revC/gcc}\". You will also want to add the \"libs/nema_gfx/include\" directory to your include search paths. Under \"MCU GCC Compiler\", \"Include paths\", add an entry to \"Include paths (-I)\" which is a path to \"libs/nema_gfx/include\" e.g. \"${workspace_loc:/${ProjName}/Middlewares/LVGL/lvgl/libs/nema_gfx/include}\". Click \"Apply and Close\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:60
msgid "``cannot find -lnemagfx-float-abi-hard: No such file or directory``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:62
msgid "The library version for ST was updated to ``revC`` so the path component ``cortex_m33`` must be updated to ``cortex_m33_revC`` in STM32CubeIDE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:66
msgid "32 and 16 bit :c:macro:`LV_COLOR_DEPTH` is supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:68
msgid "At the time of writing, :c:macro:`LV_USE_OS` support is experimental and not yet working in `lv_port_riverdi_stm32u5 <https://github.com/lvgl/lv_port_riverdi_stm32u5>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:72
msgid "NemaGFX requires a simple HAL implementation to allocate memory and optionally lock resources. You may use a custom HAL implementation for your platform or use one of the provided implementations by setting :c:macro:`LV_USE_NEMA_HAL` to a value other than :c:macro:`LV_NEMA_HAL_CUSTOM`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:78
msgid "TSC Images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:80
msgid "TSC (ThinkSilicon Compression) images can be drawn by this renderer. The TSC 4/6/6A/12/12A color formats are part of :cpp:type:`lv_color_format_t`. All other renderers will ignore images with these color formats. Define an image descriptor variable with the corresponding TSC color format and the GPU will be able to draw it directly. Stride does not need to be specified because it will be computed by the renderer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:101
msgid "The Nema renderer uses DMA2D to flush in parallel with rendering in `lv_port_riverdi_stm32u5 <https://github.com/lvgl/lv_port_riverdi_stm32u5>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:104
msgid "If your STM does not have the Nema GPU, it may still support DMA2D. DMA2D is a simple peripheral which can draw fills and images independently of the CPU. See the LVGL :ref:`DMA2D support <dma2d>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nema_gfx.rst:117
msgid ":ref:`draw/nema_gfx/lv_draw_nema_gfx.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_g2d.rst:3
msgid "NXP G2D GPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_g2d.rst:11
msgid ":ref:`draw/nxp/g2d/lv_draw_g2d.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_pxp.rst:3
msgid "NXP PXP GPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_pxp.rst:13
msgid ":ref:`draw/nxp/pxp/lv_draw_pxp.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_vglite_gpu.rst:3
msgid "NXP VGLite GPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/nxp_vglite_gpu.rst:11
#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:87
msgid ":ref:`draw/nxp/vglite/lv_draw_vglite.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sdl.rst:3
msgid "SDL Renderer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sdl.rst:12
msgid ":ref:`draw/sdl/lv_draw_sdl.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/stm32_dma2d.rst:3
msgid "STM32 DMA2D GPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/stm32_dma2d.rst:12
msgid ":ref:`draw/dma2d/lv_draw_dma2d.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/stm32_dma2d.rst:14
msgid ":ref:`draw/dma2d/lv_draw_dma2d_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:3
msgid "Software Renderer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:11
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:13
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:15
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_al88.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:17
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_argb8888.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:19
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_argb8888_premultiplied.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:21
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_i1.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:23
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_l8.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:25
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_rgb565.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:27
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_rgb565_swapped.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:29
msgid ":ref:`draw/sw/blend/lv_draw_sw_blend_to_rgb888.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:31
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:223
msgid ":ref:`draw/sw/lv_draw_sw.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:33
msgid ":ref:`draw/sw/lv_draw_sw_grad.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:35
msgid ":ref:`draw/sw/lv_draw_sw_mask.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:37
msgid ":ref:`draw/sw/lv_draw_sw_mask_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:39
msgid ":ref:`draw/sw/lv_draw_sw_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/sw.rst:41
#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:174
msgid ":ref:`draw/sw/lv_draw_sw_utils.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:5
msgid "VG-Lite General GPU"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:7
msgid "This is a generic VG-Lite rendering backend implementation that is designed to utilize `VeriSilicon <https://verisilicon.com/>`_'s generic API to operate GPU hardware as much as possible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:10
msgid "Even with different chip manufacturers, as long as they use the same version of VG-Lite API as the rendering backend, LVGL rendering acceleration can be supported without the need for LVGL adaptation work."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:17
msgid "Set :c:macro:`LV_USE_DRAW_VG_LITE` to 1 in ``lv_conf.h`` to enabled the VG-Lite rendering backend. Make sure that your hardware has been adapted to the VG-Lite API and that the absolute path to ``vg_lite.h``, which can be directly referenced by lvgl, has been exposed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:20
msgid "Confirm the GPU initialization method, there are two ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:22
msgid "The SDK calls the GPU initialization function on its own during system startup, and the GPU is available when LVGL starts; set :c:macro:`LV_VG_LITE_USE_GPU_INIT` to 0."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:23
msgid "LVGL actively calls the GPU initialization function, and the SDK needs to implement the public function `gpu_init()`. LVGL will call it to complete the GPU hardware initialization during startup; set :c:macro:`LV_VG_LITE_USE_GPU_INIT` to 1."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:26
msgid "Set the :c:macro:`LV_VG_LITE_USE_ASSERT` configuration to enable GPU call parameter checking. Due to the complexity of the parameters used in GPU calls, incorrect parameters can result in abnormal GPU hardware operation, such as forgetting to add an end symbol to the path or not meeting the alignment requirements for buffer stride. To quickly resolve such issues, strict parameter checking has been added before each VG-Lite call, including buffer stride validation and matrix invertibility check. When an error parameter is detected, an assertion will occur to print out the error parameter, allowing the user to promptly make corrections and reduce the time wasted on hardware simulation. Please note that enabling this check will decrease runtime performance. It is recommended to enable it in Debug mode and disable it in the Release version."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:33
msgid "Set the :c:macro:`LV_VG_LITE_FLUSH_MAX_COUNT` configuration to specify the flush method. VG-Lite uses two sets of command buffer buffers to render instructions, and utilizing this mechanism well can greatly improve drawing efficiency. Currently, two buffering methods are supported:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:37
msgid "Set :c:macro:`LV_VG_LITE_FLUSH_MAX_COUNT` to zero (recommended). The rendering backend will obtain the GPU's working status every time it writes rendering instructions to the command buffer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:39
msgid "When the GPU is idle, it will immediately call ``vg_lite_flush`` to notify the GPU to start rendering and swap the command buffer. When the GPU is busy, it will continue to fill the command buffer cache with rendering instructions. The underlying driver will automatically determine if the command buffer has been filled. When it is about to be filled, it will forcibly wait for the unfinished drawing tasks to end and swap the command buffer. This method can effectively improve GPU utilization, especially in scenarios where rendering text, as the GPU's drawing time and the CPU's data preparation time are very close, allowing the CPU and GPU to run in parallel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:43
msgid "Set :c:macro:`LV_VG_LITE_FLUSH_MAX_COUNT` to a value greater than zero, such as 8. After writing 8 rendering instructions to the command buffer, the rendering backend will call ``vg_lite_flush`` to notify the GPU to start rendering and swap the command buffer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:46
msgid "Set the :c:macro:`LV_VG_LITE_USE_BOX_SHADOW` configuration to use GPU rendering for shadows. In fact, GPU hardware does not actually support shadow rendering. However, through experimentation, it has been found that a similar shadow effect can be achieved by using multiple layers of borders with different levels of transparency. It is recommended to enable this configuration in scenarios where the shadow quality requirements are not high, as it can significantly improve rendering efficiency."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:51
msgid "Set the :c:macro:`LV_VG_LITE_GRAD_CACHE_CNT` configuration to specify the number of gradient cache entries. Gradient drawing includes linear gradients and radial gradients. Using a cache can effectively reduce the number of times the gradient image is created and improve drawing efficiency. Each individual gradient consumes around 4K of GPU memory pool. If there are many gradients used in the interface, you can try increasing the number of gradient cache entries. If the VG-Lite API returns the :c:macro:`VG_LITE_OUT_OF_RESOURCES` error, you can try increasing the size of the GPU memory pool or reducing the number of gradient cache entries."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:56
msgid "Set the :c:macro:`LV_VG_LITE_STROKE_CACHE_CNT` configuration to specify the number of stroke path caches. When the stroke parameters do not change, the previously generated stroke parameters are automatically retrieved from the cache to improve rendering performance. The memory occupied by the stroke is strongly related to the path length. If the VG-Lite API returns the :c:macro:`VG_LITE_OUT_OF_RESOURCES` error, you can try increasing the size of the GPU memory pool or reducing the number of stroke cache entries."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:61
msgid "NOTE: VG-Lite rendering backend does not support multi-threaded calls, please make sure :c:macro:`LV_USE_OS` is always configured as :c:macro:`LV_OS_NONE`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:67
msgid "LVGL integrates a VG-Lite simulator based on ThorVG. Its purpose is to simplify the debugging of VG-Lite adaptation and reduce the time of debugging and locating problems on hardware devices. For detailed instructions, see :ref:`vg_lite_tvg`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/integration/renderers/vg_lite.rst:89
msgid ":ref:`draw/nxp/vglite/lv_vglite_buf.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:5
msgid "Arduino ESP littlefs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:7
msgid "LittleFS is a little fail-safe filesystem designed for microcontrollers and integrated in the Arduino framework when used with ESP32 and ESP8266."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:10
#: ../../lvgl/docs/intermediate/details/libs/arduino_sd.rst:11
msgid "For a detailed introduction, see:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:12
msgid "https://github.com/esp8266/Arduino"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:13
msgid "https://github.com/espressif/arduino-esp32"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_esp_littlefs.rst:19
msgid "Enable :c:macro:`LV_USE_FS_ARDUINO_ESP_LITTLEFS` and define a :c:macro:`LV_FS_ARDUINO_ESP_LITTLEFS_LETTER` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_sd.rst:5
msgid "Arduino SD"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_sd.rst:7
msgid "Enables reading from and writing to SD cards. Once an SD memory card is connected to the SPI interface of the Arduino or Genuino board, you can create files and read from, and write to them.  You can also move through directories on the SD card."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_sd.rst:13
msgid "https://www.arduino.cc/reference/en/libraries/sd/"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/arduino_sd.rst:19
msgid "Enable :c:macro:`LV_USE_FS_ARDUINO_SD` and define a :c:macro:`LV_FS_ARDUINO_SD_LETTER` in ``lv_conf.h``. You will need to initialize the SD card before LVGL can use it (i.e. :cpp:expr:`SD.begin(0, SPI, 40000000)`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:5
msgid "Barcode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:7
msgid "The LVGL Barcode utility enables you to generate Code-128 bar codes.  It uses the `code128 <https://github.com/fhunleth/code128>`__ library by `fhunleth <https://github.com/fhunleth>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:18
msgid "Set :c:macro:`LV_USE_BARCODE` to ``1`` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:20
msgid "Use :cpp:func:`lv_barcode_create` to create a barcode object, and use :cpp:func:`lv_barcode_update` to generate a barcode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:23
msgid "Call :cpp:func:`lv_barcode_set_scale` to adjust scaling, call :cpp:func:`lv_barcode_set_dark_color` and :cpp:func:`lv_barcode_set_light_color` adjust colors.  Call :cpp:func:`lv_barcode_set_direction` to set the bar code's orientation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:28
msgid "By default, :cpp:enumerator:`LV_BARCODE_ENCODING_CODE128_GS1` encoding is used and strips ``[FCN1]`` and spaces. Optionally use :cpp:func:`lv_barcode_set_encoding` to set :cpp:enumerator:`LV_BARCODE_ENCODING_CODE128_RAW`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:33
msgid "After any of a bar code's settings have changed, call :cpp:func:`lv_barcode_update` again to regenerate it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:39
#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:34
msgid "Notes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:41
msgid "It is best not to manually set the width of the barcode, because when the width of the Widget is lower than the width of the barcode, the display will be incomplete due to truncation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:44
msgid "The scale adjustment can only be an integer multiple, for example, :cpp:expr:`lv_barcode_set_scale(barcode, 2)` means 2x scaling."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:46
msgid "The direction setting can be :cpp:enumerator:`LV_DIR_HOR` or :cpp:enumerator:`LV_DIR_VER`."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/barcode/index.rst:2
msgid "Create a Barcode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:68
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:121
msgid ":ref:`libs/barcode/lv_barcode.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/barcode.rst:70
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:123
msgid ":ref:`libs/barcode/lv_barcode_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:5
msgid "BMP Decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:7
msgid "This BMP Decoder utility allows you to use images from .BMP files in LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:9
msgid "Library source: https://github.com/caj-johnson/bmp-decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:11
msgid "Instead of loading the whole image at once, BMP pixels are read on demand, so using BMP images requires very little RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:14
msgid "If enabled in ``lv_conf.h`` by setting :c:macro:`LV_USE_BMP` to ``1``, LVGL will register a new image decoder automatically so BMP files can be directly used as image sources.  Example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:22
msgid "Note that, a :ref:`file_system` driver needs to registered to open images from files.  Follow the instructions in :ref:`file_system`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:32
msgid "Only BMP files are supported.  BMP images as C arrays (:c:struct:`lv_image_dsc_t`) are not.  This is because there is no practical differences between how the BMP files and LVGL's image format stores the image data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:36
msgid "BMP files can be loaded only from .BMP files. If you want to store them in flash it's better to convert them to a C array with `LVGL's image converter <https://lvgl.io/tools/imageconverter>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:38
msgid "The BMP file's color format needs to match the configured :c:macro:`LV_COLOR_DEPTH` of the display on which it will be rendered.  You can use GIMP to save the image in the required format.  Both RGB888 and ARGB888 works with :c:macro:`LV_COLOR_DEPTH` ``32``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:42
msgid "Color palettes are not supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:43
msgid "Because the whole image is not loaded, it cannot be zoomed or rotated."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/bmp/index.rst:2
msgid "Open a BMP image from file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/bmp.rst:63
msgid ":ref:`libs/bmp/lv_bmp.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:5
msgid "FFmpeg Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:7
msgid "**FFmpeg** is a complete, cross-platform solution to record, convert and stream audio and video."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:9
msgid "The FFmpeg is an LVGL extension that interfaces with the official FFmpeg library to help you add platform-independent recording, converting and streaming audio and video into your LVGL UI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:13
msgid "The set-up steps below are for Linux, but they can be adapted for other platforms."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:15
msgid "For a detailed introduction, see:  https://www.ffmpeg.org"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:20
msgid "Installing FFmpeg"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:26
msgid "Or download the FFmpeg library from `its official download page <https://www.ffmpeg.org/download.html>`__, then install it:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:38
msgid "Adding FFmpeg to Your Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:40
msgid "To use the ``FFmpeg`` library in your project, you will need to link against these libraries:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:0
msgid "libavformat"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:43
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:44
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:45
#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:46
msgid "part of FFmpeg library"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:0
msgid "libavcodec"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:0
msgid "libavutil"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:0
msgid "libswscale"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:0
msgid "libm"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:0
msgid "libz"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:0
msgid "libpthread"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:51
msgid "If you are using GCC-based toolchain, this can be taken care of by adding the following command-line options:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:65
msgid "Set the :c:macro:`LV_USE_FFMPEG` in ``lv_conf.h`` to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:67
msgid "Also set :c:macro:`LV_FFMPEG_PLAYER_USE_LV_FS` in ``lv_conf.h`` to ``1`` if you want to integrate the LVGL :ref:`file_system` extension into FFmpeg. This library can load videos and images. The LVGL file system will always be used when an image is loaded with :cpp:func:`lv_image_set_src` regardless of the value of :c:macro:`LV_FFMPEG_PLAYER_USE_LV_FS`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:73
msgid "See the examples below for how to correctly use this library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:82
msgid ":cpp:enumerator:`LV_EVENT_READY` Sent when playback is complete and auto-restart is not enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/ffmpeg/index.rst:2
msgid "Decode image"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/ffmpeg/index.rst:8
msgid "Decode video"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:102
msgid ":ref:`libs/ffmpeg/lv_ffmpeg.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/ffmpeg.rst:104
msgid ":ref:`libs/ffmpeg/lv_ffmpeg_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:5
msgid "FreeType Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:7
msgid "**FreeType** is a freely available software library to render fonts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:9
msgid "The LVGL FreeType extension is an interface to the FreeType library, enabling you to generate font bitmaps at run time from most vector- and bitmap-font file formats."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:12
msgid "For a detailed introduction, see:  https://freetype.org/ ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:17
msgid "Adding FreeType to Your Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:19
msgid "First, Download FreeType from the ``freetype2`` folder (and optionally ``freetype-docs`` and ``freetype-demos``) from its `official repository <https://sourceforge.net/projects/freetype/files/>`__.  (The latest version is recommended.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:24
msgid "If you haven't already done so, now is a good time to get familiar with setting up and configuring this library.  The above website is a good place to start, as is the ``README`` file in the top directory of the version you downloaded."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:28
msgid "There are two ways to use FreeType:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:31
msgid "For UNIX"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:33
msgid "For UNIX-like systems, the following is recommended to compile and install FreeType libraries."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:35
msgid "Enter the FreeType source code directory"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:36
msgid "``make``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:37
msgid "``sudo make install``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:38
msgid "Add include path: ``/usr/include/freetype2`` (for GCC: ``-I/usr/include/freetype2 -L/usr/local/lib``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:39
msgid "Link against library: ``freetype`` (for GCC: ``-L/usr/local/lib -lfreetype``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:42
msgid "For Embedded Devices"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:44
msgid "For embedded devices, it is recommended to use the FreeType configuration files provided by LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:47
msgid "lvgl/src/libs/freetype/ftmodule.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:48
msgid "lvgl/src/libs/freetype/ftoption.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:50
msgid "which only include the most commonly used modules and options, which is important to save limited FLASH space."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:53
msgid "Copy the FreeType source code to your project directory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:54
msgid "Refer to the following ``Makefile`` for configuration:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:87
msgid "Set :c:macro:`LV_USE_FREETYPE` in ``lv_conf.h`` to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:89
msgid "Cache configuration:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:91
msgid ":c:macro:`LV_FREETYPE_CACHE_FT_GLYPH_CNT` Maximum number of cached glyphs., etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:93
msgid "By default, the FreeType extension doesn't use LVGL's file system. You can simply pass the path to the font as usual on your operating system or platform."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:97
msgid "If you want FreeType to use LVGL's memory allocation and file system interface, you can enable :c:macro:`LV_FREETYPE_USE_LVGL_PORT` in ``lv_conf.h``, convenient for unified management.  If you do this, you will need to exclude the configured FreeType library's ``ftsystem.c`` file from being compiled, since LVGL's ``lv_ftsystem.c`` has custom versions of the functions defined therein."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:103
msgid "The font style supports *Italic* and **Bold** fonts processed by software, and can be set by using following values where style values are required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:106
msgid ":cpp:enumerator:`LV_FREETYPE_FONT_STYLE_NORMAL`: Default style."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:107
msgid ":cpp:enumerator:`LV_FREETYPE_FONT_STYLE_ITALIC`: Italic style."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:108
msgid ":cpp:enumerator:`LV_FREETYPE_FONT_STYLE_BOLD`:  Bold style."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:110
msgid "These values can be combined, e.g. :cpp:expr:`LV_FREETYPE_FONT_STYLE_BOLD | LV_FREETYPE_FONT_STYLE_ITALIC`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:113
msgid "The FreeType extension also supports colored bitmap glyphs such as emojis. Note that only bitmaps are supported at this time. Colored vector graphics cannot be rendered. An example on how to draw a colored bitmap glyph is shown below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:117
msgid "Use the :cpp:func:`lv_freetype_font_create` function to create a font. To delete a font, use :cpp:func:`lv_freetype_font_delete`. For more detailed usage, please refer to the example code below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:125
msgid "`FreeType tutorial <https://www.freetype.org/freetype2/docs/tutorial/step1.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:126
msgid "LVGL's :ref:`add_font`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:128
msgid "Rendering vector fonts is supported with VGLite or ThorVG, when using vector fonts with ThorVG, it is possible to set a letter outline of a different color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:131
msgid "This is achieved by setting the style attributes with the :cpp:func:`lv_style_set_text_outline_width` and :cpp:func:`lv_style_set_text_outline_color` functions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:134
msgid "You will have to account for the increased width and height of letter due to the added letter outline, to avoid letters overlapping space them out using :cpp:func:`lv_style_set_text_letter_space`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:137
msgid "To use vector fonts with ThorVG, you will have to enable ``LV_USE_VECTOR_GRAPHICS`` in ``lv_conf.h``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:141
msgid "This feature is currently experimental, there are clipping issues especially when using large font sizes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:143
msgid "See the :cpp:func:`lv_example_freetype_2_vector_font` function for a usage example"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/freetype/index.rst:2
msgid "Create a font with FreeType"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/freetype/index.rst:8
msgid "Use a bitmap font to draw Emojis using FreeType"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/freetype/index.rst:14
msgid "Freetype font kerning"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:164
msgid ":ref:`libs/freetype/lv_freetype.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/freetype.rst:166
msgid ":ref:`libs/freetype/lv_freetype_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:5
msgid "File System Interfaces"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:7
msgid "LVGL's :ref:`file_system` module provides an abstraction that enables you to attach any type of file system for LVGL's use.  File systems already supported are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:10
msgid "`FATFS <http://elm-chan.org/fsw/ff/00index_e.html>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:11
msgid "STDIO (Linux and Windows using C standard function .e.g ``fopen``, ``fread``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:12
msgid "POSIX (Linux and Windows using POSIX function .e.g ``open``, ``read``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:13
msgid "WIN32 (Windows using Win32 API function .e.g ``CreateFileA``, ``ReadFile``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:14
msgid "MEMFS (read a file from a memory buffer)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:15
msgid "LITTLEFS (a little fail-safe filesystem designed for microcontrollers)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:16
msgid "Arduino ESP LITTLEFS (a little fail-safe filesystem designed for Arduino ESP)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:17
msgid "Arduino SD (allows for reading from and writing to SD cards)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:19
msgid "You still need to provide the drivers and libraries, this extension provides only the bridge between LVGL and these file systems."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:29
msgid "In ``lv_conf.h`` enable ``LV_USE_FS_...`` (by setting its value to ``1``) and assign an upper cased letter to ``LV_FS_..._DRIVER_LETTER`` (e.g. ``'S'``).  If more than one file system is enabled, each driver will need to have a unique driver-identifier letter.  After that you can access files using that driver letter.  Example with driver identifier letter ``'S'``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:0
msgid "Linux-like relative path"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:35
msgid "``\"S:path/to/file.txt\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:0
msgid "Linux-like absolute path"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:36
msgid "``\"S:/path/to/file.txt\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:0
msgid "Windows-like relative path"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:37
msgid "``\"S:C:path/to/file.txt\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:0
msgid "Windows-like absolute path"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:38
msgid "``\"S:C:/path/to/file.txt\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:40
msgid "Do not confuse the driver-identifier letter with the Windows/DOS/FAT \"drive letter\", which is part of the path passed to the OS-level functions.  For more details, see :ref:`lv_fs_identifier_letters`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:44
msgid ":ref:`Cached reading <file_system_cache>` is also supported if ``LV_FS_..._CACHE_SIZE`` is set to a non-zero value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/fs.rst:47
msgid "For further details, including how to create support for your own file system, see :ref:`file_system`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:5
msgid "GIF Decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:7
msgid "**GIF Decoder** is an LVGL extension that enables you to use GIF images in your LVGL UI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:9
msgid "For a detailed introduction, see:  https://github.com/lecram/gifdec ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:16
msgid "Once enabled in ``lv_conf.h`` by setting :c:macro:`LV_USE_GIF` to ``1``, :cpp:expr:`lv_gif_create(parent)` can be used to create a gif widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:19
msgid ":cpp:expr:`lv_gif_set_src(widget, src)` works very similarly to :cpp:func:`lv_image_set_src`. As source, it also accepts images as variables (:c:struct:`lv_image_dsc_t`) or files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:23
msgid "Converting GIF Files to C Arrays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:25
msgid "To convert a GIF file to an array of bytes, use `LVGL's online converter <https://lvgl.io/tools/imageconverter>`__. Select \"Raw\" color format and \"C array\" Output format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:30
msgid "Using GIF Images from Files"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:38
msgid "Note that, a file system driver needs to be registered to open images from files.  To do so, follow the instructions in :ref:`file_system`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:44
msgid "Memory Requirements"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:46
msgid "To decode and display a GIF animation the following amount of RAM (in bytes) is required for each of the following color depths:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:51
msgid ":c:macro:`LV_COLOR_DEPTH` ``8``: 3 |times| image width |times| image height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:52
msgid ":c:macro:`LV_COLOR_DEPTH` ``16``: 4 |times| image width |times| image height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:53
msgid ":c:macro:`LV_COLOR_DEPTH` ``32``: 5 |times| image width |times| image height"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/gif/index.rst:2
msgid "Open a GIF image from file and variable"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:75
msgid ":ref:`libs/gif/lv_gif.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/gif.rst:77
msgid ":ref:`libs/gif/lv_gif_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/index.rst:5
msgid "3rd-Party Libraries"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:5
msgid "littlefs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:7
msgid "**littlefs** is a little fail-safe filesystem library designed for microcontrollers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:9
msgid "The lv_fs_littlefs extension is an interface to the littlefs library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:11
msgid "For a detailed introduction, see:  https://github.com/littlefs-project/littlefs ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:18
msgid "Set :c:macro:`LV_USE_FS_LITTLEFS` in ``lv_conf.h`` to ``1`` and define an upper-case letter (as a C character type) for :c:macro:`LV_FS_LITTLEFS_LETTER` in the range ['A'..'Z']."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:22
msgid "When enabled :cpp:func:`lv_littlefs_set_handler` can be used to set up a mount point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:65
#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:400
msgid ":ref:`libs/fsdrv/lv_fsdrv.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lfs.rst:67
msgid "See also:  `lvgl/src/libs/fsdrv/lv_fs_littlefs.c <https://github.com/lvgl/lvgl/blob/master/src/libs/fsdrv/lv_fs_littlefs.c>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:5
msgid "libjpeg-turbo Decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:7
msgid "**libjpeg-turbo** is an LVGL interface to the libjpeg-turbo library --- a JPEG image codec that uses SIMD instructions to accelerate baseline JPEG compression and decompression on x86, x86-64, Arm, PowerPC, and MIPS systems, as well as progressive JPEG compression on x86, x86-64, and Arm systems."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:12
msgid "On such systems, libjpeg-turbo is generally 2-6x as fast as libjpeg, all else being equal."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:15
msgid "For a detailed introduction, see:  https://libjpeg-turbo.org ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:17
msgid "Library source:  https://github.com/libjpeg-turbo/libjpeg-turbo"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:24
#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:16
msgid "Install"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:33
msgid "Adding  libjpeg-turbo to Your Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:35
#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:27
msgid "Cmake:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:50
msgid "Set :c:macro:`LV_USE_LIBJPEG_TURBO` in ``lv_conf.h`` to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:52
#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:44
#: ../../lvgl/docs/intermediate/details/libs/svg.rst:19
msgid "See the examples below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:56
msgid "It should be noted that each image decoded needs to consume:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:58
msgid "image width |times| image height |times| 3"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:60
msgid "bytes of RAM, and it needs to be combined with the :ref:`overview_image_caching` feature to ensure that the memory usage is within a reasonable range."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/libjpeg_turbo/index.rst:2
#: ../../lvgl/docs/intermediate/examples/libs/tjpgd/index.rst:2
msgid "Load a JPG image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libjpeg_turbo.rst:79
msgid ":ref:`libs/libjpeg_turbo/lv_libjpeg_turbo.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:5
msgid "libpng Decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:7
msgid "**libpng** is an LVGL interface to the the official PNG reference library, which supports almost all PNG features, is extensible, and has been extensively tested for over 28 years."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:11
msgid "For a detailed introduction, see:  http://www.libpng.org/pub/png/libpng.html ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:25
msgid "Adding libpng to Your Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:42
msgid "Set :c:macro:`LV_USE_LIBPNG` in ``lv_conf.h`` to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:48
msgid "It should be noted that each image of this decoder needs to consume"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:50
#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:26
msgid "width |times| height |times| 4"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:52
msgid "bytes of RAM, and it needs to be combined with the :ref:`overview_image_caching` feature to ensure that the memory usage is within a reasonable range. The decoded image is stored in RGBA pixel format."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/libpng/index.rst:2
#: ../../lvgl/docs/intermediate/examples/libs/lodepng/index.rst:2
msgid "Open a PNG image from file and variable"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/libpng.rst:76
msgid ":ref:`libs/libpng/lv_libpng.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:5
msgid "LodePNG Decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:7
msgid "**LodePNG** is an LVGL interface to the LodePNG library --- a PNG encoder and decoder in C and C++, without any dependencies, giving you an alternate way to use PNG images in your LVGL UI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:11
msgid "For a detailed introduction, see:  https://github.com/lvandeve/lodepng ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:13
msgid "If enabled in ``lv_conf.h`` by setting :c:macro:`LV_USE_LODEPNG` to ``1``, LVGL will register a new image decoder automatically so PNG files can be used directly as an image source."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:19
#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:47
msgid "A file system driver needs to be registered to open images from files.  To do so, follow the instructions in :ref:`file_system`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:24
msgid "The whole PNG image is decoded, so"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:28
msgid "bytes of RAM is required from the LVGL heap.  The decoded image is stored in RGBA pixel format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:31
msgid "Since it might take significant time to decode PNG images LVGL's :ref:`overview_image_caching` feature can be useful."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:37
msgid "Compressing PNG Files"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:39
msgid "PNG file format supports True color (24/32 bit), and 8-bit palette colors. Usually cliparts, drawings, icons and simple graphics are stored in PNG format, that do not use the whole color space, so it is possible to compress further the image by using 8-bit palette colors, instead of 24/32 bit True color format. Because embedded devices have limited (flash) storage, it is recommended to compress images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:46
msgid "One option is to use a free online PNG compressor site, for example Compress PNG: https://compresspng.com/"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/lodepng.rst:69
msgid ":ref:`libs/lodepng/lv_lodepng.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:5
msgid "QR Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:7
msgid "The `QR-Code-generator library <https://github.com/nayuki/QR-Code-generator>`__ by `nayuki <https://github.com/nayuki>`__ is a 3rd-party library that generates QR-Code bitmaps."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:11
msgid "The lv_qrcode LVGL extension is an interface to that library which implements a custom Widget that generates and displays QR Codes using the library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:21
msgid "Enable :c:macro:`LV_USE_QRCODE` in ``lv_conf.h`` by setting its value to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:23
msgid "Use :cpp:func:`lv_qrcode_create` to create the QR-Code Widget.  Then use :cpp:func:`lv_qrcode_update` to generate the QR Code on it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:26
msgid "If you need to re-modify the size and color, use :cpp:func:`lv_qrcode_set_size` and :cpp:func:`lv_qrcode_set_dark_color` or :cpp:func:`lv_qrcode_set_light_color` respectively, and then call :cpp:func:`lv_qrcode_update` again to update the QR Code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:36
msgid "QR Codes with less data are smaller, but they are scaled by an integer value to best fit to the given size."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/qrcode/index.rst:2
msgid "Create a QR Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:59
msgid ":ref:`libs/qrcode/lv_qrcode.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/qrcode.rst:61
msgid ":ref:`libs/qrcode/lv_qrcode_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:5
msgid "RLE Decompression"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:7
msgid "LVGL provides a custom RLE (Run-Length Encoding) decompression method.  It can be used to reduce binary image size.  The RLE compression is a lossless compression method."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:11
msgid "The LVGL's built-in binary image decoder supports RLE-compressed images. The decoder supports both variable and file as image sources. The original binary data is directly decoded to RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:18
msgid "Benefits"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:20
msgid "Most screenshot and UI images (where there are a limited number of colors) can be compressed to save more than 70% space.  The below statistics are from a watch project.  It shows the file count of every compress level. For rare conditions, RLE compress may increase the file size if there's no large repetition in data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:25
msgid "RLE compress statistics from a watch project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:31
msgid "Theory"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:33
msgid "The RLE algorithm is a simple compression algorithm that is based on the fact that for many adjacent pixels, the color is the same.  The algorithm simply counts how many repeated pixels with the same color there are, and stores the count value and the color value.  If the up-coming pixels are not repeated, it stores the non-repeat count value and original color values.  For more details, the script used to compress the image can be found from ``lvgl/script/LVGLImage.py``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:76
msgid "To use the RLE Decoder, enable it in ``lv_conf.h`` configuration file by setting :c:macro:`LV_USE_RLE` to ``1``.  The RLE image can then be used in the same way as other images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:87
msgid "Generating RLE Compressed Binary Images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:89
msgid "An RLE image binary can be directly generated from another image using script ``lvgl/script/LVGLImage.py``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:96
msgid "This will decompress ``cogwheel.png``, and then re-compress it using RLE and write the output to ``./output/cogwheel.bin``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rle.rst:104
msgid ":ref:`libs/rle/lv_rle.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:5
msgid "Rlottie Player"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:8
msgid "Rlottie is deprecated.  Consider using the :ref:`lv_lottie` Widget instead."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:10
msgid "The `Rlottie animation player for LVGL <https://github.com/ValentiWorkLearning/lv_rlottie>`__ is a 3rd-party extension for LVGL that allows playing Lottie animations in LVGL. It provides an interface to `Samsung/rlottie <https://github.com/Samsung/rlottie>`__ library's C API.  This Lottie player is not part of LVGL; it needs to be built separately."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:19
msgid "Building Rlottie"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:21
msgid "To build Samsung's Rlottie, you will need a C++14-compatible compiler and optionally CMake 3.14 or higher."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:24
msgid "To build on a desktop you can follow the instructions from Rlottie's `README <https://github.com/Samsung/rlottie/blob/master/README.md>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:27
msgid "In the most basic case it looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:40
msgid "And finally add the ``-lrlottie`` flag to your linker."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:42
msgid "On embedded systems you need to take care of integrating Rlottie to the given build system."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:45
msgid "See the ESP-IDF example below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:54
msgid "You can use animation from files or raw data (text). In either case first you need to enable :c:macro:`LV_USE_RLOTTIE` in ``lv_conf.h`` by setting its value to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:58
msgid "The ``width`` and ``height`` of the Widget is set in the ``lv_rlottie_create_from_...()`` function, and the animation will be scaled accordingly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:62
msgid "Use Rlottie from File"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:64
msgid "To create a Lottie animation from a file, use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:70
msgid "Note that, Rlottie uses the standard STDIO C file API, so you can use the path \"normally\" and no LVGL specific driver letter is required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:74
msgid "Use Rlottie from Raw String Data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:76
msgid "``lv_example_rlottie_approve.c`` contains an example animation in raw format. Instead of storing the JSON string, a hex array is stored for the following reasons:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:80
msgid "avoid escaping ``\"`` character in the JSON file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:81
msgid "some compilers don't support very long strings"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:83
msgid "``lvgl/scripts/filetohex.py`` can be used to convert a Lottie file a hex array. E.g.:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:90
msgid "``--filter-character`` filters out non-ASCII characters and ``--null-terminate`` makes sure that a trailing zero is appended to properly terminate the string."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:93
msgid "To create an animation from raw data:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:103
msgid "Getting Animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:105
msgid "Lottie is standard and popular format so you can find many animation files on the web.  For example:  https://lottiefiles.com/ ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:108
msgid "You can also create your own animations with Adobe After Effects or similar software."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:114
msgid "Controlling Animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:116
msgid "LVGL provides two functions to control the animation mode: :cpp:func:`lv_rlottie_set_play_mode` and :cpp:func:`lv_rlottie_set_current_frame`. You'll combine your intentions when calling the first method, like in these examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:135
msgid "The default animation mode is **play forward with loop**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:137
msgid "If you don't enable looping, a :cpp:enumerator:`LV_EVENT_READY` is sent when the animation cannot make more progress without looping."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:140
msgid "To get the number of frames in an animation or the current frame index, you can cast the :c:struct:`lv_obj_t` instance to a :c:struct:`lv_rlottie_t` instance and inspect the ``current_frame`` and ``total_frames`` members."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:147
msgid "ESP-IDF Example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:152
msgid "Rlottie can be expensive to render on embedded hardware. Lottie animations tend to use a large amount of CPU time and can use large portions of RAM. This will vary from lottie to lottie but in general for best performance:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:157
msgid "Limit total # of frames in the animation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:158
msgid "Where possible, try to avoid bezier type animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:159
msgid "Limit animation render size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:161
msgid "If your ESP32 chip does not have SPIRAM you will face severe limitations in render size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:164
msgid "To give a better idea on this, lets assume you want to render a 240x320 lottie animation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:167
msgid "In order to pass initialization of the lv_rlottie_t object, you need 240x320x32/8 (307k) available memory. The latest ESP32-S3 has 256kb RAM available for this (before FreeRTOS and any other initialization starts taking chunks out). So while you can probably start to render a 50x50 animation without SPIRAM, PSRAM is highly recommended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:173
msgid "Additionally, while you might be able to pass initialization of the ``lv_rlottie_t`` object, as rlottie renders frame to frame, this consumes additional memory. A 30-frame animation that plays over 1 second probably has minimal issues, but a 300 frame animation playing over 10 seconds could very easily crash due to lack of memory as rlottie renders, depending on the complexity of the animation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:180
msgid "Rlottie will not compile for the IDF using the ``-02`` compiler option at this time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:183
msgid "For stability in lottie animations, this author has found that they run best in the IDF when enabling :c:macro:`LV_MEM_CUSTOM` (using ``stdlib.h``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:186
msgid "For all its faults, when running right-sized animations, they provide a wonderful utility to LVGL on embedded LCDs and can look really good when done properly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:190
msgid "When picking/designing a lottie animation consider the following limitations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:193
msgid "Build the lottie animation to be sized for the intended size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:194
msgid "It can scale/resize, but performance will be best when the base lottie size is as intended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:195
msgid "Limit total number of frames, the longer the lottie animation is, the more memory it will consume for rendering (rlottie consumes IRAM for rendering)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:197
msgid "Build the lottie animation for the intended frame rate."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:198
msgid "Default lottie is 60fps, embedded LCDs likely won't go above 30fps."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:201
msgid "IDF Setup"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:203
msgid "Where the LVGL simulator uses the installed rlottie lib, the IDF works best when using rlottie as a submodule under the components directory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:213
msgid "Now, Rlottie is available as a component in the IDF, but it requires some additional changes and a CMakeLists file to tell the IDF how to compile."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:218
msgid "Rlottie Patch File"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:220
msgid "Rlottie relies on dynamic linking for an image loader lib. This needs to be disabled as the IDF doesn't play nice with dynamic linking."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:223
msgid "A patch file is available in LVGL under: ``/env_support/esp/rlottie/0001-changes-to-compile-with-esp-idf.patch``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:226
msgid "Apply the patch file to your rlottie submodule."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:229
msgid "CMakeLists for IDF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:231
msgid "An example CMakeLists file has been provided at ``/env_support/esp/rlottie/CMakeLists.txt``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:234
msgid "Copy this CMakeLists file to ``'your-project-directory'/components/rlottie/``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:237
msgid "In addition to the component CMakeLists file, you'll also need to tell your project level CMakeLists in your IDF project to require rlottie:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:244
msgid "From here, you should be able to use lv_rlottie objects in your ESP-IDF project as any other widget in LVGL ESP examples. Please remember that these animations can be highly resource constrained and this does not guarantee that every animation will work."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:250
msgid "Additional Rlottie Considerations in ESP-IDF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:252
msgid "While unnecessary, removing the ``rlottie/rlottie/example`` folder can remove many un-needed files for this embedded LVGL application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:255
msgid "From here, you can use the relevant LVGL ``lv_rlottie...()`` functions to create lottie animations in LVGL on embedded hardware!"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:258
msgid "Please note, that while lottie animations are capable of running on many ESP chips, below is recommended for best performance."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:261
msgid "ESP32-S3-WROOM-1-N16R8"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:263
msgid "16mb quad spi flash"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:264
msgid "8mb octal spi PSRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:266
msgid "IDF4.4 or higher"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:268
msgid "The Esp-box devkit meets this spec and https://github.com/espressif/esp-box is a great starting point to adding lottie animations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:272
msgid "You will need to enable :c:macro:`LV_USE_RLOTTIE` through **idf.py** menuconfig under LVGL component settings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:276
msgid "Additional Changes to Make Use of SPIRAM"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:278
msgid ":cpp:expr:`lv_alloc/realloc` does not make use of SPIRAM. Given the high memory usage of lottie animations, it is recommended to shift as much out of internal DRAM into SPIRAM as possible. In order to do so, SPIRAM will need to be enabled in the menuconfig options for your given espressif chip."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:283
msgid "There may be a better solution for this, but for the moment the recommendation is to make local modifications to the LVGL component in your espressif project. This is as simple as swapping :cpp:expr:`lv_alloc/lv_realloc` calls in `lv_rlottie.c`` with :cpp:expr:`heap_caps_malloc` (for IDF) with the appropriate :cpp:expr:`MALLOC_CAP` call --- for SPIRAM usage this is :cpp:expr:`MALLOC_CAP_SPIRAM`."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/rlottie/index.rst:2
msgid "Load a Lottie animation from raw data"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/rlottie/index.rst:8
msgid "Load a Lottie animation from a file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:313
msgid ":ref:`libs/rlottie/lv_rlottie.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/rlottie.rst:315
msgid ":ref:`libs/rlottie/lv_rlottie_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:5
msgid "SVG Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:7
msgid "The lv_svg extension provides makes it possible to use SVG images in your LVGL UI using the `Scalable Vector Graphics (SVG) Tiny 1.2 Specification <https://www.w3.org/TR/SVGTiny12/>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:10
msgid "For a detailed introduction, see:  https://www.w3.org/TR/SVGTiny12/"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:17
msgid "Enable :c:macro:`LV_USE_SVG` in ``lv_conf.h`` by setting its value to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:21
msgid "If you need support for SVG animation attribute parsing, you can set :c:macro:`LV_USE_SVG_ANIMATION` in ``lv_conf.h`` to ``1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:47
msgid "`lv_image` also supports SVG images, For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:65
msgid ":ref:`libs/svg/lv_svg.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:67
msgid ":ref:`libs/svg/lv_svg_decoder.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:69
msgid ":ref:`libs/svg/lv_svg_parser.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:71
msgid ":ref:`libs/svg/lv_svg_render.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/svg.rst:73
msgid ":ref:`libs/svg/lv_svg_token.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:5
msgid "Tiny TTF font engine"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:7
msgid "The lv_tiny_ttf extension allows using TrueType fonts in LVGL using the `stb_truetype 3rd-Party Library <https://github.com/nothings/stb>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:10
msgid "For a detailed introduction, see:  https://github.com/nothings/stb."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:19
msgid "When enabled in ``lv_conf.h`` by setting :c:macro:`LV_USE_TINY_TTF` to ``1``, :cpp:expr:`lv_tiny_ttf_create_data(data, data_size, font_size)` can be used to create a TTF font instance with the specified line height.  You can then use that font anywhere :c:struct:`lv_font_t` is accepted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:24
msgid "By default, the TTF or OTF file must be embedded as an array, either in a header, or loaded into RAM in order to function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:27
msgid "However, if :c:macro:`LV_TINY_TTF_FILE_SUPPORT` is enabled (i.e. ``1``), :cpp:expr:`lv_tiny_ttf_create_file(path, font_size)` will also be available, allowing tiny_ttf to stream from a file. The file must remain open the entire time the font is being used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:32
msgid "After a font is created, you can change the font size in pixels by using :cpp:expr:`lv_tiny_ttf_set_size(font, font_size)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:35
msgid "By default, a font will cache data for up to 256 glyph elements to speed up rendering. This maximum can be changed by using :cpp:expr:`lv_tiny_ttf_create_data_ex(data, data_size, font_size, kerning, cache_size)` or :cpp:expr:`lv_tiny_ttf_create_file_ex(path, font_size, kerning, cache_size)` (when available). The cache size is indicated in number of entries.  The ``kerning`` argument will be one of the ``LV_FONT_KERNING_...`` values, indicating whether to allow kerning, if supported, or disable."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/tiny_ttf/index.rst:2
msgid "Open a font with Tiny TTF from data array"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/tiny_ttf/index.rst:9
msgid "Load a font with Tiny_TTF from file"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/libs/tiny_ttf/index.rst:15
msgid "Change font size with Tiny_TTF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tiny_ttf.rst:63
msgid ":ref:`libs/tiny_ttf/lv_tiny_ttf.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:5
msgid "Tiny JPEG Decompressor (TJpgDec)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:7
msgid "**Tiny JPEG Decompressor** is an LVGL interface to the TJpgDec library --- a generic JPEG image decompressor module that highly optimized for small embedded systems.  It works with very low memory consumption, so that it can be incorporated into tiny microcontrollers, such as AVR, 8051, PIC, Z80, Cortex-M0, etc.."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:12
msgid "For a detailed introduction, see: `TJpgDec <http://elm-chan.org/fsw/tjpgd/>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:21
msgid "Features and restrictions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:23
msgid "JPEG is decoded in 8x8 tiles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:24
msgid "Only baseline JPEG files are supported (no progressive JPEG support)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:25
msgid "Read from file and C array are implemented."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:26
msgid "Only the required portions of the JPEG images are decoded, therefore they cannot be zoomed or rotated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:36
msgid "Set :c:macro:`LV_USE_TJPGD` to ``1`` in ``lv_conf.h``.  LVGL will register a new image decoder automatically so JPEG files can be used directly as image sources."
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:53
msgid "Converter"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:56
msgid "Converting JPEG to C array"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:58
msgid "Use lvgl online tool https://lvgl.io/tools/imageconverter"
msgstr ""

#: ../../lvgl/docs/intermediate/details/libs/tjpgd.rst:59
msgid "Color format = RAW, output format = C Array"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:5
msgid "Animation (lv_anim)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:7
msgid "Animations allow you to define the way something should move or change over time, and let LVGL do the heavy lifting of making it happen.  What makes it so powerful is that the thing being changed can be virtually anything in your system.  It is very convenient to apply this to LVGL Widgets in your user interface (UI), to change their appearance, size or location over time.  But because it is --- at its core --- a generic change-over-time manager, complete with a variety of optional event callbacks, its application can be wider than just to UI components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:15
msgid "For each Animation you create, it accomplishes the above by providing a generic method of varying a signed integer from a start value to an end value over a specified time period.  It allows you to specify what object it applies to (the \"variable\"), which is available in the callback functions that are called as the Animation is playing through."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:21
msgid "This variation over time can be linear (default), it can be on a path (curve) that you specify, and there is even a variety of commonly-used non-linear effects that can be specified."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:25
msgid "The main callback called during an Animation (when it is playing) is called an *animator* function, which has the following prototype:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:32
msgid "This prototype makes it easy to use most of the LVGL *set* functions directly or via a trivial wrapper. It includes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:34
msgid "most of the widget properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:35
msgid "functions that set :ref:`local style properties <style_local>` directly on objects (needs a wrapper to set the *selector*)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:36
msgid "set properties on :cpp:type:`lv_style_t` objects (e.g. :ref:`shared styles <style_initialize>`)  (``lv_obj_report_style_change`` needs to be called to notify the widgets having the style)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:38
msgid "``lv_style_set_<property_name>(&style, <value>)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:39
msgid "``lv_obj_set_<property_name>(widget, <value>)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:41
msgid "Because of the former, an animation on a single :cpp:type:`lv_style_t` object shared among several objects can simultaneously modify the appearance of all objects that use it.  See :ref:`styles` for more details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:45
msgid "Examples of the latter are:  :cpp:expr:`lv_obj_set_x(widget, value)` or :cpp:expr:`lv_obj_set_width(widget, value)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:48
msgid "This makes it very convenient to apply to the appearance (and other attributes) of UI components.  But you can provide your own \"set\" functions, and so the application of Animations is really limited only by your imagination."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:52
msgid "The number of Animations that can be playing at the same time for a given object with a given *animator* callback is one (1).  However, the number of Animations that can be playing at the same time is limited only by available RAM and CPU time for:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:56
msgid "a given object with different *animator* callbacks; and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:57
msgid "different objects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:59
msgid "Thus, you can have a Button's width being changed by one Animation while having its height being changed by another Animation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:67
msgid "Create an Animation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:69
msgid "To create an Animation, start by creating an Animation *template* in an :cpp:type:`lv_anim_t` variable.  It has to be initialized and configured with ``lv_anim_set_...()`` functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:141
msgid "Animation Path"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:143
msgid "You can control the Path (curve) of an Animation.  The simplest case is linear, meaning the current value between *start* and *end* is changed at the same rate (i.e. with fixed steps) over the duration of the Animation.  A *Path* is a function which calculates the next value to set based on the current state of the Animation. There are a number of built-in *Paths* that can be used:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:149
msgid ":cpp:func:`lv_anim_path_linear`: linear Animation (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:150
msgid ":cpp:func:`lv_anim_path_step`: change in one step at the end"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:151
msgid ":cpp:func:`lv_anim_path_ease_in`: slow at the beginning"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:152
msgid ":cpp:func:`lv_anim_path_ease_out`: slow at the end"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:153
msgid ":cpp:func:`lv_anim_path_ease_in_out`: slow at the beginning and end"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:154
msgid ":cpp:func:`lv_anim_path_overshoot`: overshoot the end value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:155
msgid ":cpp:func:`lv_anim_path_bounce`: bounce back a little from the end value (like hitting a wall)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:158
msgid "Alternately, you can provide your own Path function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:160
msgid ":cpp:expr:`lv_anim_init(&my_anim)` sets the Path to :cpp:func:`lv_anim_path_linear` by default.  If you want to use a different Path (including a custom Path function you provide), you set it using :cpp:expr:`lv_anim_set_path_cb(&anim_template, path_cb)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:164
msgid "If you provide your own custom Path function, its prototype is:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:175
msgid "Speed vs Time"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:177
msgid "Normally, you set the Animation duration directly using :cpp:expr:`lv_anim_set_duration(&anim_template, duration_in_ms)`.  But in some cases the *rate* is known but the duration is not known.  Given an Animation's ``start`` and ``end`` values, *rate* here means the number of units of change per second, i.e. how quickly (units per second) the Animation's value needs to change between the ``start`` and ``end`` value.  For such cases there is a utility function :cpp:func:`lv_anim_speed_to_time` you can use to compute the Animation's duration, so you can set it like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:198
msgid "Animating in Both Directions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:200
msgid "Sometimes an Animation needs to play forward, and then play backwards, effectively reversing course, animating from the ``end`` value back to the ``start`` value again. To do this, pass a non-zero value to this function to set the duration for the reverse portion of the Animation: :cpp:expr:`lv_anim_set_reverse_duration(&anim_template, duration_in_ms)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:206
msgid "Optionally, you can also introduce a delay between the forward and backward directions using :cpp:expr:`lv_anim_set_reverse_delay(&anim_template, delay_in_ms)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:214
msgid "Starting an Animation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:216
msgid "After you have set up your :cpp:type:`lv_anim_t` object, it is important to realize that what you have set up is a \"template\" for a live, running Animation that has not been created yet.  When you call :cpp:expr:`lv_anim_start(&anim_template)` passing the *template* you have set up, it uses your template to dynamically allocate an internal object that is a *live, running* Animation.  This function returns a pointer to that object."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:237
msgid ":cpp:expr:`lv_anim_start(&anim_template)` makes its own copy of the Animation template, so if you do not need it later, its contents do not need to be preserved after this call."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:241
msgid "Once a *live running* Animation has been started, it runs until it has completed, or until it is deleted (see below), whichever comes first.  An Animation has completed when:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:245
msgid "its \"value\" has reached the designated ``end`` value;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:246
msgid "if the Animation has a non-zero *reverse* duration value, then its value has run from the ``end`` value back to the ``start`` value again;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:248
msgid "if a non-zero repeat count has been set, it has repeated the Animation that number of times."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:251
msgid "Once the *live, running* Animation reaches completion, it is automatically deleted from the list of running Animations.  This does not impact your Animation template."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:256
msgid "If :cpp:expr:`lv_anim_set_repeat_count(&anim_template, cnt)` has been called passing :c:macro:`LV_ANIM_REPEAT_INFINITE`, the animation never reaches a state of being \"completed\".  In this case, it must be deleted to terminate the Animation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:266
msgid "Deleting Animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:268
msgid "You should delete an Animation using :cpp:expr:`lv_anim_delete(var, func)` if one of these two conditions exists:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:271
msgid "the object (variable) being animated is deleted (and it is not a Widget) or"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:272
msgid "a running animation needs to be stopped before it is completed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:276
msgid "If the object (variable) being deleted is a type of Widget, the housekeeping code involved in deleting it also deletes any running animations that are connected with it.  So :cpp:expr:`lv_anim_delete(var, func)` only needs to be called if the object being deleted is *not* one of the Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:281
msgid "If you kept a copy of the pointer returned by :cpp:func:`lv_anim_start` as ``running_anim``, you can delete the running animation like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:288
msgid "In the event that the Animation completes *after* you have determined it needs to be deleted, and before the call to :cpp:func:`lv_anim_delete` is made, it does no harm to call it a second time --- no damage will occur."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:292
msgid "This function returns a Boolean value indicating whether any *live, running* Animations were deleted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:299
msgid "Pausing Animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:301
msgid "If you kept a copy of the pointer returned by :cpp:func:`lv_anim_start`, you can pause the running animation using :cpp:expr:`lv_anim_pause(animation)` and then resume it using :cpp:expr:`lv_anim_resume(animation)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:305
msgid ":cpp:expr:`lv_anim_pause_for(animation, milliseconds)` is also available if you wish for the animation to resume automatically after."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:312
msgid "Timeline"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:314
msgid "You can create a series of related animations that are linked together using an Animation Timeline.  A Timeline is a collection of multiple Animations which makes it easy to create complex composite Animations.  To create and use an Animation Timeline:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:318
msgid "Create an Animation template but do not call :cpp:func:`lv_anim_start` on it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:320
msgid "Create an Animation Timeline object by calling :cpp:func:`lv_anim_timeline_create`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:322
msgid "Add Animation templates to the Timeline by calling :cpp:expr:`lv_anim_timeline_add(timeline, start_time, &anim_template)`. ``start_time`` is the start time of the Animation on the Timeline.  Note that ``start_time`` will override any value given to :cpp:expr:`lv_anim_set_delay(&anim_template, delay)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:328
msgid "Call :cpp:expr:`lv_anim_timeline_start(timeline)` to start the Animation Timeline."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:332
msgid ":cpp:expr:`lv_anim_timeline_add(timeline, start_time, &anim_template)` makes its own copy of the contents of the Animation template, so if you do not need it later, its contents do not need to be preserved after this call."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:336
msgid "It supports forward and reverse play of the entire Animation group, using :cpp:expr:`lv_anim_timeline_set_reverse(timeline, reverse)`. Note that if you want to play in reverse from the end of the Timeline, you need to call :cpp:expr:`lv_anim_timeline_set_progress(timeline, LV_ANIM_TIMELINE_PROGRESS_MAX)` after adding all Animations and before telling it to start playing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:342
msgid "Call :cpp:expr:`lv_anim_timeline_pause(timeline)` to pause the Animation Timeline. Note:  this does not preserve its state.  The only way to start it again is to call :cpp:expr:`lv_anim_timeline_start(timeline)`, which starts the Timeline from the beginning or at the point set by :cpp:expr:`lv_anim_timeline_set_progress(timeline, progress)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:348
msgid "Call :cpp:expr:`lv_anim_timeline_set_progress(timeline, progress)` function to set the state of the Animation Timeline according to the ``progress`` value.  ``progress`` is a value between ``0`` and ``32767`` (:c:macro:`LV_ANIM_TIMELINE_PROGRESS_MAX`) to indicate the proportion of the Timeline that has \"played\".  Example:  a ``progress`` value of :cpp:expr:`LV_ANIM_TIMELINE_PROGRESS_MAX / 2` would set the Timeline play to its half-way point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:355
msgid "Call :cpp:expr:`lv_anim_timeline_get_playtime(timeline)` function to get the total duration (in milliseconds) of the entire Animation Timeline."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:358
msgid "Call :cpp:expr:`lv_anim_timeline_get_reverse(timeline)` function to get whether the Animation Timeline is also played in reverse after its forward play completes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:361
msgid "Call :cpp:expr:`lv_anim_timeline_delete(timeline)` function to delete the Animation Timeline. **Note**: If you need to delete a Widget during Animation, be sure to delete the Animation Timeline before deleting the Widget. Otherwise, the program may crash or behave abnormally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/animation.rst:365
msgid "If a base object is set with :cpp:expr:`lv_anim_timeline_set_base_object(timeline, obj)`, ``var`` in the added animations is assumed to be a widget name (or path) string. The actual widgets are retrieved by :cpp:expr:`lv_obj_get_child_by_name` before calling the ``exec_cb`` of the animation. That is, the ``exec_cb`` gets a pointer to the widget, and not the name/path."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/anim/index.rst:3
msgid "Start animation on an event"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/anim/index.rst:9
msgid "Playback animation"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/anim/index.rst:14
msgid "Cubic Bezier animation"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/anim/index.rst:19
msgid "Pause animation"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/anim/index.rst:24
msgid "Animation timeline"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:5
msgid "Color (lv_color)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:7
msgid "The color module handles all color-related functions like changing color depth, creating colors from hex code, converting between color depths, mixing colors, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:11
msgid "The type :cpp:type:`lv_color_t` is used to store a color in RGB888 format. This type and format are used in almost all APIs regardless of :cpp:expr:`LV_COLOR_DEPTH`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:19
msgid "Creating Colors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:22
msgid "RGB"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:24
msgid "Create colors from Red, Green and Blue channel values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:42
msgid "HSV"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:44
msgid "Create colors from Hue, Saturation and Value values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:61
msgid "Palette"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:63
msgid "LVGL includes `Material Design's palette <https://vuetifyjs.com/en/styles/colors/#material-colors>`__ of colors. In this system all named colors have a nominal main color as well as four darker and five lighter variants."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:67
msgid "The names of the colors are as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:69
msgid ":c:macro:`LV_PALETTE_RED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:70
msgid ":c:macro:`LV_PALETTE_PINK`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:71
msgid ":c:macro:`LV_PALETTE_PURPLE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:72
msgid ":c:macro:`LV_PALETTE_DEEP_PURPLE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:73
msgid ":c:macro:`LV_PALETTE_INDIGO`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:74
msgid ":c:macro:`LV_PALETTE_BLUE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:75
msgid ":c:macro:`LV_PALETTE_LIGHT_BLUE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:76
msgid ":c:macro:`LV_PALETTE_CYAN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:77
msgid ":c:macro:`LV_PALETTE_TEAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:78
msgid ":c:macro:`LV_PALETTE_GREEN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:79
msgid ":c:macro:`LV_PALETTE_LIGHT_GREEN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:80
msgid ":c:macro:`LV_PALETTE_LIME`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:81
msgid ":c:macro:`LV_PALETTE_YELLOW`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:82
msgid ":c:macro:`LV_PALETTE_AMBER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:83
msgid ":c:macro:`LV_PALETTE_ORANGE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:84
msgid ":c:macro:`LV_PALETTE_DEEP_ORANGE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:85
msgid ":c:macro:`LV_PALETTE_BROWN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:86
msgid ":c:macro:`LV_PALETTE_BLUE_GREY`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:87
msgid ":c:macro:`LV_PALETTE_GREY`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:89
msgid "To get the main color use :cpp:expr:`lv_color_t` ``c =`` :cpp:expr:`lv_palette_main(LV_PALETTE_...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:92
msgid "For the lighter variants of a palette color use :cpp:expr:`lv_color_t` ``c =`` :cpp:expr:`lv_palette_lighten(LV_PALETTE_..., v)`. ``v`` can be 1..5. For the darker variants of a palette color use :cpp:expr:`lv_color_t` ``c =`` :cpp:expr:`lv_palette_darken(LV_PALETTE_..., v)`. ``v`` can be 1..4."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:101
msgid "Modify and mix colors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:103
msgid "The following functions can modify a color:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:123
msgid "Built-in colors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:125
msgid ":cpp:func:`lv_color_white` and :cpp:func:`lv_color_black` return ``0xFFFFFF`` and ``0x000000`` respectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:133
msgid "Opacity"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:135
msgid "To describe opacity the :cpp:type:`lv_opa_t` type is created from ``uint8_t``. Some special purpose defines are also introduced:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:138
msgid ":cpp:enumerator:`LV_OPA_TRANSP` Value: 0, means no opacity making the color completely transparent"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:140
msgid ":cpp:enumerator:`LV_OPA_10` Value: 25, means the color covers only a little"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:141
msgid "``LV_OPA_20 ... OPA_80`` follow logically"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:142
msgid ":cpp:enumerator:`LV_OPA_90` Value: 229, means the color nearly completely covers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:143
msgid ":cpp:enumerator:`LV_OPA_COVER` Value: 255, means the color completely covers (full opacity)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:146
msgid "You can also use the ``LV_OPA_*`` defines in :cpp:func:`lv_color_mix` as a mixing *ratio*."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:159
msgid ":ref:`misc/lv_color.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/color.rst:161
msgid ":ref:`misc/lv_color_op.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:5
msgid "Color Format"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:7
msgid "The default color format of the display is set according to :c:macro:`LV_COLOR_DEPTH` (see ``lv_conf.h``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:10
msgid ":c:macro:`LV_COLOR_DEPTH` ``32``: XRGB8888 (4 bytes/pixel)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:11
msgid ":c:macro:`LV_COLOR_DEPTH` ``24``: RGB888 (3 bytes/pixel)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:12
msgid ":c:macro:`LV_COLOR_DEPTH` ``16``: RGB565 (2 bytes/pixel)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:13
msgid ":c:macro:`LV_COLOR_DEPTH` ``8``: L8 (1 bytes/pixel)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:14
msgid ":c:macro:`LV_COLOR_DEPTH` ``1``: I1 (1 bit/pixel) Only support for horizontal mapped buffers. See :ref:`display_monochrome` for more details:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:16
msgid "The ``color_format`` can be changed with :cpp:expr:`lv_display_set_color_depth(display, LV_COLOR_FORMAT_...)`. Besides the default value :c:macro:`LV_COLOR_FORMAT_ARGB8888`, other formats can be used as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:20
msgid "It's very important that draw buffer(s) should be large enough for the selected color format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:28
msgid "Swapping Endian-ness"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:30
msgid "In case of RGB565 color format it might be required to swap the 2 bytes because the SPI, I2C or 8 bit parallel port periphery sends them in the wrong order."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:33
msgid "The ideal solution is to configure the hardware to handle the 16-bit data with a different byte order, however if this is not possible :cpp:expr:`lv_draw_sw_rgb565_swap(buf, buf_size_in_px)` can be called in the :ref:`flush_callback` to swap the bytes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:37
msgid "If you wish you can also write your own function, or use assembly instructions for the fastest possible byte swapping."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:40
msgid "Note that this is not about swapping the Red and Blue channel but converting"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:42
msgid "``RRRRR GGG | GGG BBBBB``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:44
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:68
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:109
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:48
msgid "to"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:46
msgid "``GGG BBBBB | RRRRR GGG``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:53
msgid "Monochrome Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:55
msgid "LVGL supports rendering directly in a 1-bit format for monochrome displays. To enable it, set ``LV_COLOR_DEPTH 1`` or use :cpp:expr:`lv_display_set_color_format(display, LV_COLOR_FORMAT_I1)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:58
msgid "The :cpp:expr:`LV_COLOR_FORMAT_I1` format assumes that bytes are mapped to rows (i.e., the bits of a byte are written next to each other). The order of bits is MSB first, which means:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:66
msgid "are represented on the display as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:73
msgid "Ensure that the LCD controller is configured accordingly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:75
msgid "Internally, LVGL rounds the redrawn areas to byte boundaries. Therefore, updated areas will:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:77
msgid "start on an ``Nx8`` coordinate, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:78
msgid "end on an ``Nx8 - 1`` coordinate."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:80
msgid "When setting up the buffers for rendering (:cpp:func:`lv_display_set_buffers`), make the buffer 8 bytes larger. This is necessary because LVGL reserves 2 x 4 bytes in the buffer, as these are assumed to be used as a palette."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:83
msgid "To skip the palette, include the following line in your :ref:`flush_callback` function: ``px_map += 8``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:85
msgid "As usual, monochrome displays support partial, full, and direct rendering modes as well. In full and direct modes, the buffer size should be large enough for the whole screen, meaning ``(horizontal_resolution x vertical_resolution / 8) + 8`` bytes. As LVGL can not handle fractional width make sure to round the horizontal resolution to 8 bits (for example 90 to 96)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:91
msgid "The :cpp:func:`lv_draw_sw_i1_convert_to_vtiled` function is used to convert a draw buffer in I1 color format from a row-wise (htiled) to a column-wise (vtiled) buffer layout.  This conversion is necessary for certain display controllers that require a different draw buffer mapping.  The function assumes that the buffer width and height are rounded to a multiple of 8.  The bit order of the resulting vtiled buffer can be specified using the `bit_order_lsb` parameter."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:98
msgid "For more details, refer to the implementation in :cpp:func:`lv_draw_sw_i1_convert_to_vtiled` in :file:`src/draw/sw/lv_draw_sw.c`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:101
msgid "To ensure that the redrawn areas start and end on byte boundaries, you can add a rounder callback to your display driver.  This callback will round the width and height to the nearest multiple of 8."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:105
msgid "Here is an example of how to implement and set a rounder callback:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:120
msgid "In this example, the `my_rounder_cb` function rounds the coordinates of the redrawn area to the nearest multiple of 8. The `x1` and `y1` coordinates are rounded down, while the `x2` and `y2` coordinates are rounded up. This ensures that the width and height of the redrawn area are always multiples of 8."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:130
msgid "Transparent Screens"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:132
msgid "Usually, the opacity of the Screen is :cpp:enumerator:`LV_OPA_COVER` to provide a solid background for its children. If this is not the case (opacity < 100%) the display's ``bottom_layer`` will be visible.  If the bottom layer's opacity is also not :cpp:enumerator:`LV_OPA_COVER` LVGL will have no solid background to draw."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:138
msgid "This configuration (transparent Screen) could be useful to create, for example, on-screen display (OSD) menus where a video is played on a different hardware layer of the display panel, and a menu is overlaid on a higher layer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:142
msgid "To properly render a UI on a transparent Screen the Display's color format needs to be set to one with an alpha channel (for example LV_COLOR_FORMAT_ARGB8888)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:145
msgid "In summary, to enable transparent screens and displays for OSD menu-like UIs:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:147
msgid "Set the screen's ``bg_opa`` to transparent: :cpp:expr:`lv_obj_set_style_bg_opa(lv_screen_active(), LV_OPA_TRANSP, LV_PART_MAIN)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:149
msgid "Set the bottom layer's ``bg_opa`` to transparent: :cpp:expr:`lv_obj_set_style_bg_opa(lv_layer_bottom(), LV_OPA_TRANSP, LV_PART_MAIN)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:151
msgid "Set a color format with alpha channel. E.g. :cpp:expr:`lv_display_set_color_format(disp, LV_COLOR_FORMAT_ARGB8888)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/color_format.rst:176
#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:86
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:225
msgid ":ref:`lv_conf_internal.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events.rst:7
msgid ":cpp:expr:`lv_display_add_event_cb(disp, event_cb, LV_EVENT_..., user_data)` adds an event handler to a display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events.rst:10
msgid "If you added ``user_data`` to the Display, you can retrieve it in an event like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/display_events.rst:19
msgid "The following events are sent for Display (lv_display_t) objects:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:5
msgid "Extending/Combining Displays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:10
msgid "Mirroring a Display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:12
msgid "To mirror the image of a display to another display, you don't need to use multi-display support. Just transfer the buffer received in the first display's :ref:`flush_callback` to the other display as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:21
msgid "Splitting an Image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:23
msgid "You can create a larger virtual display from an array of smaller ones. You can create it by:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:26
msgid "setting the resolution of the displays to the large display's resolution;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:27
msgid "in :ref:`flush_callback`, truncate and modify the ``area`` parameter for each display; and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/extending_combining.rst:28
msgid "send the buffer's content to each real display with the truncated area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:5
msgid "Inactivity Measurement"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:7
msgid "A user's inactivity time is measured and stored with each ``lv_display_t`` object. Every use of an :ref:`Input Device <indev>` (if :ref:`associated with the display <indev_other_features>`) counts as activity. To get time elapsed since the last activity, use :cpp:expr:`lv_display_get_inactive_time(display1)`. If ``NULL`` is passed, the lowest inactivity time among all displays will be returned (in this case NULL does *not* mean the :ref:`default_display`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:14
msgid "You can manually trigger an activity using :cpp:expr:`lv_display_trigger_activity(display1)`.  If ``display1`` is ``NULL``, the :ref:`default_display` will be used (**not all displays**)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:21
msgid "`lv_port_disp_template.c <https://github.com/lvgl/lvgl/blob/master/examples/porting/lv_port_disp_template.c>`__ for a template for your own driver."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/inactivity.rst:23
msgid ":ref:`Drawing <draw>` to learn more about how rendering works in LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/index.rst:5
msgid "Display (lv_display)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:8
msgid "What is a Display?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:10
msgid "In LVGL, an *lv_display_t* (not to be confused with a :ref:`Screen <screens>`) is a data type that represents a single display panel --- the hardware that displays LVGL-rendered pixels on your device."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:19
msgid "How Many Displays Can LVGL Use?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:21
msgid "LVGL can use any number of displays.  It is only limited by available RAM and MCU time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:23
msgid "Why would you want multi-display support? Here are some examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:25
msgid "Have a \"normal\" TFT display with local UI and create \"virtual\" screens on VNC on demand. (You need to add your VNC driver.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:27
msgid "Have a large TFT display and a small monochrome display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:28
msgid "Have some smaller and simple displays in a large instrument or technology."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:29
msgid "Have two large TFT displays: one for a customer and one for the shop assistant."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:31
msgid "If you set up LVGL to use more than one display, be aware that some functions use the :ref:`default_display` during their execution, such as creating :ref:`screens`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:41
msgid "Once created, a Display object remembers the characteristics of the display hardware it is representing, as well as other things relevant to its lifetime:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:44
msgid "Resolution (width and height in pixels)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:45
msgid "Color Depth (bits per pixel)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:46
msgid "Color Format (how colors in pixels are laid out)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:47
msgid "DPI (default is configured :c:macro:`LV_DPI_DEF` in ``lv_conf.h``, but can be modified with :cpp:expr:`lv_display_set_dpi(disp, new_dpi)`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:49
msgid "4 :ref:`display_screen_layers` automatically created with each display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:50
msgid "All :ref:`screens` created in association with this display (and not yet deleted---only one is displayed at any given time)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:52
msgid "The :ref:`draw_buffers` assigned to it"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:53
msgid "The :ref:`flush_callback` function that moves pixels from :ref:`draw_buffers` to Display hardware"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:54
msgid "What areas of the display have been updated (made \"dirty\") so rendering logic can compute what to render during a :ref:`display refresh <basic_data_flow>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:56
msgid "Optional custom pointer as :ref:`display_user_data`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:63
msgid "User Data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/overview.rst:65
msgid "With :cpp:expr:`lv_display_set_user_data(display1, p)` a custom pointer can be stored with ``lv_display_t`` object.  This pointer can be used later, e.g. in :ref:`display_events`.   See code example for how to do this in :ref:`display_events`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/redraw_area.rst:5
msgid "Constraints on Redrawn Area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/redraw_area.rst:7
msgid "Some display controllers have specific requirements for the window area where the rendered image can be sent (e.g., `x1` must be even, and `x2` must be odd)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/redraw_area.rst:10
msgid "In the case of monochrome displays, `x1` must be `Nx8`, and `x2` must be `Nx8 - 1`. (If the display uses `LV_COLOR_FORMAT_I1`, LVGL automatically applies this rounding. See :ref:`display_monochrome`.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/redraw_area.rst:14
msgid "The size of the invalidated (redrawn) area can be controlled as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:5
msgid "Refreshing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:8
msgid "Default Refresh Behavior"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:10
msgid "Normally the dirty (a.k.a invalid) areas are checked and redrawn in every :c:macro:`LV_DEF_REFR_PERIOD` milliseconds (set in ``lv_conf.h``). This happens as a result of a refresh :ref:`timer` created that gets created when the display is created, and is executed at that interval."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:20
msgid "Decoupling the Display Refresh Timer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:22
msgid "However, in some cases you might need more control on when display refreshing happens, for example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:25
msgid "to synchronize rendering with VSYNC or the TE signal;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:27
msgid "to time display refreshes immediately after a single screen update of all widgets that needed to have their display data updated (i.e. only updated once immediately before display refresh to reduce CPU overhead)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:31
msgid "You can do this in the following way:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:41
msgid "If you have multiple displays call :cpp:expr:`lv_display_set_default(display1)` to select the display to refresh before :cpp:expr:`lv_display_refr_timer(NULL)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:45
msgid ":cpp:func:`lv_timer_handler` and :cpp:func:`lv_display_refr_timer` must not run at the same time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:48
msgid "If the performance monitor is enabled, the value of :c:macro:`LV_DEF_REFR_PERIOD` needs to be set to match the refresh period of the display to ensure that the statistical results are correct."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:56
msgid "Forcing a Refresh"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:58
msgid "Normally the invalidated areas (marked for redrawing) are rendered in :cpp:func:`lv_timer_handler` in every :c:macro:`LV_DEF_REFR_PERIOD` milliseconds. However, by using :cpp:expr:`lv_refr_now(display)` you can tell LVGL to redraw the invalid areas immediately. The refreshing will happen in :cpp:func:`lv_refr_now` which might take longer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/refreshing.rst:64
msgid "The parameter of :cpp:func:`lv_refr_now` is a pointer to the display to refresh.  If ``NULL`` is passed, all displays that have active refresh timers will be refreshed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/resolution.rst:5
msgid "Changing Resolution"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/resolution.rst:7
msgid "To set the resolution of the display after creation use :cpp:expr:`lv_display_set_resolution(display, hor_res, ver_res)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/resolution.rst:10
msgid "It's not mandatory to use the whole display for LVGL, however in some cases the physical resolution is important. For example, the touchpad still sees the whole resolution, and the values need to be converted to the active LVGL display area. So the physical resolution and the offset of the active area can be set with :cpp:expr:`lv_display_set_physical_resolution(disp, hor_res, ver_res)` and :cpp:expr:`lv_display_set_offset(disp, x, y)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:5
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:57
msgid "Rotation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:7
msgid "LVGL supports rotation of the display in 90 degree increments."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:9
msgid "The orientation of the display can be changed with :cpp:expr:`lv_display_set_rotation(disp, LV_DISPLAY_ROTATION_xxx)` where ``xxx`` is 0, 90, 180 or 270. This will swap the horizontal and vertical resolutions internally according to the set degree; however, it will not perform the actual rotation. When changing the rotation, the :cpp:enumerator:`LV_EVENT_SIZE_CHANGED` event is emitted to allow for hardware reconfiguration. If your display panel and/or its driver chip(s) do not support rotation, :cpp:func:`lv_draw_sw_rotate` can be used to rotate the buffer in the :ref:`flush_callback` function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:18
msgid ":cpp:expr:`lv_display_rotate_area(display, &area)` rotates the rendered area according to the current rotation settings of the display."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:21
msgid "Note that in :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_DIRECT` the small changed areas are rendered directly in the frame buffer so they cannot be rotated later. Therefore in direct mode only the whole frame buffer can be rotated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:25
msgid "In the case of :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_PARTIAL` the small rendered areas can be rotated on their own before flushing to the frame buffer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:28
msgid ":cpp:enumerator:`LV_DISPLAY_RENDER_MODE_FULL` can work with rotation if the buffer(s) being rendered to are different than the buffer(s) being rotated to in the flush callback and the buffers being rendered to do not have a stride requirement."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:32
msgid "Below is an example for rotating when the rendering mode is :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_PARTIAL` and the rotated image should be sent to a **display controller**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/rotation.rst:65
msgid "Below is an example for rotating when the rendering mode is :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_PARTIAL` and the image can be rotated directly into a **frame buffer of the LCD peripheral**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:5
msgid "Screen Layers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:7
msgid "When an ``lv_display_t`` object is created, 4 permanent :ref:`screens` that facilitate layering are created and attached to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:10
msgid "Bottom Layer       (below Active Screen, transparent, not scroll-able, but click-able)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:11
msgid ":ref:`active_screen`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:12
msgid "Top Layer          (above Active Screen, transparent and neither scroll-able nor click-able)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:13
msgid "System Layer       (above Top Layer, transparent and neither scroll-able nor click-able)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:15
msgid "1, 3 and 4 are independent of the :ref:`active_screen` and they will be shown (if they contain anything that is visible) regardless of which screen is the :ref:`active_screen`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:21
msgid "For the bottom layer to be visible, the Active Screen's background has to be at least partially, if not fully, transparent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:24
msgid "You can get pointers to each of these screens on the :ref:`default_display` by using (respectively):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:27
msgid ":cpp:func:`lv_screen_active`,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:28
msgid ":cpp:func:`lv_layer_top`,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:29
msgid ":cpp:func:`lv_layer_sys`, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:30
msgid ":cpp:func:`lv_layer_bottom`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:32
msgid "You can get pointers to each of these screens on a specified display by using (respectively):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:35
msgid ":cpp:expr:`lv_display_get_screen_active(disp)`,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:36
msgid ":cpp:expr:`lv_display_get_layer_top(disp)`,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:37
msgid ":cpp:expr:`lv_display_get_layer_sys(disp)`, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:38
msgid ":cpp:expr:`lv_display_get_layer_bottom(disp)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:40
msgid "To set a Screen you create to be the :ref:`active_screen`, call :cpp:func:`lv_screen_load` or :cpp:func:`lv_screen_load_anim`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:48
msgid "Top and System Layers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:50
msgid "LVGL uses the Top Layer and System Layer to empower you to ensure that certain :ref:`widgets` are *always* on top of other layers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:53
msgid "You can add \"pop-up windows\" to the *Top Layer* freely.  The Top Layer was meant to be used to create Widgets that are visible on all Screens shown on a Display.  But, the *System Layer* is intended for system-level things (e.g. mouse cursor will be placed there with :cpp:func:`lv_indev_set_cursor`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:58
msgid "These layers work like any other Widget, meaning they have styles, and any kind of Widgets can be created in them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:62
msgid "While the Top Layer and System Layer are created by their owning :ref:`display` as not scroll-able and not click-able, these behaviors can be overridden the same as any other Widget by using :cpp:expr:`lv_obj_set_scrollbar_mode(scr1, LV_SCROLLBAR_MODE_xxx)` and :cpp:expr:`lv_obj_add_flag(scr1, LV_OBJ_FLAG_CLICKABLE)` respectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:67
msgid "If the :cpp:enumerator:`LV_OBJ_FLAG_CLICKABLE` flag is set on the Top Layer, then it will absorb all user clicks and acts as a modal Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:81
msgid "Similar to the Top- and System Layers, the Bottom Layer is also the full size of the Display, but it is located below the :ref:`active_screen`.  It's visible only if the Active Screen's background opacity is < 255."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/screen_layers.rst:88
msgid ":ref:`transparent_screens`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:5
msgid "Setting Up Your Display(s)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:7
msgid "During system initialization, you must do the following for each physical display panel you want LVGL to use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:10
msgid ":ref:`create an lv_display_t <creating_a_display>` object for it,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:11
msgid "assign its :ref:`draw_buffers`, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:12
msgid "assign a :ref:`flush_callback` for it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:19
msgid "Creating a Display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:21
msgid "To create a display for LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:27
msgid "You can create :ref:`multiple displays <multiple_displays>` with a different driver for each (see below)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:30
msgid "When an ``lv_display_t`` object is created, with it are created 4 Screens set up to help you manage layering of displayed Widgets.  See :ref:`transparent_screens` and :ref:`display_screen_layers` for more information."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:38
msgid "Default Display"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:39
msgid "When the first :ref:`display` object is created, it becomes the Default Display.  If other Display Objects are created (to service additional Display Panels), the Default Display remains the first one created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:43
msgid "To set another :ref:`display` as the Default Display, call :cpp:func:`lv_display_set_default`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:45
msgid "See :ref:`multiple_displays` for more information about using multiple displays."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:47
msgid "For many ``lv_display_...()`` functions, passing NULL for the ``disp`` argument will cause the function to target the Default Display.  Check the API documentation for the function you are calling to be sure."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:56
msgid "Draw Buffer(s)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:58
msgid "During system initialization, you must set drawing buffers for LVGL to use for each display.  Do so by calling:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:65
msgid "``buf1`` a buffer to which LVGL can render pixels"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:66
msgid "``buf2`` a second optional buffer (see below)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:67
msgid "``buf_size_in_bytes`` size of buffer(s) in bytes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:68
msgid "``render_mode`` is one of the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:70
msgid ":cpp:enumerator:`LV_DISPLAY_RENDER_MODE_PARTIAL` Use the buffer(s) to render to the display using buffers smaller than the size of the display.  Use of buffers at least 1/10 display size is recommended.  In :ref:`flush_callback` the rendered images need to be copied to the given area of the display.  In this mode if a button is pressed only the button's area will be redrawn."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:75
msgid ":cpp:enumerator:`LV_DISPLAY_RENDER_MODE_DIRECT` The buffer size(s) must match the size of the display.  LVGL will render into the correct location of the buffer.  Using this method the buffer(s) always contain the whole display image. If two buffers are used, the rendered areas are automatically copied to the other buffer after flushing.  Due to this in :ref:`flush_callback` typically only a frame buffer address needs to be changed.  If a button is pressed only the button's area will be redrawn."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:82
msgid ":cpp:enumerator:`LV_DISPLAY_RENDER_MODE_FULL` The buffer size(s) must match the size of the display.  LVGL will always redraw the whole screen even if only 1 pixel has been changed.  If two display-sized draw buffers are provided, LVGL's display handling works like \"traditional\" double buffering.  This means the :ref:`flush_callback` callback only has to update the address of the frame buffer to the ``px_map`` parameter."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:91
msgid "Simple Example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:102
msgid "One Buffer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:104
msgid "If only one buffer is used, LVGL draws the content of the screen into that draw buffer and sends it to the display via the :ref:`flush_callback`. LVGL then waits until :cpp:func:`lv_display_flush_ready` is called (that is, the content of the buffer has been sent to the display) before drawing something new into it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:111
msgid "Two Buffers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:113
msgid "If two buffers are used LVGL can draw into one buffer while the content of the other buffer is sent to the display in the background.  DMA or other hardware should be used to transfer data to the display so the MCU can continue drawing.  Doing so allows *rendering* and *refreshing* the display to become parallel operations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:120
msgid "Three Buffers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:122
msgid "Triple buffering enhances parallelism between rendering and data transfer compared to double buffering. When one buffer has completed rendering and another is actively undergoing DMA transfer, the third buffer enables immediate rendering of the next frame, eliminating CPU/GPU idle time caused by waiting for DMA completion. The third buffer is configured using the :cpp:func:`lv_display_set_3rd_draw_buffer` function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:132
msgid "Flush Callback"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:134
msgid "Draw buffer(s) are simple array(s) that LVGL uses to render the display's content.  Once rendering is has been completed, the content of the draw buffer is sent to the display using a Flush Callback function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:138
msgid "An example looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:160
msgid "During system initialization, tell LVGL you want that function to copy pixels from rendered pixel-buffers to a particular display by doing the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:167
msgid "Note that which display is targeted is passed to the function, so you can use the same function for multiple displays, or use different functions for multiple displays.  It's up to you."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:173
msgid ":cpp:expr:`lv_display_flush_ready(display1)` needs to be called when flushing is complete to inform LVGL that the buffer is available again to render new content into it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:177
msgid "LVGL might render the screen in multiple chunks and therefore call your Flush Callback multiple times.  To see whether the current call is for the last chunk being rendered, use :cpp:expr:`lv_display_flush_is_last(display1)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:186
msgid "Flush-Wait Callback"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:188
msgid "By using :cpp:func:`lv_display_flush_ready` LVGL will normally spin in a loop while waiting for flushing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:191
msgid "However with the help of :cpp:func:`lv_display_set_flush_wait_cb` a custom wait callback be set for flushing.  This callback can use a semaphore, mutex, or anything else to optimize waiting for the flush to be completed.  The callback need not call :cpp:func:`lv_display_flush_ready` since the caller takes care of that (clearing the display's ``flushing`` flag) when your callback returns."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:197
msgid "However, if a Flush-Wait Callback is not set, LVGL assumes that :cpp:func:`lv_display_flush_ready` is called after the flush has completed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/setup.rst:217
msgid ":ref:`display/lv_display_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:5
msgid "Tiled Rendering"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:7
msgid "When multiple CPU cores are available and a large area needs to be redrawn, LVGL must identify independent areas that can be rendered in parallel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:10
msgid "For example, if there are 4 CPU cores, one core can draw the screen's background while the other 3 must wait until it is finished. If there are 2 buttons on the screen, those 2 buttons can be rendered in parallel, but 2 cores will still remain idle."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:15
msgid "Due to dependencies among different areas, CPU cores cannot always be fully utilized."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:17
msgid "To address this, LVGL can divide large areas that need to be updated into smaller tiles. These tiles are independent, making it easier to find areas that can be rendered concurrently."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:21
msgid "Specifically, if there are 4 tiles and 4 cores, there will always be an independent area for each core within one of the tiles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:24
msgid "The maximum number of tiles can be set using the function :cpp:expr:`lv_display_set_tile_cnt(disp, cnt)`. The default value is :cpp:expr:`LV_DRAW_SW_DRAW_UNIT_CNT` (or 1 if software rendering is not enabled)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:28
msgid "Small areas are not further divided into smaller tiles because the overhead of spinning up 4 cores would outweigh the benefits."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:31
msgid "The ideal tile size is calculated as ``ideal_tile_size = draw_buf_size / tile_cnt``. For example, in :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_DIRECT` mode on an 800x480 screen, the display buffer is 800x480 = 375k pixels. If there are 4 tiles, the ideal tile size is approximately 93k pixels. Based on this, core utilization is as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:36
msgid "30k pixels: 1 core"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:37
msgid "90k pixels: 1 core"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:38
msgid "95k pixels: 2 cores (above 93k pixels, 2 cores are used)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:39
msgid "150k pixels: 2 cores"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:40
msgid "200k pixels: 3 cores (above 186k pixels, 3 cores are used)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:41
msgid "300k pixels: 4 cores (above 279k pixels, 4 cores are used)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:42
msgid "375k pixels: 4 cores"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:44
msgid "In :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_DIRECT`, the screen-sized draw buffer is divided by the tile count to determine the ideal tile sizes. If smaller areas are refreshed, it may result in fewer cores being used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:48
msgid "In :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_FULL`, the maximum number of tiles is always created when the entire screen is refreshed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:51
msgid "In :cpp:enumerator:`LV_DISPLAY_RENDER_MODE_PARTIAL`, the partial buffer is divided into tiles. For example, if the draw buffer is 1/10th the size of the screen and there are 2 tiles, then 1/20th + 1/20th of the screen area will be rendered at once."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/display/tiling.rst:55
msgid "Tiled rendering only affects the rendering process, and the :ref:`flush_callback` is called once for each invalidated area. Therefore, tiling is not visible from the flushing point of view."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:5
msgid "Draw API"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:8
msgid "Where to Use the Drawing API"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:10
msgid "In most cases you use LVGL's Drawing API through the API of Widgets:  by creating buttons, labels, etc., and setting the their styles, positions, and other properties. In these cases rendering (drawing) is handled internally and you don't see the :ref:`Drawing Pipeline <draw_pipeline>` at all."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:15
msgid "However there are three places where you can use LVGL's Drawing API directly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:17
msgid "**In the draw events of the Widgets**: There are event codes which are sent when the Widget needs to render itself:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:20
msgid ":cpp:enumerator:`LV_EVENT_DRAW_MAIN_BEGIN`, :cpp:enumerator:`LV_EVENT_DRAW_MAIN`, :cpp:enumerator:`LV_EVENT_DRAW_MAIN_END`: Triggered before, during, and after a Widget is drawn, respectively.  Widget rendering typically occurs in :cpp:enumerator:`LV_EVENT_DRAW_MAIN`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:24
msgid ":cpp:enumerator:`LV_EVENT_DRAW_POST_BEGIN`, :cpp:enumerator:`LV_EVENT_DRAW_POST`, :cpp:enumerator:`LV_EVENT_DRAW_POST_END`: Triggered before, during, and after all child Widgets are rendered, respectively. This can be useful for overlay-like drawings, such as scrollbars which should be rendered on top of any children."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:30
msgid "These are relevant if a new Widget is implemented and it uses custom drawing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:32
msgid "**Modifying the created draw tasks**: The when a draw task is created for a Widget :cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED` is sent.  In this event the created draw task can be modified or new draw tasks can be added.  Typical use cases for this are modifying each bar of a bar chart, or cells of a table."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:38
msgid "For performance reasons, this event is disabled by default.  Enable it by setting the :cpp:enumerator:`LV_OBJ_FLAG_SEND_DRAW_TASK_EVENTS` flag on the Widget(s) you wish to emit this event."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:42
msgid "**Draw to the Canvas Widget**: The drawing functions can be used directly to draw to a Canvas Widget.  Doing so renders custom drawing to a buffer which can be used later as an image or a mask."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:46
msgid "For more information see :ref:`lv_canvas`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:51
msgid "Drawing API"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:53
msgid "The main components of LVGL's Drawing API are the :cpp:func:`lv_draw_rect`, :cpp:func:`lv_draw_label`, :cpp:func:`lv_draw_image`, and similar functions. When they are called :cpp:type:`lv_draw_task_t` objects are created internally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:57
msgid "These functions have the following parameters:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:59
msgid "**Layer**:  This is the target of the drawing.  See details at :ref:`draw_layers`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:60
msgid "**Draw Descriptor**:  This is a large ``struct`` containing all the information about the drawing.  See details of the draw descriptors at :ref:`draw_descriptors`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:62
msgid "**Area** (in some cases):  Specifies where to draw."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:67
msgid "Coordinate System"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:69
msgid "Some functions and draw descriptors require area or point parameters.  These are always **absolute coordinates** on the display.  For example, if the target layer is on a 800x480 display and the layer's area is (100,100) (200,200), to render a 10x10 object in the middle, the coordinates (145,145) (154,154) should be used (not (40,40) (49,49))."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:75
msgid "Exception:  for the Canvas Widget the layer is always assumed to be at the (0,0) coordinate, regardless of the Canvas Widget's position."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:93
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:710
msgid ":ref:`draw/lv_draw_arc.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:95
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:712
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:661
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:247
msgid ":ref:`draw/lv_draw_image.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:97
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:714
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:217
msgid ":ref:`draw/lv_draw_label.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:99
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:716
msgid ":ref:`draw/lv_draw_line.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:101
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:718
msgid ":ref:`draw/lv_draw_mask.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_api.rst:103
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:722
msgid ":ref:`draw/lv_draw_triangle.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:5
msgid "Draw Descriptors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:10
msgid "Each :ref:`Draw Task <draw tasks>` type has its own draw descriptor type.  For example, :cpp:type:`lv_draw_label_dsc_t` is used for label drawing, :cpp:type:`lv_draw_image_dsc_t` is used for image drawing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:15
msgid "When an ``lv_draw_...`` function is called, it creates a Draw Task, copies the draw descriptor into a ``malloc``\\ ed memory block, and frees it automatically when needed.  Therefore, local draw descriptor variables can be safely used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:22
msgid "Relation to Styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:24
msgid "In most cases, style properties map 1-to-1 to draw descriptor fields.  For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:26
msgid "``label_dsc.color`` corresponds to the ``text_color`` style property."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:27
msgid "``shadow_dsc.width``, ``line_dsc.opa``, and ``arc_dsc.width`` map to ``shadow_width``, ``line_opa``, and ``arc_width`` in styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:30
msgid "See :ref:`style_properties` to see the list of style properties and what they mean."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:35
msgid "Base Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:37
msgid "In each draw descriptor there is a generic \"base descriptor\" with :cpp:type:`lv_draw_dsc_base_t` type and with ``base`` in its name.  For example ``label_dsc.base``.  This ``struct`` stores useful information about which Widget and part created the draw descriptor.  See all the fields in :cpp:type:`lv_draw_dsc_base_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:43
msgid "In an :cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED` event, the elements of the base draw descriptor are very useful to identify the Draw Task.  For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:63
msgid "Simple Initialization"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:65
msgid "Before using a draw descriptor it needs to be initialized with the related function.  For example, :cpp:expr:`lv_draw_label_dsc_init(&my_label_draw_dsc)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:68
msgid "After initialization, each field of the draw descriptor can be set. The default values are quite sane and reasonable, so usually only a few fields need modification. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:87
msgid "Initialization for Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:89
msgid "When rendering a part of a Widget, helper functions can initialize draw descriptors based on the styles, and a specific Widget part in the current state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:105
msgid "The ``lv_obj_init_draw_...`` functions automatically initialize the fields of the base descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:110
msgid "Modify the draw descriptors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:112
msgid "In :cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED`, the draw descriptor of the ``draw_task`` can be accessed (using :cpp:type:`lv_draw_task_get_label_dsc()` and similar functions) and modified (to change color, text, font, etc.).  This means that in :cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED`, the ``draw_task``\\ s and draw descriptors are already initialized and it's enough to change only a few specific values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:138
msgid "Rectangle Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:140
msgid ":cpp:type:`lv_draw_rect_dsc_t` is a helper descriptor that combines:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:142
msgid "Fill"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:144
msgid "Outline (a border with its own styles)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:146
msgid "Background image (an image with its own styles)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:148
msgid "into a single call."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:150
msgid "``lv_obj_init_draw_rect_dsc(obj, part, &dsc);`` initializes a draw descriptor from a Widget, and ``lv_draw_rect(layer, &dsc, area)`` draws the rectangle in a specified area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:160
msgid "Fill Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:162
msgid "The main fields of :cpp:type:`lv_draw_fill_dsc_t` are straightforward.  It has a radius, opacity, and color to draw a rectangle.  If opacity is 0, no draw task will be created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:166
msgid ":cpp:expr:`lv_draw_fill_dsc_init(&dsc)` initializes a fill Draw Task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:167
msgid ":cpp:expr:`lv_draw_sw_fill(layer, &dsc, area)` creates a Draw Task to fill an area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:168
msgid ":cpp:expr:`lv_draw_task_get_fill_dsc(draw_task)` retrieves the fill descriptor from a Draw Task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:174
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:51
msgid "Gradients"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:176
msgid "The ``grad`` field of the fill descriptor (or :cpp:type:`lv_grad_dsc_t` in general) supports:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:179
msgid "Horizontal"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:180
msgid "Vertical"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:181
msgid "Skew"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:182
msgid "Radial"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:183
msgid "Conical"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:185
msgid "gradient types."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:187
msgid "The following show some example gradients."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:201
msgid "For each gradient type, multiple color and opacity values can be assigned.  These are called \"stops\".  The maximum number of stops is limited to :c:macro:`LV_GRADIENT_MAX_STOPS`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:205
msgid "A gradient is basically a transition of colors and opacities between stops."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:207
msgid "Besides just setting the color and opacity of each stop, it is also possible to set where they start relative to the whole gradient area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:210
msgid "For example with 3 stops it can be set like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:212
msgid "10% red: 0--10% fully red"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:213
msgid "60% green: 10--60% transition from red to green, 60% is fully green"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:214
msgid "65% blue: fast transition from green to blue between 60%--65%. After 65% fully blue."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:216
msgid "The position of the stops are called fractions or offsets and are 8 bit values where 0 is 0% and 255 is 100% of the whole gradient area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:219
msgid ":cpp:expr:`lv_grad_init_stops(grad_dsc, colors, opas, fracs, cnt)` initializes a gradient descriptor with stops containing the color, opacity and fraction of each stop."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:242
msgid "If the opacity array is ``NULL`` 255 will be used for each stop.  If the fractions array is ``NULL`` the colors will be distributed evenly.  For example with 3 colors: 0%, 50%, 100%"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:250
msgid "Linear, radial, and conic gradients are defined between two points or angles.  You can define how to pad the areas outside of the start and end points or angles:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:253
msgid ":cpp:enumerator:`LV_GRAD_EXTEND_PAD`: Repeat the same color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:254
msgid ":cpp:enumerator:`LV_GRAD_EXTEND_REPEAT`: Repeat the pattern"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:255
msgid ":cpp:enumerator:`LV_GRAD_EXTEND_REFLECT`: Repeat the pattern normally and mirrored alternately"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:260
msgid "Horizontal and Vertical Gradients"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:262
msgid "The simplest and usually fastest gradient types are horizontal and vertical gradients."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:264
msgid "After initializing the stops with :cpp:expr:`lv_grad_init_stops` call either :cpp:expr:`lv_grad_horizontal_init(&grad_dsc)` or :cpp:expr:`lv_grad_vertical_init(&grad_dsc)` to get a horizontal or vertical gradient descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:274
msgid "Linear Gradients"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:276
msgid "The linear (or skew) gradient are similar to horizontal or vertical gradient but the angle of the gradient can be controlled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:279
msgid "The linear gradient will be rendered along a line defined by 2 points."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:281
msgid "After initializing the stops with :cpp:func:`lv_grad_init_stops` call :cpp:expr:`lv_grad_linear_init(&grad_dsc, from_x, from_y, to_x, to_y, LV_GRAD_EXTEND_...)` with your point values and extend pattern strategy to get a linear gradient descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:290
msgid "Radial Gradients"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:292
msgid "The radial gradient is described by two circles: an outer circle and an inner circle (also called the focal point).  The gradient will be calculated between the focal point's circle and the edge of the outer circle."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:296
msgid "If the center of the focal point and the center of the main circle are the same, the gradient will spread evenly in all directions.  If the center points are not the same, the gradient will have an egg shape."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:300
msgid "The focal point's circle should be inside the main circle."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:302
msgid "After initializing the stops with :cpp:func:`lv_grad_init_stops`, the outer circle can be set by: :cpp:expr:`lv_grad_radial_init(&grad_dsc, center_x, center_y, edge_x, edge_y, LV_GRAD_EXTEND_...)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:306
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:325
msgid "For both the center and edge coordinates, ``px`` or ``lv_pct()`` values can be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:308
msgid "The inner circle (focal point) can be set with: :cpp:expr:`lv_grad_radial_set_focal(&grad_dsc, center_x, center_y, radius)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:316
msgid "Conic Gradients"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:318
msgid "The conic gradient is defined between the angles of a circle, and colors are mapped to each angle."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:321
msgid "After initializing the stops with :cpp:func:`lv_grad_init_stops`, the conic gradient can be set up with: :cpp:expr:`lv_grad_conical_init(&grad, center_x, center_y, angle_start, angle_end, LV_GRAD_EXTEND_...)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:327
msgid "The zero angle is on the right-hand side, and 90 degrees is at the bottom."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:335
msgid "Border Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:337
msgid "The :cpp:type:`lv_draw_border_dsc_t` border descriptor has radius, opacity, width, color, and side fields.  If the opacity or width is 0, no Draw Task will be created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:341
msgid "``side`` can contain ORed values of :cpp:type:`lv_border_side_t`, such as :cpp:enumerator:`LV_BORDER_SIDE_BOTTOM`.  :cpp:enumerator:`LV_BORDER_SIDE_ALL` applies to all sides, while :cpp:enumerator:`LV_BORDER_SIDE_INTERNAL` is used by higher layers (e.g. a table Widget) to calculate border sides.  However, the drawing routine receives only simpler values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:347
msgid "The following functions are used for border drawing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:349
msgid ":cpp:expr:`lv_draw_border_dsc_init(&dsc)` initializes a border Draw Task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:350
msgid ":cpp:expr:`lv_draw_sw_border(layer, &dsc, area)` creates a Draw Task to draw a border inward from its area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:352
msgid ":cpp:expr:`lv_draw_task_get_border_dsc(draw_task)` retrieves the border descriptor from a Draw Task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:360
msgid "Outlines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:362
msgid "The outline is similar to the border but is drawn outside the object's draw area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:364
msgid "In practice, there is no dedicated outline descriptor like ``lv_draw_outline_dsc_t``, because from the rendering perspective, the outline is simply another border rendered outside the object's bounds."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:368
msgid "The outline is used only in :cpp:type:`lv_draw_rect_dsc_t` for convenience. The two differences compared to borders in :cpp:type:`lv_draw_rect_dsc_t` are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:371
msgid "There is an ``outline_pad`` property to specify the gap between the target area and the inner side of the outline. It can be negative. For example, if ``outline_pad = -width``, the outline will resemble a border."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:375
msgid "There is no ``border_side`` property for the outline. It's always rendered as a full rectangle."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:384
msgid "Box Shadow Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:386
msgid "The :cpp:type:`lv_draw_box_shadow_dsc_t` box shadow descriptor describes a **rounded rectangle-shaped shadow**.  It cannot generate shadows for arbitrary shapes, text, or images.  It includes the following fields:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:390
msgid "Radius, :cpp:expr:`LV_RADIUS_CIRCLE`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:391
msgid "Shadow color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:392
msgid "Shadow width (blur radius)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "spread"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:393
msgid "Expands the rectangle in all directions; can be negative."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "ofs_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:394
msgid "Horizontal offset."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "ofs_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:395
msgid "Vertical offset."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:396
msgid "Opacity (0--255 range). Values like ``LV_OPA_TRANSP``, ``LV_OPA_10``, etc., can also be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "bg_cover"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:398
msgid "Set to 1 if the background will cover the shadow (a hint for the renderer to skip masking)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:401
msgid "Note: Rendering large shadows may be slow or memory-intensive."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:403
msgid "The following functions are used for box shadow drawing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:405
msgid ":cpp:expr:`lv_draw_box_shadow_dsc_init(&dsc)` initializes a box shadow Draw Task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:406
msgid ":cpp:expr:`lv_draw_sw_box_shadow(layer, &dsc, area)` creates a Draw Task for a rectangle's shadow. The shadow's size and position depend on the width, spread, and offset."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:408
msgid ":cpp:expr:`lv_draw_task_get_box_shadow_dsc(draw_task)` retrieves the box shadow descriptor from a Draw Task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:418
msgid "Image Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:420
msgid "The :cpp:type:`lv_draw_image_dsc_t` image descriptor defines the parameters for image drawing.  It is a complex descriptor with the following options:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "src"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:423
msgid "The image source, either a pointer to `lv_image_dsc_t` or a file path."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:424
msgid "Opacity in the 0--255 range. Options like ``LV_OPA_TRANSP``, ``LV_OPA_10``, etc., can also be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "clip_radius"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:426
msgid "Clips the corners of the image with this radius.  Use `LV_RADIUS_CIRCLE` for the maximum radius."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:20
msgid "rotation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:428
msgid "Image rotation in 0.1-degree units (e.g., 234 means 23.4\\ |deg|\\ )."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "scale_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:429
msgid "Horizontal scaling (zoom) of the image. 256 (LV_SCALE_NONE) means no zoom, 512 doubles the size, and 128 halves it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "scale_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:431
msgid "Same as ``scale_x`` but for vertical scaling."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "skew_x"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:432
msgid "Horizontal skew (parallelogram-like transformation) in 0.1-degree units (e.g., 456 means 45.6\\ |deg|\\ )."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "skew_y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:434
msgid "Vertical skew, similar to ``skew_x``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "pivot"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:435
msgid "The pivot point for transformations (scaling and rotation). (0,0) is the top-left corner of the image and can be set outside the image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:437
msgid "Pointer to an A8 or L8 image descriptor used to mask the image.  The mask is always center-aligned."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "recolor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:439
msgid "Mixes this color with the image. For :cpp:enumerator:`LV_COLOR_FORMAT_A8`, this will be the visible pixels' color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "recolor_opa"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:441
msgid "Intensity of recoloring (0 means no recoloring, 255 means full cover)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:442
msgid "Defines how to blend image pixels with the background. See :cpp:type:`lv_blend_mode_t` for more details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "antialias"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:444
msgid "Set to 1 to enable anti-aliasing for transformations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "tile"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:445
msgid "Tiles the image (repeats it both horizontally and vertically) if the image is smaller than the `image_area` field in `lv_draw_image_dsc_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "image_area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:447
msgid "Indicates the original, non-clipped area where the image is drawn.  This is essential for:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:450
msgid "Layer rendering, where only part of a layer may be rendered and ``clip_radius`` needs the original image dimensions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:452
msgid "Tiling, where the draw area is larger than the image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "sup"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:454
msgid "Internal field to store information about the palette or color of A8 images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:456
msgid "Functions for image drawing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:458
msgid ":cpp:expr:`lv_draw_image_dsc_init(&dsc)` initializes an image draw descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:459
msgid ":cpp:expr:`lv_draw_image(layer, &dsc, area)` creates a task to draw an image in a given area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:460
msgid ":cpp:expr:`lv_draw_task_get_image_dsc(draw_task)` retrieves the image descriptor from a task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:470
msgid "Layers - Special Images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:472
msgid "Layers are treated as images, so an :cpp:type:`lv_draw_image_dsc_t` can describe how layers are blended into their parent layers. All image features apply to layers as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:476
msgid "``lv_draw_layer(layer, &dsc, area)`` initializes the blending of a layer back to its parent layer. Additionally, image-drawing-related functions can be used for layers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:480
msgid "For more details, see :ref:`layers`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:485
msgid "Label Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:487
msgid "The :cpp:type:`lv_draw_label_dsc_t` label descriptor provides extensive options for controlling text rendering:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:490
msgid "The text to render."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:491
msgid "Font to use, with support for fallback fonts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:492
msgid "Text color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:493
msgid "Text opacity."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "line_space"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:494
msgid "Additional space between lines."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "letter_space"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:495
msgid "Additional space between characters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:496
msgid "Horizontal text offset."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:497
msgid "Vertical text offset."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "sel_start"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:498
msgid "Index of the first character for selection (not byte index). ``LV_DRAW_LABEL_NO_TXT_SEL`` means no selection."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "sel_end"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:500
msgid "Index of the last character for selection."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "sel_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:501
msgid "Color of selected characters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "sel_bg_color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:502
msgid "Background color for selected characters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:503
msgid "Text alignment. See :cpp:type:`lv_text_align_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "bidi_dir"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:504
msgid "Base direction for right-to-left text rendering (e.g., Arabic). See :cpp:type:`lv_base_dir_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "decor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:506
msgid "Text decoration, e.g., underline. See :cpp:type:`lv_text_decor_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "flag"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:507
msgid "Flags for text rendering. See :cpp:type:`lv_text_flag_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "text_length"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:508
msgid "Number of characters to render (0 means render until `\\0`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "text_local"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:509
msgid "Set to 1 to allocate a buffer and copy the text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "text_static"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:510
msgid "Indicates ``text`` is constant and its pointer can be cached."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "hint"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:511
msgid "Pointer to externally stored data to speed up rendering. See :cpp:type:`lv_draw_label_hint_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:514
msgid "Functions for text drawing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:516
msgid ":cpp:expr:`lv_draw_label_dsc_init(&dsc)` initializes a label draw descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:517
msgid ":cpp:expr:`lv_draw_label(layer, &dsc, area)` creates a task to render text in an area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:518
msgid ":cpp:expr:`lv_draw_character(layer, &dsc, point, unicode_letter)` creates a task to draw a character at a specific point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:520
msgid ":cpp:expr:`lv_draw_task_get_label_dsc(draw_task)` retrieves the label descriptor from a task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:522
msgid "For character-specific drawing in draw units, use :cpp:expr:`lv_draw_label_iterate_characters(draw_unit, draw_dsc, area, callback)`. This iterates through all characters, calculates their positions, and calls the callback for rendering each character.  For callback details, see :cpp:type:`lv_draw_glyph_cb_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:537
msgid "Arc Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:539
msgid "The :cpp:type:`lv_draw_arc_dsc_t` arc descriptor defines arc rendering with these fields:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:542
msgid "Arc color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "img_src"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:543
msgid "Image source for the arc, or `NULL` if unused."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:544
msgid "Arc thickness."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "start_angle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:545
msgid "Starting angle in degrees (e.g., 0° is 3 o'clock, 90° is 6 o'clock)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "end_angle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:546
msgid "Ending angle."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "center"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:547
msgid "Arc center point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:548
msgid "Arc radius."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:549
msgid "Arc opacity (0--255)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "rounded"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:550
msgid "Rounds the arc ends."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:552
msgid "Functions for arc drawing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:554
msgid ":cpp:expr:`lv_draw_arc_dsc_init(&dsc)` initializes an arc descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:555
msgid ":cpp:expr:`lv_draw_arc(layer, &dsc)` creates a task to render an arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:556
msgid ":cpp:expr:`lv_draw_task_get_arc_dsc(draw_task)` retrieves arc descriptor from task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:567
msgid "Line Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:569
msgid "The :cpp:type:`lv_draw_line_dsc_t` line descriptor defines line rendering with these fields:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "p1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:572
msgid "First point of line (supports floating-point coordinates)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "p2"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:573
msgid "Second point of line (supports floating-point coordinates)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:574
msgid "Line color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:575
msgid "Line thickness."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:576
msgid "Line opacity (0--255)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "dash_width"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:577
msgid "Length of dashes (0 means no dashes)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "dash_gap"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:578
msgid "Length of gaps between dashes (0 means no dashes)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "round_start"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:579
msgid "Rounds the line start."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "round_end"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:580
msgid "Rounds the line end."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "raw_end"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:581
msgid "Set to 1 to skip end calculations if they are unnecessary."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:583
msgid "Functions for line drawing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:585
msgid ":cpp:expr:`lv_draw_line_dsc_init(&dsc)` initializes a line descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:586
msgid ":cpp:expr:`lv_draw_line(layer, &dsc)` creates a task to draw a line."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:587
msgid ":cpp:expr:`lv_draw_task_get_line_dsc(draw_task)` retrieves line descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:598
msgid "Triangle Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:600
msgid "Triangles are defined by :cpp:type:`lv_draw_triangle_dsc_t`, which includes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
msgid "p[3]"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:602
msgid "3 points for the triangle's vertices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:603
msgid "Triangle color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:604
msgid "Triangle opacity."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "grad"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:605
msgid "Gradient options. If ``grad.dir`` is not ``LV_GRAD_DIR_NONE``, the ``color`` field is ignored. The ``opa`` field adjusts overall opacity."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:608
msgid "Functions for triangle drawing: - :cpp:expr:`lv_draw_triangle_dsc_init(&dsc)` initializes a triangle descriptor. - :cpp:expr:`lv_draw_triangle(layer, &dsc)` creates a task to draw a triangle. - :cpp:expr:`lv_draw_task_get_triangle_dsc(draw_task)` retrieves triangle descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:619
msgid "Vector Draw Descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:626
msgid "Masking Operation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:628
msgid "There are several options to mask parts of a layer, Widget, or drawing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:630
msgid "**Radius of Rectangles**: Set the `radius` style property or the ``radius`` in the draw descriptors.  This creates rounded rectangles, borders, outlines, etc..  However, the content of subsequent renderings will not be masked out in the corners."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:635
msgid "**Clip Radius of Images**: Similar to rectangles, images can also be rendered with a ``radius``.  Since layer drawing and image drawing are handled the same way, this works for layers as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:640
msgid "You can draw various content on a layer and then render the layer with a ``clip_radius``, masking out all the content on the corners."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:643
msgid "**Rectangle Mask Draw Task**: A special Draw Task can mask out a rectangle from a layer by setting the alpha channel of certain pixels to 0.  To achieve this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:647
msgid "Create an :cpp:type:`lv_draw_mask_rect_dsc_t` descriptor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:648
msgid "Set ``area``, ``radius``, and ``keep_outside`` parameters. If ``keep_outside`` is set to 1, areas outside of ``area`` remain unchanged. Otherwise, they are cleared."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:651
msgid "Call :cpp:expr:`lv_draw_mask_rect(layer, &dsc)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:653
msgid "Note: The layer must have a color format with an alpha channel, typically :cpp:expr:`LV_COLOR_FORMAT_ARGB8888`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:656
msgid "In most cases, the *\"Clip Radius of Images\"* method is better because it blends the layer with a radius mask on the fly, avoiding a dedicated masking step. However, the *\"Rectangle Mask Draw Task\"* is useful when multiple areas need clearing or when the area to be masked differs from the layer area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:661
msgid "**Clip Corner Style Property**: Enabling ``..._style_clip_corner`` in a local or global style allows LVGL to create a layer for the top and bottom corner areas of a Widget.  It renders the children there and blends it by setting ``clip_radius`` to the layer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:666
msgid "**Bitmap Masking for Images**: Using ``..._style_bitmap_mask`` or ``bitmap_mask`` in :cpp:type:`lv_draw_image_dsc_t` allows setting an A8 or L8 image as a mask for an image/layer during blending."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:671
msgid "Limitation:  The mask always aligns to the center, and only one bitmap mask can be used for an image/layer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:673
msgid "When ``..._style_bitmap_mask`` is used, LVGL automatically creates a layer, renders the Widgets there, and applies the bitmap mask during blending."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:675
msgid "Alternatively, the ``bitmap_mask`` property in the draw descriptor can be used directly for image drawing."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:678
msgid "By using the Canvas Widget with an :cpp:enumerator:`LV_COLOR_FORMAT_L8` buffer, bitmap masks can be rendered dynamically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:708
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:204
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:215
msgid ":ref:`draw/lv_draw.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:720
#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:221
msgid ":ref:`draw/lv_draw_rect.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_descriptors.rst:724
msgid ":ref:`misc/lv_grad.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:5
msgid "Draw Layers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:7
msgid "Not to be confused with a :ref:`Display's main 4 layers <display_screen_layers>`, a :dfn:`Draw Layer` is a buffer created during rendering, necessitated by certain style properties, so different sets of pixels are correctly combined.  Factors requiring such layers are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:12
msgid "partial opacity"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:13
msgid "bit-mask being applied"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:14
msgid "blend mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:15
msgid "clipped corners (a bit-mask application)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:16
msgid "transformations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:18
msgid "scale"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:19
msgid "skew"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:22
msgid "Later that layer will be merged to the screen or its parent layer at the correct point in the rendering sequence."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:28
msgid "Layer Types"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:31
msgid "Simple Layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:33
msgid "The following style properties trigger the creation of a \"Simple Layer\":"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:35
msgid "``opa_layered``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:36
msgid "``bitmap_mask_src``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:37
msgid "``blend_mode``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:39
msgid "In this case, the Widget will be sliced into ``LV_DRAW_SW_LAYER_SIMPLE_BUF_SIZE`` sized chunks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:42
msgid "If there is no memory for a new chunk, LVGL will try allocating the layer after another chunk is rendered and freed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:47
msgid "Transform Layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:49
msgid "The following style properties trigger the creation of a \"Transform Layer\":"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:51
msgid "``transform_scale_x``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:52
msgid "``transform_scale_y``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:53
msgid "``transform_skew_x``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:54
msgid "``transform_skew_y``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:55
msgid "``transform_rotate``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:57
msgid "Due to the nature of transformations, the Widget being transformed (and its children) must be rendered first, followed by the transformation step.  This necessitates a temporary drawing area (layer), often larger than the Widget proper, to provide an area of adequate size for the transformation.  LVGL tries to render as small area of the widget as possible, but due to the nature of transformations no slicing is possible in this case."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:66
msgid "Clip Corner"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:68
msgid "The ``clip_corner`` style property also causes LVGL to create a 2 layers with radius height for the top and bottom parts of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:74
msgid "Getting the Current Layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:76
msgid "The first parameter of the ``lv_draw_rect/label/etc`` functions is a layer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:78
msgid "In most cases a layer is not created, but an existing layer is used to draw there."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:80
msgid "The draw API can be used in these cases and the current layer can be used differently in each case:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:83
msgid "**In draw events**: In ``LV_EVENT_DRAW_MAIN/POST_BEGIN/...`` events the Widget is being rendered to a layer of the display or another temporary layer created earlier during rendering. The current target layer can be retrieved using :cpp:expr:`lv_event_get_layer(e)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:88
msgid "It also possible to create new layers in these events, but the previous layer is also required since it will be the parent layer in :cpp:func:`lv_draw_layer`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:91
msgid "**Modifying the created Draw Tasks**: In :cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED` the draw tasks created by ``lv_draw_rect/label/etc`` can be modified.  It's not required to know the current layer to modify a draw task.  However, if something new also needs to be drawn with ``lv_draw_rect/label/etc`` the current layer is also required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:97
msgid "The current layer can be read from the ``base`` draw descriptor.  For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:107
msgid "**Draw to the Canvas Widget**: The canvas itself doesn't store a layer, but one can be easily created and used like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:125
msgid "Creating a New Layer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:127
msgid "To create a new layer, use :cpp:func:`lv_draw_layer_create`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:134
msgid "Once the layer is created, draw tasks can be added to it by using the :ref:`Draw API <draw_api>` and :ref:`Draw descriptors <draw_descriptors>`. In most cases this means calling the ``lv_draw_rect/label/etc`` functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:138
msgid "Finally, the layer must be rendered to its parent layer.  Since a layer behaves similarly to an image, it can be rendered the same way as images:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:152
msgid "Memory Considerations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:156
msgid "Layer Buffers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:158
msgid "The buffer for a layer (where rendering occurs) is not allocated at creation. Instead, it is allocated by :ref:`Draw Units` when the first :ref:`Draw Task <draw tasks>` is dispatched."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:162
msgid "Layer buffers can be large, so ensure there is sufficient heap memory or increase :c:macro:`LV_MEM_SIZE` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:167
msgid "Layer Type Memory Requirements"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:169
msgid "To save memory, LVGL can render certain types of layers in smaller chunks:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:171
msgid "**Simple Layers**: Simple layers can be rendered in chunks. For example, with ``opa_layered = 140``, only 10 lines of the layer can be rendered at a time, then the next 10 lines, and so on. This avoids allocating a large buffer for the entire layer. The buffer size for a chunk is set using :c:macro:`LV_DRAW_LAYER_SIMPLE_BUF_SIZE` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:178
msgid "**Transform Layers**: Transform Widgets cannot be rendered in chunks because transformations often affect pixels outside the given area. For such layers, LVGL allocates a buffer large enough to render the entire transformed area without limits."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:185
msgid "Memory Limit for Layers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_layers.rst:187
msgid "The total memory available for layers at once is controlled by :c:macro:`LV_DRAW_LAYER_MAX_MEMORY` in ``lv_conf.h``.  If set to ``0``, there is no limit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:5
msgid "Draw Pipeline"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:9
msgid "What is Drawing?"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:11
msgid "Drawing (also known as :dfn:`rendering`) is writing pixel colors into a buffer where they will be delivered to a display panel as pixels.  Sometimes this is done by copying colors from places like background- and foreground-color properties.  Other times it involves computing those colors before they are written (e.g. combining them with other colors when an object higher on the Z axis has partial opacity)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:17
msgid "The following sections cover the LVGL drawing logic and how to use it and optionally tune it to fit your particular project (e.g. if you have a GPU or other resources that you would like to get involved)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:23
msgid "Draw-Pipeline Overview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:25
msgid "On modern computing hardware meant to be used with larger display panels, there are sometimes options for different ways drawing can be accomplished. For example, some MCUs come with hardware that is very good (and fast) at certain types of drawing tasks. Alternatively, you might have access to a drawing library that performs certain types of drawing tasks with great efficiency. To make it possible to utilize such facilities in the most efficient fashion, LVGL v9 and onwards implements a :dfn:`Drawing Pipeline`, like an assembly line, where decisions are made as to which drawing tasks (:ref:`Draw Tasks`) are given to which \"logic entities\" (:ref:`Draw Units`) in order to be carried out."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:35
msgid "This Pipeline is designed so that it is both flexible and extendable.  You can use it to perform custom rendering with a GPU, or replace the parts of the built-in software rendering logic to any extent desired."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:39
msgid "Using events, it's also possible to modify :ref:`draw tasks` or insert new ones as LVGL renders Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:42
msgid "The following sections describe the basic terminology and concepts of rendering."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:48
msgid "Draw Tasks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:50
msgid "A \"Draw Task\" (:cpp:type:`lv_draw_task_t`) is a package of information that is created at the beginning of the Drawing Pipeline when a request to draw is made. Functions such as :cpp:expr:`lv_draw_rect()` and :cpp:expr:`lv_draw_label()` create one or more Draw Tasks and pass them down the Drawing Pipeline.  Each Draw Task carries all the information required to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:56
msgid "compute which :ref:`Draw Unit <draw units>` should receive this task, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:57
msgid "give the Draw Unit all the information required to accomplish the drawing task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:59
msgid "A Draw Task carries the following information:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:61
msgid "defines the drawing algorithm involved (e.g. line, fill, border, image, label, arc, triangle, etc.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:63
msgid "defines the rectangle in which drawing will occur"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "transformation matrix"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:64
msgid "if :c:macro:`LV_DRAW_TRANSFORM_USE_MATRIX` is configured to '1'"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:65
msgid "waiting, queued, in progress, completed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "drawing descriptor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:66
msgid "carries details of the drawing to be performed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "preferred Draw Unit ID"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:67
msgid "identifier of the Draw Unit that should carry out this task"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "preference score"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:68
msgid "value describing the speed of the specified Draw Unit relative to software rendering (more on this below)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:0
msgid "next"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:70
msgid "a link to the next Draw Task in the list."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:72
msgid "Draw Tasks are collected in a list and periodically dispatched to Draw Units."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:78
msgid "Draw Units"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:80
msgid "A \"Draw Unit\" (based on :cpp:type:`lv_draw_unit_t`) is any \"logic entity\" that can generate the output required by a :ref:`Draw Task <draw tasks>`.  This can be a CPU core, a GPU, a custom rendering library for specific Draw Tasks, or any entity capable of performing rendering."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:85
msgid "For a reference implementation of a draw unit, see `lv_draw_sw.c <https://github.com/lvgl/lvgl/blob/master/src/draw/sw/lv_draw_sw.c>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:88
msgid "During LVGL's initialization (:cpp:func:`lv_init`), a list of Draw Units is created. If :c:macro:`LV_USE_DRAW_SW` is set to ``1`` in ``lv_conf.h`` (it is by default), the Software Drawing Unit enters itself at the head of that list.  If your platform has other drawing units available, if they are configured to be used in ``lv_conf.h``, they are added to this list during LVGL's initialization.  If you are adding your own Draw Unit(s), you add each available drawing unit to that list by calling :cpp:expr:`lv_draw_create_unit(sizeof(your_draw_unit_t))`.  With each call to that function, the newly-created draw unit is added to the head of that list, pushing already-existing draw units further back in the list, pushing the Draw Units created earlier farther back in the list.  The order of this list (and thus the order in which :ref:`Draw Task Evaluation` is performed) is governed by the order in which each Draw Unit is created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:101
msgid "Building this list (and initializing the Draw Units) is normally handled automatically by configuring the available Draw Units in ``lv_conf.h``, such as setting :c:macro:`LV_USE_DRAW_OPENGLES` or :c:macro:`LV_USE_PXP` or :c:macro:`LV_USE_DRAW_SDL` or :c:macro:`LV_USE_DRAW_VG_LITE` to ``1``.  However, if you are introducing your own Draw Unit(s), you will need to create and initialize it (after :cpp:func:`lv_init`) as above.  This will include several things, but setting its ``evaluate_cb`` and ``dispatch_cb`` callbacks (mentioned later) are two of them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:112
msgid "For an example of how draw-unit creation and initialization is done, see :cpp:func:`lv_draw_sw_init` in lv_draw_sw.c_ or the other draw units whose ``init`` functions are optionally called in :cpp:func:`lv_init`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:117
msgid "Thread Priority"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:119
msgid "All draw units operate with a configurable thread priority which can be set using the :c:macro:`LV_DRAW_THREAD_PRIO` configuration option in ``lv_conf.h``. This allows you to fine-tune the priority level across all drawing units, which is especially useful for systems with limited priority levels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:124
msgid "By default, draw units use :c:macro:`LV_THREAD_PRIO_HIGH` as their thread priority. This consistent approach ensures that all drawing units (software rendering, hardware accelerators like STM32 DMA2D, NXP VGLite, etc.) use the same priority level unless explicitly configured otherwise."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:135
msgid "Draw Task Evaluation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:137
msgid "When each :ref:`Draw Task <draw tasks>` is created, each existing Draw Unit is \"consulted\" as to its \"appropriateness\" for the task.  It does this through an \"evaluation callback\" function pointer (a.k.a. ``evaluate_cb``), which each Draw Unit sets (for itself) during its initialization.  Normally, that evaluation:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:142
msgid "optionally examines the existing \"preference score\" for the task mentioned above,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:143
msgid "if it can accomplish that type of task (e.g. line drawing) faster than other Draw Units that have already reported, it writes its own \"preference score\" and \"preferred Draw Unit ID\" to the respective fields in the task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:147
msgid "In this way, by the time the evaluation sequence is complete, the task will contain the score and the ID of the Drawing Unit that will be used to perform that task when it is :ref:`dispatched <draw task dispatching>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:151
msgid "This logic, of course, can be overridden or redefined, depending on system design."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:153
msgid "As a side effect, this also ensures that the same Draw Unit will be selected consistently, depending on the type (and nature) of the drawing task, avoiding any possible screen jitter in case more than one Draw Unit is capable of performing a given task type."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:158
msgid "The sequence of the Draw Unit list (with the Software Draw Unit at the end) also ensures that the Software Draw Unit is the \"buck-stops-here\" Draw Unit:  if no other Draw Unit reported it was better at a given drawing task, then the Software Draw Unit will handle it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:167
msgid "Dispatching"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:169
msgid "While collecting Draw Tasks LVGL frequently dispatches the collected Draw Tasks to their assigned Draw Units. This is handled via the ``dispatch_cb`` of the Draw Units."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:172
msgid "If a Draw Unit is busy with another Draw Task, it just returns. However, if it is available it can take a Draw Task."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:175
msgid ":cpp:expr:`lv_draw_get_next_available_task(layer, previous_task, draw_unit_id)` is a useful helper function which is used by the ``dispatch_cb`` to get the next Draw Task it should act on.  If it handled the task, it sets the Draw Task's ``state`` field to :cpp:enumerator:`LV_DRAW_TASK_STATE_FINISHED`.  \"Available\" in this context means that has been queued and assigned to a given Draw Unit and is ready to be carried out.  The ramifications of having multiple drawing threads are taken into account for this."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:185
msgid "Run-Time Object Hierarchy"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:187
msgid "All of the above have this relationship at run time:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:189
msgid "LVGL (global)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:191
msgid "list of :ref:`Draw Units`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:192
msgid "list of :ref:`Display(s) <display_overview>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:194
msgid "Layer(s): Each :ref:`Display object <display_overview>` has its own list of :ref:`draw_layers`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:196
msgid "Draw Tasks:  Each Layer has its own list of :ref:`Draw Tasks`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/draw_pipeline.rst:219
msgid ":ref:`draw/lv_draw_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/draw/index.rst:5
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:60
msgid "Drawing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:13
msgid "Font (lv_font)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:15
msgid "In LVGL fonts are collections of bitmaps and other information required to render images of individual letters (glyph). A font is stored in a :cpp:type:`lv_font_t` variable and can be set in a style's *text_font* field. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:24
msgid "Fonts have a **format** property. It describes how the glyph data is stored. At the time of writing, there are 12 possible values that this field can take, and those values fall into 2 categories:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:0
msgid "Legacy simple"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:28
msgid "1, 2, 4 or 8-bpp (aligned or unaligned) and image format, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:0
msgid "Advanced"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:29
msgid "vector, SVG, and custom formats; for the latter, the user provides the rendering logic."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:32
msgid "For simple formats:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:34
msgid "the font is stored as an array of bitmaps, one bitmap per glyph;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:35
msgid "the value stored for each pixel determines the pixel's opacity, enabling edges to be smoother --- higher bpp values result in smoother edges."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:38
msgid "For advanced formats, the font information is stored in its respective format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:40
msgid "The **format** property also affects the amount of memory needed to store a font. For example, ``format = LV_FONT_GLYPH_FORMAT_A4`` makes a font nearly four times larger compared to ``format = LV_FONT_GLYPH_FORMAT_A1``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:47
msgid "Unicode Support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:49
msgid "LVGL supports **UTF-8** encoded Unicode characters. Your editor needs to be configured to save your code/text as UTF-8 (usually this the default) and be sure that :c:macro:`LV_TXT_ENC` is set to :c:macro:`LV_TXT_ENC_UTF8` in ``lv_conf.h``. (This is the default value.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:54
msgid "To test it try"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:61
msgid "If all works well, a '\\ |check|\\ ' character should be displayed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:65
msgid "Typesetting"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:67
msgid "Although LVGL can decode and display any Unicode characters (assuming the font supports them), LVGL cannot correctly render all complex languages."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:71
msgid "The standard Latin-based languages (e.g., English, Spanish, German) and East Asian languages such as Chinese, Japanese, and Korean (CJK) are relatively straightforward, as their characters are simply written from left to right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:76
msgid "Languages like Arabic, Persian, and Hebrew, which use Right-to-Left (RTL) or mixed writing directions, are also supported in LVGL. Learn more :ref:`here <bidi>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:80
msgid "For characters such as '|eacute|', '|uuml|', '|otilde|', '|Aacute|', and '|Utilde|', it is recommended to use the single Unicode format (NFC) rather than decomposing them into a base letter and diacritics (e.g. ``u`` + |uml|)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:84
msgid "Complex languages where subsequent characters combine into a single glyph and where the resulting glyph has no individual Unicode representation (e.g., Devanagari), have limited support in LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:91
msgid "Built-In Fonts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:93
msgid "There are several built-in fonts in different sizes, which can be enabled in ``lv_conf.h`` with *LV_FONT_...* defines."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:97
msgid "Normal Fonts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:99
msgid "The following fonts contain all ASCII characters, the degree symbol (U+00B0), the bullet symbol (U+2022) and the built-in symbols (see below)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:102
msgid ":c:macro:`LV_FONT_MONTSERRAT_12`: 12 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:103
msgid ":c:macro:`LV_FONT_MONTSERRAT_14`: 14 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:104
msgid ":c:macro:`LV_FONT_MONTSERRAT_16`: 16 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:105
msgid ":c:macro:`LV_FONT_MONTSERRAT_18`: 18 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:106
msgid ":c:macro:`LV_FONT_MONTSERRAT_20`: 20 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:107
msgid ":c:macro:`LV_FONT_MONTSERRAT_22`: 22 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:108
msgid ":c:macro:`LV_FONT_MONTSERRAT_24`: 24 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:109
msgid ":c:macro:`LV_FONT_MONTSERRAT_26`: 26 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:110
msgid ":c:macro:`LV_FONT_MONTSERRAT_28`: 28 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:111
msgid ":c:macro:`LV_FONT_MONTSERRAT_30`: 30 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:112
msgid ":c:macro:`LV_FONT_MONTSERRAT_32`: 32 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:113
msgid ":c:macro:`LV_FONT_MONTSERRAT_34`: 34 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:114
msgid ":c:macro:`LV_FONT_MONTSERRAT_36`: 36 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:115
msgid ":c:macro:`LV_FONT_MONTSERRAT_38`: 38 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:116
msgid ":c:macro:`LV_FONT_MONTSERRAT_40`: 40 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:117
msgid ":c:macro:`LV_FONT_MONTSERRAT_42`: 42 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:118
msgid ":c:macro:`LV_FONT_MONTSERRAT_44`: 44 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:119
msgid ":c:macro:`LV_FONT_MONTSERRAT_46`: 46 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:120
msgid ":c:macro:`LV_FONT_MONTSERRAT_48`: 48 px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:123
msgid "Special fonts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:125
msgid ":c:macro:`LV_FONT_MONTSERRAT_28_COMPRESSED`: Same as normal 28 px font but stored as a :ref:`fonts_compressed` with 3 bpp"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:126
msgid ":c:macro:`LV_FONT_DEJAVU_16_PERSIAN_HEBREW`: 16 px font with normal range + Hebrew, Arabic, Persian letters and all their forms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:127
msgid ":c:macro:`LV_FONT_SOURCE_HAN_SANS_SC_16_CJK`: 16 px font with normal range plus 1000 of the most common CJK radicals"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:128
msgid ":c:macro:`LV_FONT_UNSCII_8`: 8 px pixel perfect font with only ASCII characters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:129
msgid ":c:macro:`LV_FONT_UNSCII_16`: 16 px pixel perfect font with only ASCII characters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:131
msgid "The built-in fonts are **global variables** with names like :cpp:var:`lv_font_montserrat_16` for a 16 px height font. To use them in a style, just add a pointer to a font variable like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:139
msgid "The built-in fonts with ``bpp = 4`` contain the ASCII characters and use the `Montserrat <https://fonts.google.com/specimen/Montserrat>`__ font."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:142
msgid "In addition to the ASCII range, the following symbols are also added to the built-in fonts from the `FontAwesome <https://fontawesome.com/>`__ font."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:150
msgid "The symbols can be used singly as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:156
msgid "Or together with strings (compile time string concatenation):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:162
msgid "Or more symbols together:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:171
msgid "Special Features"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:176
msgid "Bidirectional support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:178
msgid "Most languages use a Left-to-Right (LTR for short) writing direction, however some languages (such as Hebrew, Persian or Arabic) use Right-to-Left (RTL for short) direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:182
msgid "LVGL not only supports RTL text but supports mixed (a.k.a. bidirectional, BiDi) text rendering as well. Some examples:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:187
msgid "BiDi support is enabled by setting :c:macro:`LV_USE_BIDI` to a non-zero value in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:189
msgid "All text has a base direction (LTR or RTL) which determines some rendering rules and the default alignment of the text (left or right). However, in LVGL, the base direction is not only applied to labels. It's a general property which can be set for every Widget. If not set then it will be inherited from the parent. This means it's enough to set the base direction of a screen and its child Widgets will inherit it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:196
msgid "The default base direction for screens can be set by :c:macro:`LV_BIDI_BASE_DIR_DEF` in ``lv_conf.h`` and other Widgets inherit the base direction from their parent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:200
msgid "To set a Widget's base direction use :cpp:expr:`lv_obj_set_style_base_dir(widget, base_dir, selector)`. The possible base directions are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:203
msgid ":cpp:enumerator:`LV_BASE_DIR_LTR`: Left to Right base direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:204
msgid ":cpp:enumerator:`LV_BASE_DIR_RTL`: Right to Left base direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:205
msgid ":cpp:enumerator:`LV_BASE_DIR_AUTO`: Auto detect base direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:207
msgid "This list summarizes the effect of RTL base direction on Widgets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:209
msgid "Create Widgets by default on the right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:210
msgid "``lv_tabview``: Displays tabs from right to left"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:211
msgid "``lv_checkbox``: Shows the box on the right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:212
msgid "``lv_buttonmatrix``: Orders buttons from right to left"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:213
msgid "``lv_list``: Shows icons on the right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:214
msgid "``lv_dropdown``: Aligns options to the right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:215
msgid "The text strings in ``lv_table``, ``lv_buttonmatrix``, ``lv_keyboard``, ``lv_tabview``, ``lv_dropdown``, ``lv_roller`` are \"BiDi processed\" to be displayed correctly"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:219
msgid "Arabic and Persian support"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:221
msgid "There are some special rules to display Arabic and Persian characters: the *form* of a character depends on its position in the text. A different form of the same letter needs to be used when it is isolated, at start, middle or end positions. Besides these, some conjunction rules should also be taken into account."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:227
msgid "LVGL supports these rules if :c:macro:`LV_USE_ARABIC_PERSIAN_CHARS` is enabled in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:230
msgid "However, there are some limitations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:232
msgid "Only displaying text is supported (e.g. on labels), i.e. text inputs (e.g. Text Area) do not support this feature."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:234
msgid "Static text (i.e. const) is not processed. E.g. text set by :cpp:func:`lv_label_set_text` will be \"Arabic processed\" but :cpp:func:`lv_label_set_text_static` will not."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:236
msgid "Text get functions (e.g. :cpp:func:`lv_label_get_text`) will return the processed text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:241
msgid "Compressed fonts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:243
msgid "The built-in font engine supports compressed bitmaps. Compressed fonts can be generated by"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:246
msgid "ticking the ``Compressed`` check box in the online converter"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:247
msgid "not passing the ``--no-compress`` flag to the offline converter (compression is applied by default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:249
msgid "Compression is more effective with larger fonts and higher bpp. However, it's about 30% slower to render compressed fonts. Therefore, it is recommended to compress only the largest fonts of a user interface, because"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:254
msgid "they need the most memory"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:255
msgid "they can be compressed better"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:256
msgid "and on the likelihood that they are used less frequently than the medium-sized fonts, the performance cost will be smaller."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:259
msgid "Compressed fonts also support ``bpp=3``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:262
msgid "Kerning"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:264
msgid "Fonts may provide kerning information to adjust the spacing between specific characters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:267
msgid "The online converter generates kerning tables."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:268
msgid "The offline converter generates kerning tables unless ``--no-kerning`` is specified."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:270
msgid "FreeType integration does not currently support kerning."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:271
msgid "The Tiny TTF font engine supports GPOS (Glyph Positioning) and Kern tables."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:273
msgid "To configure kerning at runtime, use :cpp:func:`lv_font_set_kerning`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:280
msgid "Adding a New Font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:282
msgid "There are several ways to add a new font to your project:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:284
msgid "The simplest method is to use the `Online font converter <https://lvgl.io/tools/fontconverter>`__. Just set the parameters, click the *Convert* button, copy the font to your project and use it. **Be sure to carefully read the steps provided on that site or you will get an error while converting.**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:288
msgid "Use the `Offline font converter <https://github.com/lvgl/lv_font_conv>`__. (Requires Node.js to be installed)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:290
msgid "If you want to create something like the built-in fonts (Montserrat font and symbols) but in a different size and/or ranges, you can use the ``built_in_font_gen.py`` script in ``lvgl/scripts/built_in_font`` folder. (This requires Python and https://github.com/lvgl/lv_font_conv/ to be installed.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:296
msgid "To declare a font in a file, use :cpp:expr:`LV_FONT_DECLARE(my_font_name)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:298
msgid "To make fonts globally available (like the built-in fonts), add them to :c:macro:`LV_FONT_CUSTOM_DECLARE` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:304
msgid "Adding New Symbols"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:306
msgid "The built-in symbols are created from the `FontAwesome <https://fontawesome.com/>`__ font."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:308
msgid "Search for a symbol on https://fontawesome.com. For example the `USB symbol <https://fontawesome.com/icons/usb?style=brands>`__. Copy its Unicode ID which is ``0xf287``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:311
msgid "Open the `Online font converter <https://lvgl.io/tools/fontconverter>`__. Add `FontAwesome.woff <https://lvgl.io/assets/others/FontAwesome5-Solid+Brands+Regular.woff>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:313
msgid "Set the parameters such as Name, Size, BPP. You'll use this name to declare and use the font in your code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:315
msgid "Add the Unicode ID of the symbol to the range field. E.g.\\ ``0xf287`` for the USB symbol. More symbols can be enumerated with ``,``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:317
msgid "Convert the font and copy the generated source code to your project. Make sure to compile the ``.c`` file of your font."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:319
msgid "Declare the font using ``extern lv_font_t my_font_name;`` or simply use :cpp:expr:`LV_FONT_DECLARE(my_font_name)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:322
msgid "**Using the symbol**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:324
msgid "Convert the Unicode value to UTF8, for example on `this site <http://www.ltg.ed.ac.uk/~richard/utf-8.cgi?input=f287&mode=hex>`__. For ``0xf287`` the *Hex UTF-8 bytes* are ``EF 8A 87``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:327
msgid "Create a ``#define`` string from the UTF8 values: ``#define MY_USB_SYMBOL \"\\xEF\\x8A\\x87\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:328
msgid "Create a label and set the text. Eg. :cpp:expr:`lv_label_set_text(label, MY_USB_SYMBOL)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:0
msgid "note"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:330
msgid ":cpp:expr:`lv_label_set_text(label, MY_USB_SYMBOL)` searches for this symbol in the font defined in the style's ``text.font`` property. To use the symbol you will need to set the style's text font to use the generated font, e.g. :cpp:expr:`lv_style_set_text_font(&my_style, &my_font_name)` or :cpp:expr:`lv_obj_set_style_text_font(label, &my_font_name, 0)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:339
msgid "Loading a Font at Run-Time"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:341
msgid ":cpp:func:`lv_binfont_create` can be used to load a font from a file. The font needs to have a special binary format. (Not TTF or WOFF). Use `lv_font_conv <https://github.com/lvgl/lv_font_conv/>`__ with the ``--format bin`` option to generate an LVGL compatible font file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:346
msgid "To load a font :ref:`LVGL's filesystem <file_system>` needs to be enabled and a driver must be added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:364
msgid "Loading a Font from a Memory Buffer at Run-Time"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:366
msgid ":cpp:func:`lv_binfont_create_from_buffer` can be used to load a font from a memory buffer. This function may be useful to load a font from an external file system, which is not supported by LVGL. The font needs to be in the same format as if it were loaded from a file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:370
msgid "To load a font from a buffer :ref:`LVGL's filesystem <file_system>` needs to be enabled and the MEMFS driver must be added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:394
msgid "Using a BDF Font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:396
msgid "Small displays with low resolution don't look pretty with automatically rendered fonts. A bitmap font provides the solution, but it's necessary to convert the bitmap font (BDF) to a TTF."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:400
msgid "Convert BDF to TTF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:402
msgid "BDF are bitmap fonts where fonts are not described in outlines but in pixels. BDF files can be used but they must be converted into the TTF format using ``mkttf``, which can be found in this GitHub repository:  https://github.com/Tblue/mkttf .  This tool uses potrace to generate outlines from the bitmap information. The bitmap itself will be embedded into the TTF as well. `lv_font_conv <https://github.com/lvgl/lv_font_conv/>`__ uses the embedded bitmap but it also needs the outlines. One might think you can use a fake MS Bitmap only sfnt (ttf) (TTF without outlines) created by fontforge, but this will not work."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:409
msgid "Install imagemagick, python3, python3-fontforge and potrace"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:411
msgid "On Ubuntu Systems, just type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:417
msgid "Clone mkttf"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:423
msgid "Read the mkttf docs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:425
msgid "Former versions of imagemagick needs the imagemagick call in front of convert, identify and so on. But newer versions don't. So you might want to change 2 lines in ``potrace-wrapper.sh`` --- open ``potrace-wrapper.sh`` and remove imagemagick from line 55 and line 64:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:429
msgid "line 55"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:435
msgid "line 64"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:441
msgid "It might be necessary to change the mkttf.py script."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:443
msgid "line 1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:450
msgid "Example for a 12px font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:463
msgid "The TTF ``TerminusMedium-001.000.ttf`` will be created from ``./TerminusMedium-12-12.bdf``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:465
msgid "To create a font for LVGL:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:471
msgid "use 1-bpp because we don't use anti-aliasing. It doesn't look sharp on displays with a low resolution."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:476
msgid "Adding a New Font Engine"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:478
msgid "LVGL's font interface is designed to be very flexible but, even so, you can add your own font engine in place of LVGL's internal one. For example, you can use `FreeType <https://www.freetype.org/>`__ to real-time render glyphs from TTF fonts or use an external flash to store the font's bitmap and read them when the library needs them. FreeType can be used in LVGL as described in :ref:`Freetype <freetype>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:484
msgid "To add a new font engine, a custom :cpp:type:`lv_font_t` variable needs to be created:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:535
msgid "Using Font Fallback"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:537
msgid "If the font in use does not have a glyph needed in a text-rendering task, you can specify a ``fallback`` font to be used in :cpp:type:`lv_font_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:540
msgid "``fallback`` can be chained, so it will try to solve until there is no ``fallback`` set."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:559
msgid ":ref:`font/lv_font.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:561
msgid ":ref:`font/lv_font_fmt_txt.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/font.rst:563
msgid ":ref:`font/lv_font_fmt_txt_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:5
msgid "File System (lv_fs_drv)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:7
msgid "LVGL has a \"File system\" abstraction module that enables you to attach any type of file system.  A file system is identified by an assigned identifier letter.  For example, if an SD card is associated with the letter ``'S'``, a file can be reached using ``\"S:/path/to/file.txt\"``.  See details under :ref:`lv_fs_identifier_letters`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:15
msgid "If you want to skip the drive-letter prefix in Unix-like paths, you can use the :c:macro:`LV_FS_DEFAULT_DRIVER_LETTER` config parameter."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:21
msgid "Ready-to-Use Drivers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:23
msgid "LVGL contains prepared drivers for the API of POSIX, standard C, Windows, and `FATFS <http://elm-chan.org/fsw/ff/00index_e.html>`__. Learn more :ref:`here <libs_filesystem>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:32
msgid "Identifier Letters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:34
msgid "As mentioned above, a file system is identified by an assigned identifier letter. This identifier is merely a way for the LVGL File System abstraction logic to look up the appropriate registered file-system driver for a given path."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:38
msgid "**How it Works:**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:40
msgid "You register a driver for your file system and assign it an identifier letter.  This letter must be unique among all registered file-system drivers, and in the range [A-Z] or the character '/'.  See :ref:`lv_fs_adding_a_driver` for how this is done."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:44
msgid "Later, when using paths to files on your file system, you prefix the path with that identifier character plus a colon (':')."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:49
msgid "Do not confuse this with a Windows or DOS drive letter."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:51
msgid "**Example:**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:53
msgid "Let's use the letter 'Z' as the identifier character, and \"path_to_file\" as the path, then the path strings you pass to ``lv_fs_...()`` functions would look like this::"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:64
msgid "Note also that the path can be a relative path or a \"rooted path\" (beginning with ``/``), though rooted paths are recommended since the driver does not yet provide a way to set the default directory."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:68
#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:209
msgid "**Examples for Unix-like file systems:**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:70
msgid "\"Z:/etc/images/splash.png\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:71
msgid "\"Z:/etc/images/left_button.png\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:72
msgid "\"Z:/etc/images/right_button.png\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:73
msgid "\"Z:/home/users/me/wip/proposal.txt\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:75
#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:215
msgid "**Examples for Windows/DOS-like file systems:**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:77
msgid "\"Z:C:/Users/me/wip/proposal.txt\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:78
msgid "\"Z:/Users/me/wip/proposal.txt\"  (if the default drive is known to be C:)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:79
msgid "\"Z:C:/Users/Public/Documents/meeting_notes.txt\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:80
msgid "\"Z:D:/to_print.docx\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:82
msgid "Reminder:  Note carefully that the prefixed \"Z:\" has nothing to do with the \"C:\" and \"D:\" Windows/DOS drive letters in 3 of the above examples, which are part of the path. \"Z:\" is used to look up the driver for that file system in the list of all file-system drivers registered with LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:92
msgid "Adding a Driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:95
msgid "Registering a driver"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:97
msgid "To add a driver, a :cpp:type:`lv_fs_drv_t` object needs to be initialized and registered in a way similar to the code below.  The :cpp:type:`lv_fs_drv_t` variable needs to be static, global or dynamically allocated and not a local variable, since its contents need to remain valid as long as the driver is in use."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:126
msgid "Any of the callbacks can be ``NULL`` to indicate that operation is not supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:130
msgid "Implementing the callbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:133
msgid "Open callback"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:135
msgid "The prototype of ``open_cb`` looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:141
msgid "``path`` is the path after the drive letter (e.g. \"S:path/to/file.txt\" -> \"path/to/file.txt\"). ``mode`` can be :cpp:enumerator:`LV_FS_MODE_WR` or :cpp:enumerator:`LV_FS_MODE_RD` to open for writes or reads."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:144
msgid "The return value is a pointer to a *file object* that describes the opened file or ``NULL`` if there were any issues (e.g. the file wasn't found). The returned file object will be passed to other file system related callbacks. (See below.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:150
msgid "Other callbacks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:152
msgid "The other callbacks are quite similar. For example ``write_cb`` looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:159
msgid "For ``file_p``, LVGL passes the return value of ``open_cb``, ``buf`` is the data to write, ``btw`` is the number of \"bytes to write\", ``bw`` is the number of \"bytes written\" (written to during the function call)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:163
msgid "For a list of prototypes for these callbacks see `lv_fs_template.c <https://github.com/lvgl/lvgl/blob/master/examples/porting/lv_port_fs_template.c>`__. This file also provides a template for new file-system drivers you can use if the one you need is not already provided."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:169
msgid "Drivers that come with LVGL"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:171
msgid "As of this writing, the list of already-available file-system drivers can be enabled by setting one or more of the following macros to a non-zero value in ``lv_conf.h``. The drivers are as implied by the macro names."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:175
msgid "If you use more than one, each associated identifier letter you use must be unique."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:177
msgid ":c:macro:`LV_USE_FS_FATFS`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:178
#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:193
msgid ":c:macro:`LV_USE_FS_STDIO`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:179
#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:194
msgid ":c:macro:`LV_USE_FS_POSIX`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:180
#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:195
msgid ":c:macro:`LV_USE_FS_WIN32`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:181
msgid ":c:macro:`LV_USE_FS_MEMFS`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:182
msgid ":c:macro:`LV_USE_FS_LITTLEFS`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:183
msgid ":c:macro:`LV_USE_FS_ARDUINO_ESP_LITTLEFS`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:184
msgid ":c:macro:`LV_USE_FS_ARDUINO_SD`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:189
msgid "Limiting Directory Access"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:191
msgid "If you are using one of the following file-system drivers:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:197
msgid "you will have a ``LV_FS_xxx_PATH`` macro available to you in ``lv_conf.h`` that you can use to provide a path that gets dynamically prefixed to the ``path_to_file`` portion of of the path strings provided to ``lv_fs_...()`` functions when files and directories are opened.  This can be useful to limit directory access (e.g. when a portion of a path can be typed by an end user), or simply to reduce the length of the path strings provided to ``lv_fs_...()`` functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:204
msgid "Do this by filling in the full path to the directory you wish his access to be limited to in the applicable ``LV_FS_xxx_PATH`` macro in ``lv_conf.h``.  Do not prefix the path with the driver-identifier letter, and do append a directory separator character at the end."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:221
msgid "Then in both cases, path strings passed to ``lv_fs_...()`` functions in the application get reduced to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:224
msgid "\"Z:wip/proposal.txt\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:229
msgid "Usage Example"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:231
msgid "The example below shows how to read from a file:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:247
msgid "The mode in :cpp:func:`lv_fs_open` can be :cpp:enumerator:`LV_FS_MODE_WR` to open for writes only, :cpp:enumerator:`LV_FS_MODE_RD` for reads only, or :cpp:enumerator:`LV_FS_MODE_RD` ``|`` :cpp:enumerator:`LV_FS_MODE_WR` for both."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:251
msgid "This example shows how to read a directory's content. It's up to the driver how to mark directories in the result but it can be a good practice to insert a ``'/'`` in front of each directory name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:283
msgid "Use Drives for Images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:285
msgid ":ref:`Image <lv_image>` Widgets can be opened from files as well (besides variables stored in the compiled program)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:288
msgid "To use files in Image Widgets the following callbacks are required:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:290
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:0
msgid "open"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:291
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:0
msgid "close"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:292
msgid "read"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:293
msgid "seek"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:294
msgid "tell"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:301
msgid "Optional File Buffering/Caching"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:303
msgid "Files will buffer their reads if the corresponding ``LV_FS_*_CACHE_SIZE`` config option is set to a value greater than zero. Each open file will buffer up to that many bytes to reduce the number of FS driver calls."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:307
msgid "Generally speaking, file buffering can be optimized for different kinds of access patterns. The one implemented here is optimal for reading large files in chunks, which is what the image decoder does. It has the potential to call the driver's ``read`` fewer times than ``lv_fs_read`` is called. In the best case where the cache size is \\>= the size of the file, ``read`` will only be called once. This strategy is good for linear reading of large files but less helpful for short random reads across a file bigger than the buffer since data will be buffered that will be discarded after the next seek and read. The cache should be sufficiently large or disabled in that case. Another case where the cache should be disabled is if the file contents are expected to change by an external factor like with special OS files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:318
msgid "The implementation is documented below. Note that the FS functions make calls to other driver FS functions when the cache is enabled. i.e., ``lv_fs_read`` may call the driver's ``seek`` so the driver needs to implement more callbacks when the cache is enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:323
msgid "``lv_fs_read`` :sub:`(behavior when cache is enabled)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:371
msgid "(Use mouse wheel to zoom in, and drag image to pan it.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:375
msgid "``lv_fs_write`` :sub:`(behavior when cache is enabled)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:377
msgid "The part of the cache that coincides with the written content will be updated to reflect the written content."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:381
msgid "``lv_fs_seek`` :sub:`(behavior when cache is enabled)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:383
msgid "The driver's ``seek`` will not actually be called unless the ``whence`` is ``LV_FS_SEEK_END``, in which case ``seek`` and ``tell`` will be called to determine where the end of the file is."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:388
msgid "``lv_fs_tell`` :sub:`(behavior when cache is enabled)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:390
msgid "The driver's ``tell`` will not actually be called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:402
msgid ":ref:`misc/lv_fs.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/fs.rst:404
msgid ":ref:`misc/lv_fs_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:5
msgid "Images (lv_image)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:7
msgid "An image can be a file or a variable that stores the bitmap itself and some metadata."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:11
msgid "Store images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:13
msgid "You can store images in two places"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:15
msgid "as a variable in internal memory (RAM or ROM)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:16
msgid "as a file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:21
msgid "Variables"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:23
msgid "Images stored internally in a variable are composed mainly of an :cpp:struct:`lv_image_dsc_t` structure with the following fields:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:26
msgid "**header**:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:28
msgid "*cf*: Color format. See :ref:`below <overview_image_color_formats>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:29
msgid "*w*: width in pixels (<= 2048)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:30
msgid "*h*: height in pixels (<= 2048)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:31
msgid "*always zero*: 3 bits which need to be always zero"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:32
msgid "*reserved*: reserved for future use"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:33
msgid "**data**: pointer to an array where the image itself is stored"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:34
msgid "**data_size**: length of ``data`` in bytes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:36
msgid "These are usually stored within a project as C files. They are linked into the resulting executable like any other constant data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:42
msgid "Files"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:44
msgid "To deal with files you need to add a storage *Drive* to LVGL. In short, a *Drive* is a collection of functions (*open*, *read*, *close*, etc.) registered in LVGL to make file operations. You can add an interface to a standard file system (FAT32 on SD card) or you create your simple file system to read data from an SPI Flash memory. In every case, a *Drive* is just an abstraction to read and/or write data to memory. See the :ref:`File system <file_system>` section to learn more."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:52
msgid "Images stored as files are not linked into the resulting executable, and must be read into RAM before being drawn. As a result, they are not as resource-friendly as images linked at compile time. However, they are easier to replace without needing to rebuild the main program."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:60
msgid "Color formats"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:62
msgid "Various built-in color formats are supported:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:64
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_NATIVE`: Simply stores the RGB colors (in whatever color depth LVGL is configured for)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:65
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_NATIVE_WITH_ALPHA`: Like :cpp:enumerator:`LV_COLOR_FORMAT_NATIVE` but it also adds an alpha (transparency) byte for every pixel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:66
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_I1`, :cpp:enumerator:`LV_COLOR_FORMAT_I2`, :cpp:enumerator:`LV_COLOR_FORMAT_I4`, :cpp:enumerator:`LV_COLOR_FORMAT_I8`: Uses a palette with 2, 4, 16 or 256 colors and stores each pixel in 1, 2, 4 or 8 bits."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:69
msgid "Since the colors in the palette can be anything, the pixel data for these formats is stored as ``ARGB8888``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:71
msgid "When using LVGL's SW render, make sure ``LV_DRAW_SW_SUPPORT_ARGB8888`` is set to ``1`` in your LVGL config."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:73
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_A1`, :cpp:enumerator:`LV_COLOR_FORMAT_A2`, :cpp:enumerator:`LV_COLOR_FORMAT_A4`, :cpp:enumerator:`LV_COLOR_FORMAT_A8`: **Only stores the Alpha value with 1, 2, 4 or 8 bits.** The pixels take the color of ``style.img_recolor`` and the set opacity. The source image has to be an alpha channel. This is ideal for bitmaps similar to fonts where the whole image is one color that can be altered."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:79
msgid "The bytes of :cpp:enumerator:`LV_COLOR_FORMAT_NATIVE` images are stored in the following order."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:81
msgid "32-bit color depth:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:83
msgid "**Byte 0**: Blue"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:84
msgid "**Byte 1**: Green"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:85
msgid "**Byte 2**: Red"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:86
msgid "**Byte 3**: Alpha (only with :cpp:enumerator:`LV_COLOR_FORMAT_NATIVE_WITH_ALPHA`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:88
msgid "16-bit color depth:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:90
msgid "**Byte 0**: Green 3 lower bit, Blue 5 bit"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:91
msgid "**Byte 1**: Red 5 bit, Green 3 higher bit"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:92
#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:97
msgid "**Byte 2**: Alpha byte (only with :cpp:enumerator:`LV_COLOR_FORMAT_NATIVE_WITH_ALPHA`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:94
msgid "8-bit color depth:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:96
msgid "**Byte 0**: Red 3 bit, Green 3 bit, Blue 2 bit"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:99
msgid "You can store images in a *Raw* format to indicate that it's not encoded with one of the built-in color formats and an external :ref:`Image decoder <overview_image_decoder>` needs to be used to decode the image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:103
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_RAW`: Indicates a basic raw image (e.g. a PNG or JPG image)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:104
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_RAW_ALPHA`: Indicates that an image has alpha and an alpha byte is added for every pixel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:107
msgid "Add and use images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:109
msgid "You can add images to LVGL in two ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:111
msgid "using the online converter"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:112
msgid "manually create images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:115
msgid "Online converter"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:117
msgid "The online Image converter is available here: https://lvgl.io/tools/imageconverter"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:120
msgid "Adding an image to LVGL via the online converter is easy."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:122
msgid "You need to select a *BMP*, *PNG* or *JPG* image first."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:123
msgid "Give the image a name that will be used within LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:124
msgid "Select the :ref:`Color format <overview_image_color_formats>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:125
msgid "Select the type of image you want. Choosing a binary will generate a ``.bin`` file that must be stored separately and read using the :ref:`file support <overview_image_files>`. Choosing a variable will generate a standard C file that can be linked into your project."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:128
msgid "Hit the *Convert* button. Once the conversion is finished, your browser will automatically download the resulting file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:131
msgid "In the generated C arrays (variables), bitmaps for all the color depths (1, 8, 16 or 32) are included in the C file, but only the color depth that matches :c:macro:`LV_COLOR_DEPTH` in *lv_conf.h* will actually be linked into the resulting executable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:136
msgid "In the case of binary files, you need to specify the color format you want:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:139
msgid "RGB332 for 8-bit color depth"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:140
msgid "RGB565 for 16-bit color depth"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:141
msgid "RGB565 Swap for 16-bit color depth (two bytes are swapped)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:142
msgid "RGB888 for 32-bit color depth"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:145
msgid "Manually create an image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:147
msgid "If you are generating an image at run-time, you can craft an image variable to display it using LVGL. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:163
msgid "Another (possibly simpler) option to create and display an image at run-time is to use the :ref:`Canvas <lv_canvas>` Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:167
msgid "Use images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:169
msgid "The simplest way to use an image in LVGL is to display it with an :ref:`lv_image` Widget:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:182
msgid "If the image was converted with the online converter, you should use :cpp:expr:`LV_IMAGE_DECLARE(my_icon_dsc)` to declare the image in the file where you want to use it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:189
msgid "Image decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:191
msgid "As you can see in the :ref:`overview_image_color_formats` section, LVGL supports several built-in image formats. In many cases, these will be all you need. LVGL doesn't directly support, however, generic image formats like PNG or JPG."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:196
msgid "To handle non-built-in image formats, you need to use external libraries and attach them to LVGL via the *Image decoder* interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:199
msgid "An image decoder consists of 4 callbacks:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:0
msgid "info"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:201
msgid "get some basic info about the image (width, height and color format)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:202
msgid "open an image: - store a decoded image - set it to ``NULL`` to indicate the image can be read line-by-line."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:0
msgid "get_area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:205
msgid "if *open* didn't fully open an image this function should give back part of image as decoded data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:206
msgid "close an opened image, free the allocated resources."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:208
msgid "You can add any number of image decoders. When an image needs to be drawn, the library will try all the registered image decoders until it finds one which can open the image, i.e. one which knows that format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:212
msgid "The following formats are understood by the built-in decoder:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:215
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_I2`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:216
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_I4`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:217
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_I8`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:222
msgid ":cpp:enumerator:`LV_COLOR_FORMAT_RGB565A8`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:226
msgid "Custom image formats"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:228
msgid "The easiest way to create a custom image is to use the online image converter and select ``Raw`` or ``Raw with alpha`` format. It will just take every byte of the binary file you uploaded and write it as an image \"bitmap\". You then need to attach an image decoder that will parse that bitmap and generate the real, renderable bitmap."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:235
msgid "``header.cf`` will be :cpp:enumerator:`LV_COLOR_FORMAT_RAW`, :cpp:enumerator:`LV_COLOR_FORMAT_RAW_ALPHA` accordingly. You should choose the correct format according to your needs: a fully opaque image, using an alpha channel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:239
msgid "After decoding, the *raw* formats are considered *True color* by the library. In other words, the image decoder must decode the *Raw* images to *True color* according to the format described in the :ref:`overview_image_color_formats` section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:245
msgid "Registering an image decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:247
msgid "Here's an example of getting LVGL to work with PNG images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:249
msgid "First, you need to create a new image decoder and set some functions to open/close the PNG files. It should look like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:384
msgid "So in summary:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:386
msgid "In ``decoder_info``, you should collect some basic information about the image and store it in ``header``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:387
msgid "In ``decoder_open``, you should try to open the image source pointed by ``dsc->src``. Its type is already in ``dsc->src_type == LV_IMG_SRC_FILE/VARIABLE``. If this format/type is not supported by the decoder, return :cpp:enumerator:`LV_RESULT_INVALID`. However, if you can open the image, a pointer to the decoded image should be set in ``dsc->decoded``. If the format is known, but you don't want to decode the entire image (e.g. no memory for it), set ``dsc->decoded = NULL`` and use ``decoder_get_area`` to get the image area pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:394
msgid "In ``decoder_close`` you should free all allocated resources."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:395
msgid "``decoder_get_area`` is optional. In this case you should decode the whole image In ``decoder_open`` function and store image data in ``dsc->decoded``. Decoding the whole image requires extra memory and some computational overhead."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:401
msgid "Manually use an image decoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:403
msgid "LVGL will use registered image decoders automatically if you try and draw a raw image (i.e. using the ``lv_image`` Widget) but you can use them manually as well. Create an :cpp:type:`lv_image_decoder_dsc_t` variable to describe the decoding session and call :cpp:func:`lv_image_decoder_open`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:408
msgid "The ``color`` parameter is used only with ``LV_COLOR_FORMAT_A1/2/4/8`` images to tell color of the image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:426
msgid "Image post-processing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:428
msgid "Considering that some hardware has special requirements for image formats, such as alpha premultiplication and stride alignment, most image decoders (such as PNG decoders) may not directly output image data that meets hardware requirements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:432
msgid "For this reason, LVGL provides a solution for image post-processing. First, call a custom post-processing function after ``lv_image_decoder_open`` to adjust the data in the image cache, and then mark the processing status in ``cache_entry->process_state`` (to avoid repeated post-processing)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:436
msgid "See the detailed code below:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:438
msgid "Stride alignment and premultiply post-processing example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:488
msgid "GPU draw unit example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:513
msgid "Image caching"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:515
msgid "Sometimes it takes a lot of time to open an image. Continuously decoding a PNG/JPEG image or loading images from a slow external memory would be inefficient and detrimental to the user experience."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:519
msgid "Therefore, LVGL caches image data. Caching means some images will be left open, hence LVGL can quickly access them from ``dsc->decoded`` instead of needing to decode them again."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:523
msgid "Of course, caching images is resource intensive as it uses more RAM to store the decoded image. LVGL tries to optimize the process as much as possible (see below), but you will still need to evaluate if this would be beneficial for your platform or not. Image caching may not be worth it if you have a deeply embedded target which decodes small images from a relatively fast storage medium."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:531
msgid "Cache size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:533
msgid "The size of cache (in bytes) can be defined with :c:macro:`LV_CACHE_DEF_SIZE` in *lv_conf.h*. The default value is 0, so no image is cached."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:537
msgid "The size of cache can be changed at run-time with :cpp:expr:`lv_cache_set_max_size(size_t size)`, and get with :cpp:expr:`lv_cache_get_max_size()`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:542
msgid "Value of images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:544
msgid "When you use more images than available cache size, LVGL can't cache all the images. Instead, the library will close one of the cached images to free space."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:548
msgid "To decide which image to close, LVGL uses a measurement it previously made of how long it took to open the image. Cache entries that hold slower-to-open images are considered more valuable and are kept in the cache as long as possible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:553
msgid "If you want or need to override LVGL's measurement, you can manually set the *weight* value in the cache entry in ``cache_entry->weight = time_ms`` to give a higher or lower value. (Leave it unchanged to let LVGL control it.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:558
msgid "Every cache entry has a *\"life\"* value. Every time an image is opened through the cache, the *life* value of all entries is increased by their *weight* values to make them older. When a cached image is used, its *usage_count* value is increased to make it more alive."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:564
msgid "If there is no more space in the cache, the entry with *usage_count == 0* and lowest life value will be dropped."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:568
msgid "Memory usage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:570
msgid "Note that a cached image might continuously consume memory. For example, if three PNG images are cached, they will consume memory while they are open."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:574
msgid "Therefore, it's the user's responsibility to be sure there is enough RAM to cache even the largest images at the same time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:578
msgid "Clean the cache"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:580
msgid "Let's say you have loaded a PNG image into a :cpp:struct:`lv_image_dsc_t` ``my_png`` variable and use it in an ``lv_image`` Widget. If the image is already cached and you then change the underlying PNG file, you need to notify LVGL to cache the image again. Otherwise, there is no easy way of detecting that the underlying file changed and LVGL will still draw the old image from cache."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:587
msgid "To do this, use :cpp:expr:`lv_cache_invalidate(lv_cache_find(&my_png, LV_CACHE_SRC_TYPE_PTR, 0, 0))`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:590
msgid "Custom cache algorithm"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:592
msgid "If you want to implement your own cache algorithm, you can refer to the following code to replace the LVGL built-in cache manager:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:659
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:245
msgid ":ref:`draw/lv_draw_buf.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:663
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:249
msgid ":ref:`draw/lv_draw_image_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:665
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:251
msgid ":ref:`draw/lv_image_decoder.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:667
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:253
msgid ":ref:`draw/lv_image_decoder_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:669
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:255
msgid ":ref:`draw/lv_image_dsc.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:673
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:83
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:259
msgid ":ref:`lv_api_map_v9_0.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:677
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:263
msgid ":ref:`misc/cache/instance/lv_image_cache.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:679
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:265
msgid ":ref:`misc/cache/instance/lv_image_header_cache.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:681
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:267
msgid ":ref:`widgets/image/lv_image.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/image.rst:683
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:269
msgid ":ref:`widgets/image/lv_image_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:5
msgid "Input Device (lv_indev)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:11
msgid "Creating an Input Device"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:13
msgid "To create an input device on the :ref:`default_display`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:22
msgid "If you have multiple displays, you will need to ensure the Default Display is set to the display your input device is \"connected to\" before making the above calls."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:25
msgid "The ``type`` member can be:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:27
msgid ":cpp:enumerator:`LV_INDEV_TYPE_POINTER`: touchpad or mouse"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:28
msgid ":cpp:enumerator:`LV_INDEV_TYPE_KEYPAD`: keyboard or keypad"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:29
msgid ":cpp:enumerator:`LV_INDEV_TYPE_ENCODER`: encoder with left/right turn and push options"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:30
msgid ":cpp:enumerator:`LV_INDEV_TYPE_BUTTON`: external buttons virtually pressing the screen"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:32
msgid "``my_input_read`` is a function pointer which will be called periodically to report the current state of an input device to LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:38
msgid "Touchpad, Touch-Screen, Mouse or Any Pointer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:40
msgid "Input devices that can click points on the display belong to the POINTER category.  Here is an example of a simple input-device Read Callback function:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:63
msgid "Mouse Cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:65
msgid "Pointer input devices (like a mouse) can have a cursor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:77
msgid "Note that the cursor object should have :cpp:expr:`lv_obj_remove_flag(cursor_obj, LV_OBJ_FLAG_CLICKABLE)`. For images, *clicking* is disabled by default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:85
msgid "Gestures"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:87
msgid "Pointer input devices can detect basic gestures.  By default, most Widgets send gestures to their parents so they can be detected on the Screen Widget in the form of an :cpp:enumerator:`LV_EVENT_GESTURE` event.  For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:117
msgid "To prevent passing the gesture event to the parent from a Widget, use :cpp:expr:`lv_obj_remove_flag(widget, LV_OBJ_FLAG_GESTURE_BUBBLE)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:120
msgid "Note that, gestures are not triggered if a Widget is being scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:122
msgid "If you did some action on a gesture you can call :cpp:expr:`lv_indev_wait_release(lv_indev_active())` in the event handler to prevent LVGL sending further input-device-related events."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:129
msgid "Crown Behavior"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:131
msgid "A \"Crown\" is a rotary device typically found on smart watches."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:133
msgid "When the user clicks somewhere and after that turns the rotary the last clicked widget will be either scrolled or it's value will be incremented/decremented (e.g. in case of a slider)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:137
msgid "As this behavior is tightly related to the last clicked widget, the crown support is an extension of the pointer input device.  Just set ``data->diff`` to the number of turned steps and LVGL will automatically send the :cpp:enumerator:`LV_EVENT_ROTARY` event or scroll the widget based on the ``editable`` flag in the widget's class. Non-editable widgets are scrolled and for editable widgets the event is sent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:143
msgid "To get the steps in an event callback use ``int32_t diff = lv_event_get_rotary_diff(e)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:145
msgid "The rotary sensitivity can be adjusted on 2 levels:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:147
msgid "in the input device by the ``indev->rotary_sensitivity`` element (1/256 unit), and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:148
msgid "by the ``rotary_sensitivity`` style property in the widget (1/256 unit)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:150
msgid "The final diff is calculated like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:152
msgid "``diff_final = diff_in * (indev_sensitivity / 256) +  (widget_sensitivity / 256);``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:155
msgid "For example, if both the indev and widget sensitivity is set to 128 (0.5), the input diff will be multiplied by 0.25.  The value of the Widget will be incremented by that value or the Widget will be scrolled that amount of pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:160
msgid "Multi-touch gestures"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:162
msgid "LVGL has the ability to recognize multi-touch gestures, when a gesture is detected a ``LV_EVENT_GESTURE`` is passed to the object on which the gesture occurred. Currently, these multi-touch gestures are supported:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:166
msgid "Two fingers pinch (up and down)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:167
msgid "Two fingers rotation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:168
msgid "Two fingers swipe (infinite)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:170
msgid "To enable the multi-touch gesture recognition set the ``LV_USE_GESTURE_RECOGNITION`` option in the ``lv_conf.h`` file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:173
msgid "Currently, the system sends the events if the gestures are in one of the following states:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:175
msgid "``LV_INDEV_GESTURE_STATE_RECOGNIZED``: The gesture has been recognized and is now active."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:176
msgid "``LV_INDEV_GESTURE_STATE_ENDED``: The gesture has ended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:180
msgid "Multi-touch gestures overview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:182
msgid "To recognize multi touch gestures, recognizers are used. The structure ``lv_indev_t`` contains an array of recognizers, one per gesture type. These recognizers are initialized internally by ``lv_indev_create`` by calling ``lv_indev_gesture_init_recognizers`` after the indev device is created. The the recognizers can then be configured to modify the gestures thresholds. These thresholds are used to be able to recognize the gesture only after the threshold have been reached. They can be set-up like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:188
msgid "``lv_indev_set_pinch_up_threshold(lv_indev_t * indev, float threshold)``: Set the pinch up (zoom in) threshold in pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:189
msgid "``lv_indev_set_pinch_down_threshold(lv_indev_t * indev, float threshold)``: Set the pinch down (zoom out) threshold in pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:190
msgid "``lv_indev_set_rotation_rad_threshold(lv_indev_t * indev, float threshold)``: Set the rotation angle threshold in radians."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:192
msgid "The recognizers can then be updated to recognize the gestures by calling ``lv_indev_gesture_recognizers_update``. This must be done in the user defined indev ``read_cb``. This will iterate over the recognizers and stop once it detects a recognized or ended gesture. For now only one multi-touch gesture can be recognized/ended at a time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:196
msgid "Once the recognizers are updated, calling ``lv_indev_gesture_recognizers_set_data`` will update the ``lv_indev_data_t`` structure. It is meant to be done in the indev ``read_cb``. This allows the future ``lv_event_t`` to eb filled with multi-touch gesture info."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:199
msgid "Here is an example of the ``read_cb``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:226
msgid "The user is in charge of collecting the necessary touches events from the driver until the indev ``read_cb`` is called. It must then convert the specific driver input to ``lv_indev_touch_data_t`` to be processed by the ``read_cb`` at a later point. Here is an example using ``libinput``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:321
msgid "From this setup, the user can now register events callbacks to react to ``LV_EVENT_GESTURE``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:324
msgid "A touch event is represented by the ``lv_indev_touch_data_t`` structure, the fields being 1:1 compatible with events emitted by the `libinput <https://wayland.freedesktop.org/libinput/doc/latest/>`_ library"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:329
msgid "Handling multi-touch gesture events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:331
msgid "Once a gesture is recognized or ended, a ``LV_EVENT_GESTURE`` is sent. The user can the use these functions to gather more information about the gesture:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:334
msgid "``lv_event_get_gesture_type(lv_event_t * gesture_event)``: Get the type of the gesture. To be used to check which multi-touch gesture is currently reported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:336
msgid "``lv_indev_gesture_state_t lv_event_get_gesture_state(lv_event_t * gesture_event, lv_indev_gesture_type_t type)``: Get the state of the gesture. It can be one of those:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:339
msgid "``LV_INDEV_GESTURE_STATE_NONE``: The gesture is not active."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:340
msgid "``LV_INDEV_GESTURE_STATE_RECOGNIZED``: The gesture is recognized and can be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:341
msgid "``LV_INDEV_GESTURE_STATE_ENDED``: The gesture ended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:343
msgid "These functions allow the user to confirm the gesture is the expected one and that it is in a usable state. The user can then request the gestures values with the following functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:346
msgid "``lv_event_get_pinch_scale(lv_event_t * gesture_event)``: Get the pinch scale. Only relevant for pinch gesture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:347
msgid "``lv_event_get_rotation(lv_event_t * gesture_event)``: Get the rotation in radians. Only relevant for rotation gesture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:348
msgid "``lv_event_get_two_fingers_swipe_distance(lv_event_t * gesture_event)``: Get the distance in pixels from the gesture staring center. Only relevant for two fingers swipe gesture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:350
msgid "``lv_event_get_two_fingers_swipe_dir(lv_event_t * gesture_event)``: Get the direction from the starting center. Only relevant for two fingers swipe gesture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:353
msgid "This allow the user to react to the gestures and to use the gestures values. An example of such an application is available in the source tree ``examples/others/gestures/lv_example_gestures.c``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:358
msgid "Keypad or Keyboard"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:360
msgid "Full keyboards with all the letters or simple keypads with a few navigation buttons belong in the keypad category."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:363
msgid "You can fully control the user interface without a touchpad or mouse by using a keypad or encoder.  It works similar to the *TAB* key on the PC to select an element in an application or web page."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:367
msgid "To use a keyboard or keypad:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:369
msgid "Register a Read Callback function for your device and set its type to :cpp:enumerator:`LV_INDEV_TYPE_KEYPAD`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:371
msgid "Create a Widget Group (``lv_group_t * g = lv_group_create()``) and add Widgets to it with :cpp:expr:`lv_group_add_obj(g, widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:373
msgid "Assign the group to an input device: :cpp:expr:`lv_indev_set_group(indev, g)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:374
msgid "Use ``LV_KEY_...`` to navigate among the Widgets in the group.  See ``lv_core/lv_group.h`` for the available keys."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:392
msgid "Encoder"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:394
msgid "A common example of an encoder is a device with a turning knob that tells the hosting device *when* the knob is being turned, and *in which direction*."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:397
msgid "With an encoder your application can receive events from the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:399
msgid "press of its button,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:400
msgid "oong-press of its button,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:401
msgid "turn left, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:402
msgid "turn right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:404
msgid "In short, the Encoder input devices work like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:406
msgid "By turning the encoder you can focus on the next/previous object."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:407
msgid "When you press the encoder on a simple object (like a button), it will be clicked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:408
msgid "If you press the encoder on a complex object (like a list, message box, etc.) the Widget will go to edit mode whereby you can navigate inside the object by turning the encoder."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:411
msgid "To leave edit mode, long press the button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:413
msgid "To use an Encoder (similar to the *Keypads*) the Widgets should be added to a group."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:432
msgid "Widget Groups"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:433
msgid "When input focus needs to be managed among a set of Widgets (e.g. to capture user input from a keypad or encoder), that set of Widgets is placed in a group which thereafter manages how input focus moves from Widget to Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:437
msgid "In each group there is exactly one object with focus which receives the pressed keys or the encoder actions.  For example, if a :ref:`Text Area <lv_textarea>` has focus and you press some letter on a keyboard, the keys will be sent and inserted into the text area.  Similarly, if a :ref:`Slider <lv_slider>` has focus and you press the left or right arrows, the slider's value will be changed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:443
msgid "You need to associate an input device with a group.  An input device can send key events to only one group but a group can receive data from more than one input device."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:447
msgid "To create a group use :cpp:expr:`lv_group_t * g = lv_group_create()` and to add a Widget to the group use :cpp:expr:`lv_group_add_obj(g, widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:450
msgid "Once a Widget has been added to a group, you can find out what group it is in using :cpp:expr:`lv_obj_get_group(widget)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:453
msgid "To find out what Widget in a group has focus, if any, call :cpp:expr:`lv_group_get_focused(group)`.  If a Widget in that group has focus, it will return a pointer to it, otherwise it will return NULL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:457
msgid "To associate a group with an input device use :cpp:expr:`lv_indev_set_group(indev, g)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:466
msgid "There are some predefined keys which have special meaning:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:468
msgid ":cpp:enumerator:`LV_KEY_NEXT`: Move focus to next object"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:469
msgid ":cpp:enumerator:`LV_KEY_PREV`: Move focus to previous object"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:470
msgid ":cpp:enumerator:`LV_KEY_ENTER`: Triggers :cpp:enumerator:`LV_EVENT_PRESSED`, :cpp:enumerator:`LV_EVENT_CLICKED`, or :cpp:enumerator:`LV_EVENT_LONG_PRESSED` etc. events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:471
msgid ":cpp:enumerator:`LV_KEY_UP`: Increase value or move up"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:472
msgid ":cpp:enumerator:`LV_KEY_DOWN`: Decrease value or move down"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:473
msgid ":cpp:enumerator:`LV_KEY_RIGHT`: Increase value or move to the right"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:474
msgid ":cpp:enumerator:`LV_KEY_LEFT`: Decrease value or move to the left"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:475
msgid ":cpp:enumerator:`LV_KEY_ESC`: Close or exit (e.g. close a :ref:`Drop-Down List <lv_dropdown>`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:476
msgid ":cpp:enumerator:`LV_KEY_DEL`: Delete (e.g. a character on the right in a :ref:`Text Area <lv_textarea>`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:477
msgid ":cpp:enumerator:`LV_KEY_BACKSPACE`: Delete (e.g. a character on the left in a :ref:`Text Area <lv_textarea>`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:478
msgid ":cpp:enumerator:`LV_KEY_HOME`: Go to the beginning/top (e.g. in a :ref:`Text Area <lv_textarea>`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:479
msgid ":cpp:enumerator:`LV_KEY_END`: Go to the end (e.g. in a :ref:`Text Area <lv_textarea>`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:481
msgid "The most important special keys in your :cpp:func:`read_cb` function are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:483
msgid ":cpp:enumerator:`LV_KEY_NEXT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:484
msgid ":cpp:enumerator:`LV_KEY_PREV`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:485
msgid ":cpp:enumerator:`LV_KEY_ENTER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:486
msgid ":cpp:enumerator:`LV_KEY_UP`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:487
msgid ":cpp:enumerator:`LV_KEY_DOWN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:488
msgid ":cpp:enumerator:`LV_KEY_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:489
msgid ":cpp:enumerator:`LV_KEY_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:491
msgid "You should translate some of your keys to these special keys to support navigation in a group and interact with selected Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:494
msgid "Usually, it's enough to use only :cpp:enumerator:`LV_KEY_LEFT` and :cpp:enumerator:`LV_KEY_RIGHT` because most Widgets can be fully controlled with them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:497
msgid "With an encoder you should use only :cpp:enumerator:`LV_KEY_LEFT`, :cpp:enumerator:`LV_KEY_RIGHT`, and :cpp:enumerator:`LV_KEY_ENTER`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:501
msgid "Edit and Navigate Mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:503
msgid "Since a keypad has plenty of keys, it's easy to navigate between Widgets and edit them using the keypad. But encoders have a limited number of \"keys\" and hence it is difficult to navigate using the default options. *Navigate* and *Edit* modes are used to avoid this problem with encoders."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:509
msgid "In *Navigate* mode, an encoder's :cpp:enumerator:`LV_KEY_LEFT` or :cpp:enumerator:`LV_KEY_RIGHT` is translated to :cpp:enumerator:`LV_KEY_NEXT` or :cpp:enumerator:`LV_KEY_PREV`. Therefore, the next or previous object will be selected by turning the encoder. Pressing :cpp:enumerator:`LV_KEY_ENTER` will change to *Edit* mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:514
msgid "In *Edit* mode, :cpp:enumerator:`LV_KEY_NEXT` and :cpp:enumerator:`LV_KEY_PREV` is usually used to modify an object. Depending on the Widget's type, a short or long press of :cpp:enumerator:`LV_KEY_ENTER` changes back to *Navigate* mode. Usually, a Widget which cannot be pressed (like a :ref:`Slider <lv_slider>`) leaves *Edit* mode upon a short click. But with Widgets where a short click has meaning (e.g. :ref:`Button <lv_button>`), a long press is required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:522
msgid "Default Group"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:524
msgid "Interactive widgets (such as Buttons, Checkboxes, Sliders, etc.) can be automatically added to a default group. Just create a group with :cpp:expr:`lv_group_t * g = lv_group_create()` and set the default group with :cpp:expr:`lv_group_set_default(g)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:529
msgid "Don't forget to assign one or more input devices to the default group with :cpp:expr:`lv_indev_set_group(my_indev, g)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:535
msgid "When a Widget receives focus either by clicking it via touchpad or by navigating to it with an encoder or keypad, it goes to the :cpp:enumerator:`LV_STATE_FOCUSED` state.  Hence, focused styles will be applied to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:539
msgid "If a Widget switches to edit mode it enters the :cpp:expr:`LV_STATE_FOCUSED | LV_STATE_EDITED` states so any style properties assigned to these states will be shown."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:543
msgid "See :ref:`styles` for more details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:549
msgid "Using Buttons with Encoder Logic"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:551
msgid "In addition to standard encoder behavior, you can also utilize its logic to navigate(focus) and edit widgets using buttons. This is especially handy if you have only few buttons available, or you want to use other buttons in addition to an encoder wheel."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:556
msgid "You need to have 3 buttons available:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:558
msgid ":cpp:enumerator:`LV_KEY_ENTER`: will simulate press or pushing of the encoder button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:559
msgid ":cpp:enumerator:`LV_KEY_LEFT`: will simulate turning encoder left."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:560
msgid ":cpp:enumerator:`LV_KEY_RIGHT`: will simulate turning encoder right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:561
msgid "other keys will be passed to the focused widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:563
msgid "If you hold the keys it will simulate an encoder advance with period specified in ``indev_drv.long_press_repeat_time``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:586
msgid "Hardware Button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:588
msgid "A *Hardware Button* here is an external button (switch) typically next to the screen which is assigned to specific coordinates of the screen.  If a button is pressed it will simulate the pressing on the assigned coordinate, similar to a touchpad."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:592
msgid "To assign Hardware Buttons to coordinates use ``lv_indev_set_button_points(my_indev, points_array)``. ``points_array`` should look like ``const lv_point_t points_array[] = { {12,30}, {60,90}, ...}``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:596
msgid "Important:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:598
msgid "``points_array`` cannot be allowed to go out of scope.  Either declare it as a global variable or as a static variable inside a function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:620
msgid "When the ``button_read`` callback in the example above changes the ``data->btn_id`` to ``0`` a press/release action at the first index of the ``points_array`` will be performed (``{12,30}``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:630
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:110
msgid "Parameters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:632
msgid "The default value of the following parameters can be changed in :cpp:type:`lv_indev_t`:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:634
msgid "``scroll_limit`` Number of pixels to slide before actually scrolling the Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:635
msgid "``scroll_throw`` Scroll throw (momentum) slow-down in [%]. Greater value means faster slow-down."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:636
msgid "``long_press_time`` Press time to send :cpp:enumerator:`LV_EVENT_LONG_PRESSED` (in milliseconds)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:637
msgid "``long_press_repeat_time`` Interval of sending :cpp:enumerator:`LV_EVENT_LONG_PRESSED_REPEAT` (in milliseconds)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:638
msgid "``read_timer`` pointer to the ``lv_timer`` which reads the input device. Its parameters can be changed by calling ``lv_timer_...()`` functions. :c:macro:`LV_DEF_REFR_PERIOD` in ``lv_conf.h`` sets the default read period."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:643
msgid "Buffered Reading"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:645
msgid "By default, LVGL calls ``read_cb`` periodically. Because of this intermittent polling there is a chance that some user gestures are missed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:649
msgid "To solve this you can write an event driven driver for your input device that buffers measured data. In ``read_cb`` you can report the buffered data instead of directly reading the input device. Setting the ``data->continue_reading`` flag will tell LVGL there is more data to read and it should call ``read_cb`` again."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:655
msgid "If the driver can provide precise timestamps for buffered events, it can overwrite ``data->timestamp``. By default, this is initialized to :cpp:func:`lv_tick_get()` just before invoking ``read_cb``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:660
msgid "Switching the Input Device to Event-Driven Mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:662
msgid "Normally an Input Device is read every :c:macro:`LV_DEF_REFR_PERIOD` milliseconds (set in ``lv_conf.h``).  However, in some cases, you might need more control over when to read the input device. For example, you might need to read it by polling a file descriptor (fd)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:667
msgid "You can do this by:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:679
msgid ":cpp:func:`lv_indev_read`, :cpp:func:`lv_timer_handler` and :cpp:func:`_lv_display_refr_timer` cannot run at the same time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:681
msgid "For devices in event-driven mode, `data->continue_reading` is ignored."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:686
msgid "`lv_port_indev_template.c <https://github.com/lvgl/lvgl/blob/master/examples/porting/lv_port_indev_template.c>`__ for a template for your own Input-Device driver."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:699
msgid ":ref:`indev/lv_indev_gesture.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:701
msgid ":ref:`indev/lv_indev_gesture_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:703
msgid ":ref:`indev/lv_indev_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/indev.rst:705
msgid ":ref:`indev/lv_indev_scroll.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/index.rst:5
msgid "Main Modules"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:5
msgid "Timer (lv_timer)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:7
msgid "LVGL has a built-in Timer system. You can register a function to have it be called periodically. The Timers are handled and called in :cpp:func:`lv_timer_handler`, which needs to be called every few milliseconds. See :ref:`timer_handler` for more information."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:12
msgid "By default, LVGL itself uses Timers to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:14
msgid "refresh each display --- during the creation of each :ref:`Display`, a Timer is created for that Display.  That Timer refreshes the display based on the configured value of :c:macro:`LV_DEF_REFR_PERIOD`, and also sends all display-related events, like :cpp:enumerator:`LV_EVENT_REFR_START`, :cpp:enumerator:`LV_EVENT_REFR_READY`, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:19
msgid "read input devices --- during the creation of each :ref:`indev`, a Timer is created for that Input Device based on the configured value of :c:macro:`LV_DEF_REFR_PERIOD`.  That Timer causes that input device to be read and also sends all input-device-related events, like :cpp:enumerator:`LV_EVENT_CLICKED`, :cpp:enumerator:`LV_EVENT_PRESSED`, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:24
msgid "update system-monitor values --- if :c:macro:`LV_USE_SYSMON` is set to ``1`` in ``lv_conf.h``, one or more timers are created to periodically compute and monitor system performance statistics and LVGL's memory usage."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:28
msgid "Timers are non-preemptive, which means a Timer cannot interrupt another Timer. Therefore, you can call any LVGL-related function in a Timer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:34
msgid "Creating a Timer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:36
msgid "To create a new Timer, use :cpp:expr:`lv_timer_create(timer_cb, period_ms, user_data)`. It returns an :cpp:type:`lv_timer_t` ``*`` which can be used later to modify the parameters of the Timer, pause it, or delete it when it is no longer needed. :cpp:func:`lv_timer_create_basic` can also be used to create a new Timer without specifying any parameters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:43
msgid "A Timer callback should have this prototype:  ``void (*lv_timer_cb_t)(lv_timer_t *)``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:70
msgid "Ready and Reset"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:72
msgid ":cpp:expr:`lv_timer_ready(timer)` makes a Timer run on the next call of :cpp:func:`lv_timer_handler`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:75
msgid ":cpp:expr:`lv_timer_reset(timer)` resets the period of a Timer. It will be called again after its currently-set period (in milliseconds) has elapsed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:78
msgid "See what happens when :ref:`no timers are ready <timer_handler_no_timer_ready>` and :cpp:func:`lv_timer_handler` is called."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:84
msgid "Setting Parameters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:86
msgid "You can modify these Timer parameters at any time during its life:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:88
msgid ":cpp:expr:`lv_timer_set_cb(timer, new_cb)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:89
msgid ":cpp:expr:`lv_timer_set_period(timer, new_period_ms)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:90
msgid ":cpp:expr:`lv_timer_set_user_data(timer, user_data)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:95
msgid "Repeat Count"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:97
msgid "When a Timer is created, its repeat-count is set to ``-1`` to cause it to repeat indefinitely.  You can make a Timer repeat only a given number of times with :cpp:expr:`lv_timer_set_repeat_count(timer, count)`.  By default, once the Timer has run ``count`` times, it will be automatically deleted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:102
msgid "You can use :cpp:expr:`lv_timer_set_auto_delete(timer, false)` if you want the timer to instead be paused after it has run ``count`` times.  This can be handy if you reuse that timer repeatedly and want to avoid the CPU and :cpp:func:`lv_malloc` overhead of repeatedly creating and deleting a timer.  If you use this option, you will need to set its repeat count (to either ``-1`` or a positive repeat count, since it will have decremented to ``0``) and :ref:`resume <timer_pause_and_resume>` it to make it active again."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:117
msgid ":cpp:expr:`lv_timer_pause(timer)` pauses the specified Timer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:119
msgid ":cpp:expr:`lv_timer_resume(timer)` resumes the specified Timer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:124
msgid "Measuring Idle Time"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:126
msgid "You can get the idle percentage time of :cpp:func:`lv_timer_handler` with :cpp:func:`lv_timer_get_idle`. Note that it does not measure the idle time of the overall system, only of :cpp:func:`lv_timer_handler`.  This can be misleading if you are using an operating system and DMA and/or GPU are used during rendering, as it does not actually measure the time the OS spends in an idle thread."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:132
msgid "If you are using an OS and wish to get the time the CPU is spending in an idle thread, one way of doing so is configuring :c:macro:`LV_USE_SYSMON` and :c:macro:`LV_USE_PERF_MONITOR` to ``1`` in ``lv_conf.h`` (if they are not already), and setting the macro :c:macro:`LV_SYSMON_GET_IDLE` to the name of a function that fetches the percent of CPU time spent in the OS's idle thread.  An example of such a function is :cpp:func:`lv_os_get_idle_percent` in ``lv_freertos.c``.  While the configuration is set this way, some system performance statistics (including CPU load) will appear on the display in a partially-transparent label whose location is set by the :c:macro:`LV_USE_PERF_MONITOR_POS` macro."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:145
msgid "Enable and Disable"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:147
msgid "You can temporarily disable Timer handling with :cpp:expr:`lv_timer_enable(false)`. Be advised:  this also pauses handling of Timers that refresh Display(s) and read from input devices, so don't forget to re-enable it with :cpp:expr:`lv_timer_enable(true)` as soon as the need for the pause is over."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:155
msgid "Timer Handler Resume Callback"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:157
msgid "When the Timer system has been disabled (causing :cpp:func:`lv_timer_handler` to return early before it has processed any timers), if you want to take some action when the Timer system is re-enabled again, set a resume callback using :cpp:expr:`lv_timer_handler_set_resume_cb(cb, user_data)`. The callback should have this prototype:  ``void (*lv_timer_handler_resume_cb_t)(void*)``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:166
msgid "Asynchronous calls"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:168
msgid "There are several cases in which you may not want to perform an action immediately. Some examples are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:171
msgid "you cannot delete a Widget because something else is still using it,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:172
msgid "you don't want to block execution now, or"
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:173
msgid "you detect the need to delete a Widget in a thread other than the thread making LVGL calls (e.g. in a case where you are using a :ref:`Gateway Thread <Gateway Thread>` to make all LVGL calls in a multi-threaded environment)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:177
msgid "For these cases, :cpp:expr:`lv_async_call(my_function, data_p)` can be used to call ``my_function`` on the next invocation of :cpp:func:`lv_timer_handler`.  As a side effect, this also ensures it is called in a thread in which it is safe to make LVGL calls. ``data_p`` will be passed to the function when it's called. Note that only the data's pointer is saved, so whatever it is pointing to needs to remain valid until the function is called, so it can point to ``static``, global or dynamically allocated data. If you want to cancel an asynchronous call, call :cpp:expr:`lv_async_call_cancel(my_function, data_p)`, which will remove all asynchronous calls matching ``my_function`` and ``data_p``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:188
msgid "Note that if :cpp:expr:`lv_async_call(my_function, data_p)` is called from a thread other than the one that normally makes LVGL calls, you are still obligated to protect the LVGL data structure using a MUTEX."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:215
msgid "If you just want to delete a Widget and don't need to clean anything up in ``my_screen_cleanup`` you could just use :cpp:expr:`lv_obj_delete_async(widget)` which will delete the Widget on the next call to :cpp:func:`lv_timer_handler`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/main-modules/timer.rst:231
msgid ":ref:`misc/lv_timer_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:5
msgid "3D Texture (lv_3dtexture)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:10
msgid "3D texture widgets are used to embed an external 3D graphics library's \"texture\" primitive into an LVGL UI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:17
#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:19
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:17
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:16
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:22
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:22
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:26
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:29
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:19
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:120
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:17
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:25
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:21
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:22
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:19
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:17
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:16
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:16
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:18
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:23
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:19
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:28
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:21
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:19
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:21
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:29
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:22
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:19
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:22
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:25
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:31
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:22
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:24
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:19
msgid "Parts and Styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:19
msgid "The size should be set to the actual size of the texture primitive. The opacity may also be changed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:28
msgid "Requires a draw unit to be enabled which can draw the :cpp:enumerator:`LV_DRAW_TASK_TYPE_3D` draw task type."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:31
msgid "OpenGL is the first supported 3D graphics back-end. The following must be enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:33
msgid ":c:macro:`LV_USE_3DTEXTURE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:34
msgid ":c:macro:`LV_USE_OPENGLES`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:35
msgid ":c:macro:`LV_USE_DRAW_OPENGLES`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:37
msgid "See :ref:`LVGL's OpenGLES driver docs <opengl_es_driver>` to create a window and a display texture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:40
msgid "The `lv_example_3dtexture <https://github.com/lvgl/lv_example_3dtexture>` repository is a demonstration of how to use the ``3dtexture`` widget to load glTF models with OpenGL and display them in LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:53
msgid "The real type of :cpp:type:`lv_3dtexture_id_t` depends on the active 3D graphics back-end. With OpenGL, the type is ``unsigned int``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:62
msgid "3D Texture has no special event handling."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:70
msgid "See the `lv_example_3dtexture <https://github.com/lvgl/lv_example_3dtexture>` repo."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:79
msgid ":ref:`widgets/3dtexture/lv_3dtexture.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/3dtexture.rst:81
msgid ":ref:`widgets/3dtexture/lv_3dtexture_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:5
msgid "Animation Image (lv_animimg)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:10
msgid "The animation image is similar to the normal 'Image' Widget. The only difference is that instead of one source image, you set an array of multiple source images that supply \"frames\" in an animation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:14
msgid "You can specify a duration and repeat count."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:21
msgid ":cpp:enumerator:`LV_PART_MAIN` A background rectangle that uses the :ref:`typical background style properties <typical bg props>` and the image itself using the image style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:31
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:35
msgid "Image sources"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:33
msgid "To set the image animation image sources, use :cpp:expr:`lv_animimg_set_src(animimg, dsc[], num)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:36
msgid "To set the images source for flip playback of animation image, use :cpp:expr:`lv_animimg_set_src_reverse(animimg, dsc[], num)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:40
msgid "Using the inner animation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:42
msgid "For more advanced use cases, the animation used internally by the image can be retrieved using :cpp:expr:`lv_animimg_get_anim(animimg)`.  Using this, you can use the :ref:`Animation <animation>` functions, for example, to override the animation values using the :cpp:expr:`lv_anim_set_values(anim, start, end)` or to set a callback on the animation completed event."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:56
msgid "No special events are sent by Animation-Image Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:60
#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:156
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:87
#: ../../lvgl/docs/intermediate/details/widgets/button.rst:47
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:141
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:126
#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:94
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:372
#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:73
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:147
#: ../../lvgl/docs/intermediate/details/widgets/image.rst:211
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:81
#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:129
#: ../../lvgl/docs/intermediate/details/widgets/label.rst:199
#: ../../lvgl/docs/intermediate/details/widgets/led.rst:61
#: ../../lvgl/docs/intermediate/details/widgets/line.rst:65
#: ../../lvgl/docs/intermediate/details/widgets/list.rst:64
#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:104
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:145
#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:114
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:90
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:283
#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:112
#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:159
#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:76
#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:52
#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:79
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:100
#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:105
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:238
#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:69
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:107
msgid "Learn more about :ref:`lv_obj_events` emitted by all Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:71
msgid "No *Keys* are processed by Animation-Image Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/animimg/index.rst:3
msgid "Simple Animation Image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:94
msgid ":ref:`widgets/animimage/lv_animimage.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/animimg.rst:96
msgid ":ref:`widgets/animimage/lv_animimage_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:5
msgid "Arc (lv_arc)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:11
msgid "The Arc consists of a background and a foreground arc. The foreground (indicator) can be touch-adjusted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:19
msgid ":cpp:enumerator:`LV_PART_MAIN` Draws a background using the typical background style properties and an arc using the Arc style properties. The Arc's size and position will respect the *padding* style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:22
msgid ":cpp:enumerator:`LV_PART_INDICATOR` Draws another Arc using the *Arc* style properties. Its padding values are interpreted relative to the background Arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:25
msgid ":cpp:enumerator:`LV_PART_KNOB` Draws a handle on the end of the indicator using all background properties and padding values. With zero padding the knob size is the same as the indicator's width. Larger padding makes it larger, smaller padding makes it smaller."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:37
#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:50
msgid "Value and range"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:39
msgid "A new value can be set using :cpp:expr:`lv_arc_set_value(arc, new_value)`. The value is interpreted in a range (minimum and maximum values) which can be modified with :cpp:expr:`lv_arc_set_range(arc, min, max)`. The default range is 0..100."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:44
msgid "The indicator Arc is drawn on the main part's Arc. Thus, if the value is set to maximum, the indicator Arc will cover the entire \"background\" Arc. To set the start and end angle of the background Arc use any of these functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:48
msgid ":cpp:expr:`lv_arc_set_bg_start_angle(arc, angle)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:49
msgid ":cpp:expr:`lv_arc_set_bg_end_angle(arc, angle)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:50
msgid ":cpp:expr:`lv_arc_set_bg_angles(arc, start_angle, end_angle)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:52
msgid "Zero degrees is at the middle right (3 o'clock) of the Widget and the degrees increasing in the clockwise direction.  The angle values should be in the range [0..360]."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:59
msgid "An offset to the 0-degree position can be added with :cpp:expr:`lv_arc_set_rotation(arc, deg)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:65
msgid "The Arc can be one of the following modes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:67
msgid ":cpp:enumerator:`LV_ARC_MODE_NORMAL` Indicator Arc is drawn clockwise from minimum to current value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:68
msgid ":cpp:enumerator:`LV_ARC_MODE_REVERSE` Indicator Arc is drawn counter-clockwise from maximum to current value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:70
msgid ":cpp:enumerator:`LV_ARC_MODE_SYMMETRICAL` Indicator Arc is drawn from middle point to current value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:72
msgid "The mode can be set by :cpp:expr:`lv_arc_set_mode(arc, LV_ARC_MODE_...)` and has no effect until angle is set by :cpp:func:`lv_arc_set_value` or value of the Arc is changed by pointer input (finger, mouse, etc.)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:77
msgid "Change rate"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:79
msgid "When the Arc's value is changed by pointer input (finger, mouse, etc.), the rate of its change is limited according to its *change rate*.  Change rate is defined in degrees/second units and can be set with :cpp:expr:`lv_arc_set_change_rate(arc, rate)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:85
msgid "Knob offset"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:87
msgid "Changing the knob offset allows the location of the knob to be moved relative to the end of the Arc.  The knob offset can be set by :cpp:expr:`lv_arc_set_knob_offset(arc, offset_angle)`, and will only be visible if :cpp:enumerator:`LV_PART_KNOB` is visible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:93
msgid "Setting indicator programmatically"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:95
msgid "It is possible to set indicator angle directly with any of these functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:97
msgid ":cpp:expr:`lv_arc_set_start_angle(arc, start_angle)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:98
msgid ":cpp:expr:`lv_arc_set_end_angle(arc, end_angle)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:99
msgid ":cpp:expr:`lv_arc_set_angles(arc, start_angle, end_angle)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:101
msgid "When used, \"value\" and \"mode\" are ignored."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:103
msgid "In other words, the angle and value settings are independent.  You should exclusively use one or the other of the two methods.  Mixing the two could result in unintended behavior."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:107
msgid "To make the arc non-adjustable, remove the style of the knob and make the Widget non-clickable:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:116
msgid "Interactive area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:118
msgid "By default :cpp:enumerator:`LV_OBJ_FLAG_ADV_HITTEST` is disabled which means the Arc's whole area is interactive. As usual :cpp:func:`lv_obj_set_ext_click_area` can be used to increase the area that will respond to pointer input (touch, mouse, etc.) outside the Arc by a specified number of pixels."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:124
msgid "If :cpp:enumerator:`LV_OBJ_FLAG_ADV_HITTEST` is enabled the Arc will be sensitive only in the range between start and end background angles and on the Arc itself (not inside the Arc). In this case ``ext_click_area`` makes the sensitive area ticker both inward and outward. Additionally, a tolerance of :cpp:expr:`lv_dpx(50)` pixels is applied to each angle, extending the hit-test range along the Arc's length."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:131
msgid "Place another Widget on the knob"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:133
msgid "Another Widget can be positioned according to the current position of the Arc in order to follow the Arc's current value (angle). To do this use :cpp:expr:`lv_arc_align_obj_to_angle(arc, widget_to_align, radius_offset)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:137
msgid "Similarly :cpp:expr:`lv_arc_rotate_obj_to_angle(arc, widget_to_rotate, radius_offset)` can be used to rotate the Widget to the current value of the Arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:141
msgid "A typical use case is to call these functions in the ``VALUE_CHANGED`` event of the Arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:150
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` sent when Arc is pressed/dragged to a new value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:167
msgid "``LV_KEY_RIGHT/UP`` Increases value by one."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:168
msgid "``LV_KEY_LEFT/DOWN`` Decreases value by one."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/arc/index.rst:3
msgid "Simple Arc"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/arc/index.rst:10
msgid "Loader with Arc"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/arc/index.rst:16
msgid "Pie Chart with clickable slices using Arcs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:193
msgid ":ref:`widgets/arc/lv_arc.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:195
msgid ":ref:`widgets/arc/lv_arc_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:197
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:103
msgid ":ref:`widgets/arclabel/lv_arclabel.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arc.rst:199
#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:105
msgid ":ref:`widgets/arclabel/lv_arclabel_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:5
msgid "Arc Label (lv_arclabel)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:11
msgid "The Arc Label is a specialized widget designed to display text along an arc. It allows for flexible text placement and styling, making it suitable for applications where text needs to follow a curved path, such as in gauges, dials, or custom interfaces. The widget supports various configurations, including text alignment, direction, radius adjustment, and color customization."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:18
msgid ":cpp:enumerator:`LV_PART_MAIN` Represents the main part of the Arc Label, including the arc path and the text rendered along it. The appearance of the text and the arc can be customized using typical text and background style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:26
msgid "Text Management"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:28
msgid "Text can be set using :cpp:expr:`lv_arclabel_set_text(arclabel, \"Your text\")`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:29
msgid "For formatted text, use :cpp:expr:`lv_arclabel_set_text_fmt(arclabel, \"Formatted %s\", \"text\")`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:30
msgid "Static text can be set with :cpp:expr:`lv_arclabel_set_text_static(arclabel, static_text)`, which avoids dynamic memory allocation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:33
msgid "Angle Configuration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:35
msgid "Set the starting angle of the arc with :cpp:expr:`lv_arclabel_set_angle_start(arclabel, angle)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:36
msgid "Define the arc size (angular span) using :cpp:expr:`lv_arclabel_set_angle_size(arclabel, size)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:37
msgid "Angles are measured in degrees, starting from the positive x-axis (3 o'clock position) and increasing clockwise."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:40
#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:103
msgid "Direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:42
msgid "Specify the text direction along the arc using :cpp:expr:`lv_arclabel_set_dir(arclabel, LV_ARCLABEL_DIR_CLOCKWISE)` or :cpp:expr:`lv_arclabel_set_dir(arclabel, LV_ARCLABEL_DIR_COUNTERCLOCKWISE)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:44
msgid ":cpp:enumerator:`LV_ARCLABEL_DIR_CLOCKWISE` Text flows in a clockwise direction along the arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:45
msgid ":cpp:enumerator:`LV_ARCLABEL_DIR_COUNTERCLOCKWISE` Text flows in a counter-clockwise direction along the arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:50
msgid "Adjust vertical text alignment with :cpp:expr:`lv_arclabel_set_text_vertical_align(arclabel, LV_ARCLABEL_TEXT_ALIGN_CENTER)`. Set horizontal alignment using :cpp:expr:`lv_arclabel_set_text_horizontal_align(arclabel, LV_ARCLABEL_TEXT_ALIGN_CENTER)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:53
msgid "Both vertical and horizontal use the same logic."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:55
msgid ":cpp:enumerator:`LV_ARCLABEL_TEXT_ALIGN_DEFAULT` Uses the default alignment."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:56
msgid ":cpp:enumerator:`LV_ARCLABEL_TEXT_ALIGN_LEADING` Aligns text to the leading edge of the arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:57
msgid ":cpp:enumerator:`LV_ARCLABEL_TEXT_ALIGN_CENTER` Centers text along the arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:58
msgid ":cpp:enumerator:`LV_ARCLABEL_TEXT_ALIGN_TRAILING` Aligns text to the trailing edge of the arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:61
msgid "Radius and Center Offset"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:63
msgid "Set the radius of the arc with :cpp:expr:`lv_arclabel_set_radius(arclabel, radius)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:64
msgid "Adjust the center offset of the arc using :cpp:expr:`lv_arclabel_set_center_offset_x(arclabel, x)` and :cpp:expr:`lv_arclabel_set_center_offset_y(arclabel, y)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:67
msgid "Color and Recoloring"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:69
msgid "Enable text recoloring with :cpp:expr:`lv_arclabel_set_recolor(arclabel, true)`. This allows parts of the text to be colored differently using color commands embedded in the text string."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:72
msgid "Interactive Behavior"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:74
msgid "By default, Arc Label is not clickable. To make it interactive, you would need to add custom event handling, as it does not inherit clickability by default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:81
msgid "The Arc Label primarily inherits events from the base object class. It does not define specific events beyond those common to all widgets. You can attach custom event handlers to respond to interactions if needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/arclabel.rst:88
msgid "The Arc Label does not define specific key bindings beyond those inherited from the base object class. Keyboard navigation and interaction would require additional implementation."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/arclabel/index.rst:2
msgid "Simple Arc Label"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:5
msgid "Bar (lv_bar)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:11
msgid "The Bar Widget has a background and an indicator. The length of the indicator against the background indicates the Bar's current value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:14
msgid "Both the start and end values of the Bar can be set. Changing the start value to a value other than the minimum value in its range adjusts the start position of the indicator."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:24
msgid ":cpp:enumerator:`LV_PART_MAIN` The Bar's background.  It uses the :ref:`typical background style properties <typical bg props>`. Adding padding makes the indicator smaller or larger. The ``anim_time`` style property sets the animation time if the values set with :cpp:enumerator:`LV_ANIM_ON`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:28
msgid ":cpp:enumerator:`LV_PART_INDICATOR` The Bar's indicator; also uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:38
msgid "Orientation and size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:40
msgid "for orientation, width and height, simply set width and height style properties;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:41
msgid ":cpp:expr:`lv_bar_set_orientation(bar, orientation)` to override orientation caused by ``width`` and ``height``.  Valid values for ``orientation`` are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:44
msgid ":cpp:enumerator:`LV_BAR_ORIENTATION_AUTO`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:45
msgid ":cpp:enumerator:`LV_BAR_ORIENTATION_HORIZONTAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:46
msgid ":cpp:enumerator:`LV_BAR_ORIENTATION_VERTICAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:52
msgid "A new value can be set with :cpp:expr:`lv_bar_set_value(bar, new_value, LV_ANIM_ON/OFF)`. The value is interpreted in a range (minimum and maximum values) which can be modified with :cpp:expr:`lv_bar_set_range(bar, min, max)`. The default range is 0..100, and the default drawing direction is from left to right in horizontal mode and bottom to top in vertical mode. If the minimum value is greater than the maximum value, like 100..0, the drawing direction is reversed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:60
msgid "The new value in :cpp:func:`lv_bar_set_value` can be set with or without an animation depending on the last parameter (``LV_ANIM_ON/OFF``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:67
msgid "The Bar can be one of the following modes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:69
msgid ":cpp:enumerator:`LV_BAR_MODE_NORMAL` A normal Bar as described above"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:70
msgid ":cpp:enumerator:`LV_BAR_MODE_SYMMETRICAL` Draws indicator from zero value to current value. Requires a negative minimum value and positive maximum value, e.g. [-100..100]."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:72
msgid ":cpp:enumerator:`LV_BAR_MODE_RANGE` Allows setting the start value as well with :cpp:expr:`lv_bar_set_start_value(bar, new_value, LV_ANIM_ON/OFF)`. The start value must be smaller than the end value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:83
msgid "No special events are sent by Bar Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:98
msgid "No *Keys* are processed by Bar Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/bar/index.rst:2
msgid "Simple Bar"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/bar/index.rst:8
msgid "Styling a bar"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/bar/index.rst:14
msgid "Temperature meter"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/bar/index.rst:20
msgid "Stripe pattern and range value"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/bar/index.rst:26
msgid "Bar with LTR and RTL base direction"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/bar/index.rst:32
msgid "Custom drawer to show the current value"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/bar/index.rst:38
msgid "Bar with opposite direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:125
msgid ":ref:`widgets/bar/lv_bar.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/bar.rst:127
msgid ":ref:`widgets/bar/lv_bar_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/base_widget.rst:6
msgid "Base Widget (lv_obj)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/base_widget.rst:8
msgid "The most fundamental of all Widgets is the Base Widget, on which all other widgets are based.  From an Object-Oriented perspective, think of the Base Widget as the Widget class from which all other Widgets inherit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/base_widget.rst:12
msgid "By this mechanism, all Widgets carry :ref:`the features of the Base Widget <common_widget_features>`. Therefore, the functions and functionalities of the Base Widget can be used with other widgets as well. For example :cpp:expr:`lv_obj_set_width(slider, 100)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/base_widget.rst:17
msgid "The Base Widget can be used directly as a simple widget.  While it is a simple rectangle, it has a large number of features shared with all Widgets, detailed in :ref:`common_widget_features`.  In HTML terms, think of it as a ``<div>``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:5
msgid "Button (lv_button)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:10
msgid "Buttons have no new features compared to the :ref:`base_widget`. They are useful for semantic purposes and have slightly different default settings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:13
msgid "Buttons, by default, differ from the Base Widget in the following ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:15
msgid "Not scrollable"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:16
msgid "Added to the default group"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:17
msgid "Default height and width set to :cpp:enumerator:`LV_SIZE_CONTENT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:24
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the button; uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:32
msgid "There are no new features compared to :ref:`Base Widget <base_widget>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:41
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` when the :cpp:enumerator:`LV_OBJ_FLAG_CHECKABLE` flag is enabled and the Widget is clicked. The event happens on transition to/from the checked state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:58
msgid "Note that the state of :cpp:enumerator:`LV_KEY_ENTER` is translated to :cpp:enumerator:`LV_EVENT_PRESSED`, :cpp:enumerator:`LV_EVENT_PRESSING` and :cpp:enumerator:`LV_EVENT_RELEASED` etc."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/button/index.rst:3
msgid "Simple Buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/button/index.rst:10
msgid "Styling buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/button/index.rst:16
msgid "Gummy button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:85
msgid ":ref:`widgets/button/lv_button.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:87
msgid ":ref:`widgets/button/lv_button_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:89
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:184
msgid ":ref:`widgets/buttonmatrix/lv_buttonmatrix.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/button.rst:91
#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:186
msgid ":ref:`widgets/buttonmatrix/lv_buttonmatrix_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:5
msgid "Button Matrix (lv_buttonmatrix)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:11
msgid "The Button Matrix Widget is a lightweight way to display multiple Buttons in rows and columns --- lightweight because the buttons are not actually created but just virtually drawn on the fly.  With Button Matrix, each button uses only eight extra bytes of memory instead of the ~100-150 bytes a normal :ref:`Button <lv_button>` Widget plus the 100 or so bytes for the :ref:`Label <lv_label>` Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:18
msgid "New Button Matrix Widgets are added to the default group (if one is set). Additionally, Button Matrix is an editable Widget:  it allows selecting and clicking the buttons with encoder and keyboard navigation as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:28
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the Button Matrix, uses the typical background style properties. ``pad_row`` and ``pad_column`` sets the space between the buttons."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:31
msgid ":cpp:enumerator:`LV_PART_ITEMS` The buttons all use the text and typical background style properties except translations and transformations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:43
msgid "Button map"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:45
msgid "The number of buttons, their positions and text are controlled by a descriptor string array, called a *map*, passed to :cpp:expr:`lv_buttonmatrix_set_map(btn_matrix, my_map)`. The declaration of a map should look like ``const char * map[] = {\"button1\", \"button2\", \"button3\", NULL}``. Note that the last element must be either ``NULL`` or an empty string (``\"\"``)!"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:52
msgid "Use ``\"\\n\"`` in the map to insert a **line break**. E.g. ``{\"button1\", \"button2\", \"\\n\", \"button3\", \"\"}``. Each line's buttons have their width calculated automatically. So in the example the first row will have 2 buttons each with 50% width and a second row with 1 button having 100% width."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:59
msgid "The number of buttons neither includes the newline elements nor the terminating element of the array."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:63
msgid "Button widths"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:65
msgid "The buttons' width can be set in proportion to the width of other buttons in the same row with :cpp:expr:`lv_buttonmatrix_set_button_width(btn_matrix, button_id, width)` E.g. in a line with two buttons: *buttonA, width = 1* and *buttonB, width = 2*, *buttonA* will have 33 % width and *buttonB* will have 66 % width.  This is similar to how the `\"flex-grow\" <https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow>`__ property works in CSS. The width must be in the range [1..15] with the default being 1."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:73
msgid "Button behavior"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:75
msgid "Each button's behavior can be customized with the following control flags:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:77
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_HIDDEN`: Hides button; it continues to hold its space in layout."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:78
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_NO_REPEAT`: Do not emit :cpp:enumerator:`LV_EVENT_LONG_PRESSED_REPEAT` events while button is long-pressed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:79
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_DISABLED`: Disables button like :cpp:enumerator:`LV_STATE_DISABLED` on normal Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:80
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_CHECKABLE`: Enable toggling of :cpp:enumerator:`LV_STATE_CHECKED` when clicked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:81
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_CHECKED`: Make the button checked. It will use the :cpp:enumerator:`LV_STATE_CHECKED` styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:82
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_CLICK_TRIG`: 1: Enables sending :cpp:enumerator:`LV_EVENT_VALUE_CHANGE` on ``CLICK``, 0: sends :cpp:enumerator:`LV_EVENT_VALUE_CHANGE` on ``PRESS``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:83
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_POPOVER`: Show button text in a pop-over while being pressed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:84
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_RECOLOR`: Enable text recoloring with ``#color``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:85
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_CUSTOM_1`: Custom free-to-use flag"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:86
msgid ":cpp:enumerator:`LV_BUTTONMATRIX_CTRL_CUSTOM_2`: Custom free-to-use flag"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:88
msgid "By default, these flags are disabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:90
msgid "To set and clear a button's control flags, use"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:92
msgid ":cpp:expr:`lv_buttonmatrix_set_button_ctrl(btn_matrix, button_id, LV_BUTTONMATRIX_CTRL_...)` and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:93
msgid ":cpp:expr:`lv_buttonmatrix_clear_button_ctrl(btn_matrix, button_id, LV_BUTTONMATRIX_CTRL_...)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:95
msgid "respectively.  ``button_id`` is a zero-based button index (0 = first button). ``LV_BUTTONMATRIX_CTRL_...`` values can be bit-wise OR-ed together when passed to these functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:99
msgid "To set and clear the same control attribute for all buttons in a Button Matrix, use"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:101
msgid ":cpp:expr:`lv_buttonmatrix_set_button_ctrl_all(btn_matrix, LV_BUTTONMATRIX_CTRL_...)` and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:102
msgid ":cpp:expr:`lv_buttonmatrix_clear_button_ctrl_all(btn_matrix, LV_BUTTONMATRIX_CTRL_...)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:106
msgid "To set a control map for a Button Matrix (similar to `Button map`_), use"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:108
msgid ":cpp:expr:`lv_buttonmatrix_set_ctrl_map(btn_matrix, ctrl_map)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:110
msgid "An element of ``ctrl_map`` should look like :cpp:expr:`ctrl_map[0] = width | LV_BUTTONMATRIX_CTRL_NO_REPEAT |  LV_BUTTONMATRIX_CTRL_CHECKABLE`. The number of elements must be equal to the number of buttons."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:115
msgid "One checked"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:117
msgid "The \"One-checked\" feature can be enabled with :cpp:expr:`lv_buttonmatrix_set_one_checked(btn_matrix, true)` to allow only one button to be checked at a time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:128
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED`: Sent when a button is pressed/released or repeated after long press. The event parameter is set to the ID of the pressed/released button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:132
msgid ":cpp:expr:`lv_buttonmatrix_get_selected_button(btn_matrix)` returns the index of the button most recently released (the button with focus) or :cpp:enumerator:`LV_BUTTONMATRIX_BUTTON_NONE` if no such button was found."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:136
msgid ":cpp:expr:`lv_buttonmatrix_get_button_text(btn_matrix, button_id)` returns a pointer to the text of the button specified by zero-based index ``button_id``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:152
msgid "``LV_KEY_RIGHT/UP/LEFT/RIGHT`` To navigate among the buttons to select one"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:154
msgid ":cpp:enumerator:`LV_KEY_ENTER` To press/release the selected button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/buttonmatrix.rst:156
msgid "Note that long pressing the Button Matrix with an encoder can mean to enter/leave edit mode and simply long pressing a button to make it repeat as well. To avoid this contradiction, add :cpp:expr:`lv_buttonmatrix_set_button_ctrl_all(btn_matrix, LV_BUTTONMATRIX_CTRL_CLICK_TRIG | LV_BUTTONMATRIX_CTRL_NO_REPEAT)` to the Button Matrix if used with an encoder.  This disables the repeat feature so the button will not be activated upon leaving edit mode."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/buttonmatrix/index.rst:3
msgid "Simple Button matrix"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/buttonmatrix/index.rst:10
msgid "Custom buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/buttonmatrix/index.rst:17
msgid "Pagination"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:5
msgid "Calendar (lv_calendar)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:10
msgid "The Calendar Widget is a classic calendar which can:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:12
msgid "show the days of any month in a 7x7 matrix;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:13
msgid "show the name of the days;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:14
msgid "highlight the current day (today);"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:15
msgid "highlight any user-defined dates."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:17
msgid "The Calendar is added to the default group (if one is set). Calendar is an editable Widget which allows selecting and clicking the dates with encoder or keyboard navigation as well as pointer-type input devices."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:21
msgid "To make the Calendar flexible, by default it does not show the current year or month. Instead, there are optional \"headers\" that can be attached to the calendar."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:31
msgid "The calendar Widget uses the :ref:`Button Matrix <lv_buttonmatrix>` Widget under the hood to arrange the days into a matrix."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:34
msgid ":cpp:enumerator:`LV_PART_MAIN` Calendar background. Uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:36
msgid ":cpp:enumerator:`LV_PART_ITEMS` Refers to dates and day names. Button matrix control flags are set to differentiate the buttons and a custom drawer event is added to modify the properties of the buttons as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:40
msgid "day names have no border, no background and are drawn with a gray color"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:41
msgid "days of the previous and next month have the :cpp:enumerator:`LV_BUTTONMATRIX_CTRL_DISABLED` flag"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:42
msgid "today has a thicker border with the theme's primary color - highlighted days have some opacity with the theme's primary color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:50
msgid "Some functions use the :cpp:struct:`lv_calendar_date_t` type which is a structure with ``year``, ``month`` and ``day`` fields."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:54
msgid "Current date"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:56
msgid "To set the current date (today), use the :cpp:expr:`lv_calendar_set_today_date(calendar, year, month, day)` function. ``month`` needs to be in 1..12 range and ``day`` in 1..31 range."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:61
msgid "Month shown"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:63
msgid "To set the shown date, use :cpp:expr:`lv_calendar_set_month_shown(calendar, year, month)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:67
msgid "Highlighted days"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:69
msgid "The list of highlighted dates should be stored in a :cpp:struct:`lv_calendar_date_t` array and applied to the Calendar by calling :cpp:expr:`lv_calendar_set_highlighted_dates(calendar, highlighted_dates, date_num)`. Only the array's pointer will be saved so the array should be have static or global scope."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:76
msgid "Names of days"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:78
msgid "The names of the days can be adjusted with :cpp:expr:`lv_calendar_set_day_names(calendar, day_names)` where ``day_names`` looks like ``const char * day_names[7] = {\"Su\", \"Mo\", ...};`` Only the pointer of the day names is saved so the array should have static or global scope."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:85
msgid "Custom year list"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:87
msgid "Set a custom year list with :cpp:expr:`lv_calendar_header_dropdown_set_year_list(calendar, years_list)` where ``years_list`` is a pointer to the custom years list. It can be a constant string like ``static const char * years = \"2023\\n2022\\n2021\\n2020\\n2019\";``, or can be generated dynamically into a buffer as well.  Calendar stores these in a Drop-Down List Widget via :cpp:func:`lv_dropdown_set_options` so the passed string pointer can be supplied by a local variable or buffer and does not need to persist beyond the call."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/calendar/index.rst:9
#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:97
msgid "Chinese calendar"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:99
msgid "The Chinese calendar is a traditional cultural tool that integrates elements such as the lunar calendar, solar terms, and traditional festivals. It is widely used in Chinese social life, helping people understand the dates of the lunar calendar, arrange festival activities, and inherit the excellent traditional culture of the Chinese nation. Whether in families, businesses, or education, the Chinese calendar plays an irreplaceable role, enabling people to better understand and appreciate the charm of Chinese traditional culture."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:108
msgid "If you want to use the Chinese calendar, please use :cpp:expr:`lv_calendar_set_chinese_mode(calendar, true)` to enable it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:118
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent if a date is clicked. :cpp:expr:`lv_calendar_get_pressed_date(calendar, &date)` to set ``date`` to the date currently being pressed. Returns :cpp:enumerator:`LV_RESULT_OK` if there is a valid pressed date; otherwise it returns :cpp:enumerator:`LV_RESULT_INVALID`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:137
msgid "``LV_KEY_DOWN/UP/LEFT/RIGHT`` To navigate among the buttons to dates"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:138
msgid ":cpp:enumerator:`LV_KEY_ENTER` To press/release the selected date"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:149
msgid "Headers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:151
msgid "**From LVGL v8.1 onward, the header is added directly into the Calendar Widget and the API of the headers has been changed.**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:155
msgid "Arrow buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:157
msgid ":cpp:expr:`lv_calendar_add_header_arrow(calendar)` creates a header that contains a left and right arrow on the sides and text between the arrows showing the current year and month."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:162
msgid "Drop-down"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:164
msgid ":cpp:expr:`lv_calendar_add_header_dropdown(calendar)` creates a header that contains 2 Drop-Drown List Widgets for the year and month."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/calendar/index.rst:3
msgid "Calendar with header"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:186
msgid ":ref:`widgets/calendar/lv_calendar.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:188
msgid ":ref:`widgets/calendar/lv_calendar_chinese.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:190
msgid ":ref:`widgets/calendar/lv_calendar_header_arrow.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:192
msgid ":ref:`widgets/calendar/lv_calendar_header_dropdown.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/calendar.rst:194
msgid ":ref:`widgets/calendar/lv_calendar_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:5
msgid "Canvas (lv_canvas)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:11
msgid "A Canvas inherits from :ref:`Image <lv_image>` and extends it, enabling the user to draw anything. Rectangles, text, images, lines, arcs, etc. can be drawn here using LVGL's extensive drawing engine."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:21
msgid ":cpp:enumerator:`LV_PART_MAIN` Uses the :ref:`typical background <typical bg props>` and image style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:31
msgid "Buffer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:33
msgid "The Canvas needs a buffer in which to store the drawn image. To assign a buffer to a Canvas, use :cpp:expr:`lv_canvas_set_buffer(canvas, buffer, width, height, LV_COLOR_FORMAT_...)`. Where ``buffer`` is a static buffer (not just a local variable) to hold the image of the Canvas. For example, for a 100x50 ARGB8888 buffer: ``static uint8_t buffer[100 * 50 * 4]``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:40
msgid "Or you can use ``static uint8_t buffer[LV_CANVAS_BUF_SIZE(width, height, bits_per_pixel, stride_in_bytes)]``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:43
msgid "Canvas supports all the color formats like :cpp:enumerator:`LV_COLOR_FORMAT_ARGB8888` or :cpp:enumerator:`LV_COLOR_FORMAT_I2`. See the full list in the :ref:`Color formats <overview_image_color_formats>` section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:48
msgid "Indexed colors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:50
msgid "For indexed color formats (``LV_COLOR_FORMAT_I1/2/4/8``), the palette needs to be populated for all palette indices that will be used using :cpp:expr:`lv_canvas_set_palette(canvas, index, color)`.  For example, the following sets pixels with *index==3* to red."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:62
msgid "To set an individual pixel's color on the Canvas, use :cpp:expr:`lv_canvas_set_px(canvas, x, y, color, opa)`.  With indexed color formats (``LV_COLOR_FORMAT_I1/2/4/8``) pass the color index as the ``color`` argument by using the *blue* channel in the ``color`` value, e.g. :cpp:expr:`lv_color_make(0, 0, index)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:67
msgid ":cpp:expr:`lv_canvas_fill_bg(canvas, lv_color_hex(0x00ff00), LV_OPA_50)` fills the whole Canvas to blue with 50% opacity. Note that if the current color format doesn't support colors (e.g. :cpp:enumerator:`LV_COLOR_FORMAT_A8`) the color will be ignored. Similarly, if opacity is not supported (e.g. :cpp:enumerator:`LV_COLOR_FORMAT_RGB565`), it will be ignored."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:73
msgid "An array of pixels can be copied to the Canvas with :cpp:expr:`lv_canvas_copy_buf(canvas, buffer_to_copy, x, y, width, height)`. The color format of the buffer and Canvas need to match."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:77
msgid "To draw something to the Canvas use LVGL's draw functions directly. See the examples for more details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:79
msgid "The draw functions can draw to any color format to which LVGL can render. Typically this means :cpp:enumerator:`LV_COLOR_FORMAT_RGB565`, :cpp:enumerator:`LV_COLOR_FORMAT_RGB888`, :cpp:enumerator:`LV_COLOR_FORMAT_XRGB888`, and :cpp:enumerator:`LV_COLOR_FORMAT_ARGB8888`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:90
msgid "No special events are sent by Canvas Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:105
msgid "No *Keys* are processed by Canvas Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:2
msgid "Drawing on the Canvas and rotate"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:8
msgid "Transparent Canvas with chroma keying"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:15
msgid "Draw a rectangle to the canvas"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:22
msgid "Draw a label to the canvas"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:29
msgid "Draw an arc to the canvas"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:36
msgid "Draw an image to the canvas"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:43
msgid "Draw a line to the canvas"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:49
msgid "Draw a vector graphic to the canvas"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:55
msgid "Draw a triangle to the canvas"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:61
msgid "Draw Fancy Letter Effects"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/canvas/index.rst:68
msgid "Draw Fancy Letter Effects 2"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:128
msgid ":ref:`widgets/canvas/lv_canvas.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/canvas.rst:130
msgid ":ref:`widgets/canvas/lv_canvas_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:5
msgid "Chart (lv_chart)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:11
msgid "Chart Widgets are used to visualize data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:13
msgid "Charts have:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:15
msgid "0 or more background division lines (horizontal and vertical),"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:16
msgid "4 internal axes, any of which can be used to specify scale for a data series,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:17
msgid "a ``point_count`` (default 10) that applies to all data series added,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:18
msgid "0 or more data series (you can add or remove them at any time),"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:19
msgid "0 or more cursors (you can add or remove them at any time),"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:20
msgid "update mode (modifies behavior of :cpp:func:`lv_chart_set_next_value` if you use it)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:22
msgid "Charts can:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:24
msgid "display flexible axes with ticks and text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:25
msgid "show precise locations of points or other locations on chart with cursors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:26
msgid "show or hide individual data series"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:27
msgid "show or hide individual data points"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:28
msgid "show or hide cursors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:29
msgid "scroll and zoom"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:34
msgid "Chart Basics"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:36
msgid "Each chart has the following attributes (over and above attributes found in :ref:`all Widgets <base_widget>`):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:39
msgid "Type (governs how a chart's data series are drawn)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:41
msgid "Can be LINE (default), BAR, STACKED, SCATTER, or NONE."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:42
msgid "You can change the chart's type at any point during its life."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:44
msgid "Horizontal and Vertical division lines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:46
msgid "default 3 and 5 respectively"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:47
msgid "can be any non-negative value including 0"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:49
msgid "2 Y axes and 2 X axes (the latter are used with SCATTER charts)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:51
msgid "All 4 axes come with each chart automatically (they do not have to be created)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:52
msgid "Their default ranges are [0..100].  If you need a different range, set it before chart is drawn."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:54
msgid "You \"use\" an axis by associating it with a data series, which happens when the data series is created (more on this below).  More than one data series can be associated with each axis."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:58
msgid "Point count (number of data points in all data series added to the chart)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:60
msgid "default 10"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:61
msgid "If you provide your own data-value arrays, each array so provided must contain at least this number of values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:63
msgid "For LINE-, BAR-, STACKED-charts, this is the number of points on the X axis."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:64
msgid "LINE-, BAR-, STACKED-charts require only one data-value array to supply Y-values for each data point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:65
msgid "For SCATTER charts, this is the number of scatter-points in the data series."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:66
msgid "SCATTER charts have separate data-value arrays for both X-values and Y-values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:68
msgid "Any number of data series"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:70
msgid "After a chart is created, it initially contains no data series.  You have to add them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:71
msgid "You can add and remove data series at any time during a chart's life."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:72
msgid "When a data series is created, it comes with pre-allocated values array(s) based on its chart type and ``point_count``.  (All chart types use an array of Y-values.  SCATTER-type charts also use an array of X-values.).  All Y-values so allocated are set to :c:macro:`LV_CHART_POINT_NONE`, which causes that point to be hidden."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:76
msgid "To get points to be drawn on the chart, you must set their Y-values to something other than :c:macro:`LV_CHART_POINT_NONE`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:78
msgid "You can hide a point by setting its Y-value to :c:macro:`LV_CHART_POINT_NONE`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:79
msgid "If desired, you can tell a data series to instead use a value array you provide.  If you do:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:82
msgid "Pre-allocated value arrays are automatically freed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:83
msgid "That data series will continue to use *your* array from that time onward."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:84
msgid "The values in your array must remain available through the life of that data series."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:85
msgid "You must ensure each array provided contains at least ``point_count`` ``int32_t`` elements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:86
msgid "Management of the life any value arrays you provide is up to you."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:88
msgid "Any number of cursors"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:90
msgid "After a chart is created, it initially contains no cursors.  You have to add them if you want to use them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:92
msgid "You can add, show, hide or remove cursors at any time during a chart's life."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:94
msgid "Update mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:96
msgid ":ref:`See below <chart_update_modes>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:100
msgid "Chart layers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:101
msgid "When a chart is drawn, certain things appear on top of other things, in this order, from back to front:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:104
msgid "The chart's background (with optional division lines)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:105
msgid "Each data series:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:107
msgid "Earliest data series added appears on top."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:108
msgid "For a SCATTER chart, within each series, points later in the sequence will appear on top of points earlier in the sequence when there is overlap."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:111
msgid "Each cursor (if there are any):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:113
msgid "The most recent cursor added appears on top."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:122
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the chart. Uses the :ref:`typical background <typical bg props>` and line style properties (for division lines). *Padding* makes the series area smaller. For BAR and STACKED charts ``pad_column`` sets the space between bars in the same data series."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:126
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR` A scrollbar used if the chart is zoomed. See :ref:`base_widget`'s documentation for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:128
msgid ":cpp:enumerator:`LV_PART_ITEMS` Refers to the LINE or BAR data series."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:130
msgid "LINE chart: *line* properties are used by lines. ``width``, ``height``, ``bg_color`` and ``radius`` are used to set the appearance of points on the line."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:133
msgid "Bar chart: The typical background properties are used to style the bars. ``pad_column`` sets the space between columns in the same data series."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:136
msgid ":cpp:enumerator:`LV_PART_INDICATOR` Refers to points on LINE- and SCATTER-charts (small circles or squares [with possibly-rounded corners])."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:138
msgid ":cpp:enumerator:`LV_PART_CURSOR` *Line* properties are used to style cursors. ``width``, ``height``, ``bg_color`` and ``radius`` are used to set the appearance of the cursor's \"point\" showing its location.  If either ``width`` or ``height`` are set to 0, only the cursor's lines are drawn."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:148
msgid "Details"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:151
msgid "Chart type"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:153
msgid "A chart can be one of the following types:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:155
msgid ":cpp:enumerator:`LV_CHART_TYPE_NONE`: Do not display any data. Can be used to hide chart's data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:156
msgid ":cpp:enumerator:`LV_CHART_TYPE_LINE`: Draw lines between data points.  Data points can also be illustrated if their ``width``, ``height``, ``bg_color`` and ``radius`` styles (for :cpp:enumerator:`LV_PART_ITEMS`) are set and both ``width`` and ``height`` have non-zero values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:160
msgid ":cpp:enumerator:`LV_CHART_TYPE_BAR`: Draw individual vertical bars for each point in each series."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:161
msgid ":cpp:enumerator:`LV_CHART_TYPE_STACKED`: Draw vertical stacked bars where multiple data series are displayed as segments within a single bar for each data point. Supports only positive values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:163
msgid ":cpp:enumerator:`LV_CHART_TYPE_SCATTER`: X/Y chart drawing point's and optionally lines between the points if line-width style values for :cpp:enumerator:`LV_PART_ITEMS` is a non-zero value, and the point's Y-value is something other than :c:macro:`LV_CHART_POINT_NONE`.  (Drawing of individual points on a SCATTER chart can be suppressed if their Y-values are set to :c:macro:`LV_CHART_POINT_NONE`.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:169
msgid "Charts start their life as LINE charts.  You can change a chart's type with :cpp:expr:`lv_chart_set_type(chart, LV_CHART_TYPE_...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:173
msgid "Data series"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:175
msgid "You can add any number of data series to a chart by using"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:177
msgid ":cpp:expr:`lv_chart_add_series(chart, color, axis)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:179
msgid "This allocates (and returns a pointer to) an :cpp:expr:`lv_chart_series_t` structure which remembers the ``color`` and ``axis`` you specified, and comes pre-allocated with an array of ``chart->point_cnt`` ``int32_t`` Y-values, all set to :c:macro:`LV_CHART_POINT_NONE`. (A SCATTER chart also comes with a pre-allocated array of the same number of X-values.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:185
msgid "``axis`` specifies which axis is used to scale its values, and may be one of the following:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:187
msgid ":cpp:enumerator:`LV_CHART_AXIS_PRIMARY_Y`: Left axis"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:188
msgid ":cpp:enumerator:`LV_CHART_AXIS_SECONDARY_Y`: Right axis"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:189
msgid ":cpp:enumerator:`LV_CHART_AXIS_PRIMARY_X`: Bottom axis"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:190
msgid ":cpp:enumerator:`LV_CHART_AXIS_SECONDARY_X`: Top axis"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:192
msgid "When adding a data series to a SCATTER chart, bit-wise OR your selected Y axis (primary or secondary) with one of the X-axis values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:195
msgid "If you wish to have the chart use your own Y-value array instead of the one provided, you can do so with"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:198
msgid ":cpp:expr:`lv_chart_set_series_ext_y_array(chart, series, value_array)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:200
msgid "You are responsible for ensuring the array you provide contains at least ``chart->point_cnt`` elements in it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:203
msgid "``value_array`` should look like this: ``int32_t * value_array[num_points]``.  Only the array's pointer is saved in the series so its contents need to remain available for the life of the series, i.e. the array needs to be global, static or dynamically allocated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:209
msgid "Call :cpp:expr:`lv_chart_refresh(chart)` when a chart's data has changed to signal that the chart should be re-rendered next time a display refresh occurs. You do not need to do this if you are using the provided value array(s) and setting values with ``lv_chart_set_...value_...()`` functions.  See below for more information about these functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:215
msgid "A pointer to the Y-value array of a series can be obtained with :cpp:expr:`lv_chart_get_series_y_array(chart, series)`.  This is true whether you are using the provided Y-value array or provided your own."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:219
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:242
msgid "For SCATTER-type charts,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:221
msgid ":cpp:expr:`lv_chart_set_series_ext_x_array(chart, series, value_array)` and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:222
msgid ":cpp:expr:`lv_chart_get_series_x_array(chart, series)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:224
#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:247
msgid "can be used as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:227
msgid "Modifying data"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:229
msgid "You have several options to set the Y-values for a data series:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:231
msgid "Set the values programmatically in the array like ``ser1->points[3] = 7`` and refresh the chart with :cpp:expr:`lv_chart_refresh(chart)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:233
msgid "Use :cpp:expr:`lv_chart_set_series_value_by_id(chart, series, id, value)` where ``id`` is the zero-based index of the point you wish to update."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:235
msgid "Use :cpp:expr:`lv_chart_set_next_value(chart, series, value)`. (See `Update modes`_ below.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:237
msgid "Set all points to a single Y-value with :cpp:expr:`lv_chart_set_all_values(chart, series, value)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:239
msgid "Use :c:macro:`LV_CHART_POINT_NONE` as value to make the library skip drawing that point, column, or scatter-point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:244
msgid ":cpp:expr:`lv_chart_set_series_value_by_id2(chart, series, id, x_value, y_value)` and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:245
msgid ":cpp:expr:`lv_chart_set_next_value2(chart, series, x_value, y_value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:253
msgid "Update modes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:255
msgid ":cpp:func:`lv_chart_set_next_value` can behave in two ways depending on *update mode*:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:258
msgid ":cpp:enumerator:`LV_CHART_UPDATE_MODE_SHIFT`: Shift old data to the left and add the new one to the right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:259
msgid ":cpp:enumerator:`LV_CHART_UPDATE_MODE_CIRCULAR`: Add the new data in circular fashion, like an ECG diagram."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:261
msgid "The update mode can be changed with :cpp:expr:`lv_chart_set_update_mode(chart, LV_CHART_UPDATE_MODE_...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:265
msgid "Number of points"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:267
msgid "The number of points in the series can be modified by :cpp:expr:`lv_chart_set_point_count(chart, point_num)`. The default value is 10. Note: this affects the number of points processed when an external value array is assigned to a series, so you also need to be sure any external array so provided contains at least ``point_num`` elements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:274
msgid "Handling large numbers of points"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:276
msgid "On LINE charts, if the number of points is greater than the pixels horizontally, the Chart will draw only vertical lines to make the drawing of large amount of data effective. If there are, let's say, 10 points to a pixel, LVGL searches the smallest and the largest value and draws a vertical lines between them to ensure no peaks are missed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:283
msgid "Vertical range"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:285
msgid "You can specify the minimum and maximum values in Y-direction with :cpp:expr:`lv_chart_set_axis_range(chart, axis, min, max)`. ``axis`` can be :cpp:enumerator:`LV_CHART_AXIS_PRIMARY_Y` (left Y axis) or :cpp:enumerator:`LV_CHART_AXIS_SECONDARY_Y` (right Y axis)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:290
msgid "The value of the points will be scaled proportionally. The default range is: 0..100."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:294
msgid "Division lines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:296
msgid "The number of horizontal and vertical division lines can be modified by :cpp:expr:`lv_chart_set_div_line_count(chart, hdiv_num, vdiv_num)`. The default settings are 3 horizontal and 5 vertical division lines. If there is a visible border on a side and no padding on that side, the division line would be drawn on top of the border and in this case it is not drawn so as not to hide the chart border."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:304
msgid "Override default start point for series"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:306
msgid "If you want a plot to start from a point other than the default which is ``point[0]`` of the series, you can set an alternative index with the function :cpp:expr:`lv_chart_set_x_start_point(chart, series, id)` where ``id`` is the new zero-based index position to start plotting from."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:311
msgid "Note that :cpp:enumerator:`LV_CHART_UPDATE_MODE_SHIFT` also changes the ``start_point``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:315
msgid "Tick marks and labels"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:317
msgid "With the help of :ref:`Scale <lv_scale>`, vertical and horizontal scales can be added in a very flexible way.  See the `examples 2 <#axis-ticks-and-labels-with-scrolling>`_ below to learn more."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:322
msgid "Zoom"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:324
msgid "To zoom the chart all you need to do is wrap it in a parent container and set the chart's width and/or height to a larger value.  Doing this will cause the the chart to be scrollable in its parent --- the parent container provides the scrollable \"view window\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:330
msgid "Cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:332
msgid "A new cursor is initially given position :c:macro:`LV_CHART_POINT_NONE` which causes it to be hidden.  To show the cursor, its location must be set by you programmatically using one of the functions below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:336
msgid "You can hide a cursor without removing it from the chart by using :cpp:func:`lv_chart_set_cursor_point` by passing :c:macro:`LV_CHART_POINT_NONE` as the point id."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:340
msgid "A cursor can be added with ``lv_chart_cursor_t * c1 = lv_chart_add_cursor(chart, color, dir);``. The possible values of ``dir`` are the enumeration values of :cpp:type:`lv_dir_t`: ``LV_DIR_NONE/RIGHT/UP/LEFT/DOWN/HOR/VER/ALL`` or their bit-wise OR-ed values to tell the chart which direction(s) to draw its lines."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:345
msgid ":cpp:expr:`lv_chart_set_cursor_pos(chart, cursor, &point)` sets the position of the cursor to an arbitrary point on the chart. ``&point`` is a pointer to an :cpp:struct:`lv_point_t` variable. E.g. ``lv_point_t point = {10, 20}``. If the chart is scrolled, the cursor moves with it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:350
msgid ":cpp:expr:`lv_chart_get_point_pos_by_id(chart, series, id, &point_out)` gets the coordinate of a given point on the chart.  This is useful to place the cursor on that data point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:354
msgid ":cpp:expr:`lv_chart_set_cursor_point(chart, cursor, series, point_id)` places the cursor on the specified data point on the chart.  If the point's position changes (via a new value or via scrolling), the cursor moves with the point. See an example of using this function `here <#show-cursor-on-the-clicked-point>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:366
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when a new point on the chart is pressed. :cpp:expr:`lv_chart_get_pressed_point(chart)` returns the zero-based index of the pressed point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:383
msgid "No *Keys* are processed by Chart Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:3
msgid "Line Chart"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:10
msgid "Axis ticks and labels with scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:16
msgid "Show the value of the pressed points"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:22
msgid "Recolor bars based on their value"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:28
msgid "Faded area line chart with custom division lines"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:34
msgid "Show cursor on the clicked point"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:40
msgid "Scatter chart"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/chart/index.rst:46
msgid "Circular line chart with gap"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:408
msgid ":ref:`widgets/chart/lv_chart.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/chart.rst:410
msgid ":ref:`widgets/chart/lv_chart_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:5
msgid "Checkbox (lv_checkbox)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:10
msgid "The Checkbox Widget is created from a \"tick box\" and a label. When the Checkbox is clicked the tick box is toggled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:19
msgid ":cpp:enumerator:`LV_PART_MAIN` Background of Checkbox and it uses the text and the :ref:`typical background style properties <typical bg props>`. ``pad_column`` adjusts spacing between tickbox and label"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:22
msgid ":cpp:enumerator:`LV_PART_INDICATOR` The \"tick box\" is a square that uses the :ref:`typical background style properties <typical bg props>`.  By default, its size is equal to the height of the main part's font. Padding properties make the tick box larger in the respective directions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:27
msgid "The Checkbox is added to the default group (if one is set)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:38
msgid "The text can be modified with :cpp:expr:`lv_checkbox_set_text(cb, \"New text\")` and will be dynamically allocated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:42
msgid "To set static text, use :cpp:expr:`lv_checkbox_set_text_static(cb, txt)`. This way, only a pointer to ``txt`` will be stored. The provided text buffer must remain available for the lifetime of the Checkbox."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:47
msgid "Check, uncheck, disable"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:49
msgid "You can programmatically check, un-check, and disable the Checkbox by using the common state add/clear function:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:59
msgid "To find out whether the Checkbox is checked use :cpp:expr:`lv_obj_has_state(cb, LV_STATE_CHECKED)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:69
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when Checkbox is toggled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:84
msgid "The following *Keys* are processed by Checkbox:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:86
msgid "``LV_KEY_RIGHT/UP`` Go to CHECKED state if Checkbox is enabled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:87
msgid "``LV_KEY_LEFT/DOWN`` Go to non-CHECKED state if Checkbox is enabled"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:88
msgid ":cpp:enumerator:`LV_KEY_ENTER` Clicks the Checkbox and toggles its value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:90
#: ../../lvgl/docs/intermediate/details/widgets/table.rst:115
msgid "Note that, as usual, the state of :cpp:enumerator:`LV_KEY_ENTER` is translated to ``LV_EVENT_PRESSED/PRESSING/RELEASED`` etc."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/checkbox/index.rst:3
msgid "Simple Checkboxes"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/checkbox/index.rst:9
msgid "Checkboxes as radio buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:114
msgid ":ref:`widgets/checkbox/lv_checkbox.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/checkbox.rst:116
msgid ":ref:`widgets/checkbox/lv_checkbox_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:5
msgid "Drop-Down List (lv_dropdown)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:10
msgid "The Drop-Down List allows the user to select a value from a list."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:12
msgid "The Drop-Down List is closed by default and displays a single value or predefined text. When activated (by click on the Drop-Down List), a list is created from which the user may select one item. When the user selects a new value, the list is deleted again."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:17
msgid "The Drop-down list is added to the default group (if one is set). The Drop-down list is an editable Widget allowing list-item selection via encoder or keyboard navigation as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:27
msgid "The Drop-Down List Widget is built from the elements: \"button\" and \"list\" (lightweight versions of the Button and List Widgets)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:33
msgid ":cpp:enumerator:`LV_PART_MAIN` Background of button, uses the :ref:`typical background <typical bg props>` and text style properties for its text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:35
msgid ":cpp:enumerator:`LV_PART_INDICATOR` Typically an arrow symbol that can be an Image or text (e.g. :cpp:enumerator:`LV_SYMBOL`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:38
msgid "The button goes to :cpp:enumerator:`LV_STATE_CHECKED` when it's opened."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:41
msgid "List"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:43
msgid ":cpp:enumerator:`LV_PART_MAIN` The list itself; uses the :ref:`typical background style properties <typical bg props>`. ``max_height`` can be used to limit the height of the list."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:46
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR` The scrollbar background, border, shadow properties and width (for its own width) and right padding for the spacing on the right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:49
msgid ":cpp:enumerator:`LV_PART_SELECTED` Refers to the currently pressed, checked or pressed+checked option.  Also uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:53
msgid "The list is shown/hidden on open/close. To add styles to it use :cpp:expr:`lv_dropdown_get_list(dropdown)` to get the list object.  Example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:61
msgid "Alternatively the theme can be extended with new styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:73
msgid "List items"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:75
msgid "The list items are passed to the Drop-Down List as a newline-separated list in a string as the ``options`` argument to :cpp:expr:`lv_dropdown_set_options(dropdown, options)`. Each list item should be separated by ``\\n``.  Example: ``\"First\\nSecond\\nThird\"``. This string is copied by the Drop-Down List, so its contents do not need to remain available beyond this call."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:81
msgid "The :cpp:expr:`lv_dropdown_add_option(dropdown, \"New option\", pos)` function inserts a new option at index ``pos``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:84
msgid "To save memory the options can be set from a static (const) string as well with :cpp:expr:`lv_dropdown_set_options_static(dropdown, options)`. In this case the options string's contents must remain available for the life of the Drop-Down List and :cpp:func:`lv_dropdown_add_option` cannot be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:89
msgid "You can select an option programmatically with :cpp:expr:`lv_dropdown_set_selected(dropdown, id)`, where ``id`` is the index of the target option."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:94
#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:64
msgid "Get selected option"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:96
msgid "To get the *index* of the selected option, use :cpp:expr:`lv_dropdown_get_selected(dropdown)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:99
msgid ":cpp:expr:`lv_dropdown_get_selected_str(dropdown, buf, buf_size)` copies the *name* of the selected option to ``buf``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:105
msgid "The list can be created on any side. The default :cpp:enumerator:`LV_DIR_BOTTOM` can be modified using :cpp:expr:`lv_dropdown_set_dir(dropdown, LV_DIR_LEFT)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:108
msgid "If the list would be vertically out of the screen, it will be aligned to the edge."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:112
msgid "Symbol"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:114
msgid "A symbol (typically an arrow) can be added to the Drop-Down List with :cpp:expr:`lv_dropdown_set_symbol(dropdown, LV_SYMBOL_...)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:117
msgid "If the direction of the Drop-Down List is :cpp:enumerator:`LV_DIR_LEFT` the symbol will be shown on the left, otherwise on the right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:121
msgid "Show selected"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:123
msgid "The main part can either show the selected item or static text. If static is set with :cpp:expr:`lv_dropdown_set_text(dropdown, \"Some text\")` it will be shown regardless of the selected item. If the text is ``NULL`` the selected option is displayed on the button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:129
msgid "Programmatically open/close"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:131
msgid "To programmatically open or close the Drop-Down List use :cpp:expr:`lv_dropdown_open(dropdown)` or :cpp:expr:`lv_dropdown_close(dropdown)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:141
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when a new option is selected or the list is opened/closed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:142
msgid ":cpp:enumerator:`LV_EVENT_CANCEL` Sent when list is closed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:143
msgid ":cpp:enumerator:`LV_EVENT_READY` Sent when list is opened."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:158
msgid "``LV_KEY_RIGHT/DOWN`` Select next list item."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:159
msgid "``LV_KEY_LEFT/UP`` Select previous list item."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:160
msgid ":cpp:enumerator:`LV_KEY_ENTER` Apply selected list item (sends :cpp:enumerator:`LV_EVENT_VALUE_CHANGED` event and closes Drop-Down List)."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/dropdown/index.rst:3
msgid "Simple Drop down list"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/dropdown/index.rst:9
msgid "Drop down in four directions"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/dropdown/index.rst:16
msgid "Menu"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:188
msgid ":ref:`widgets/dropdown/lv_dropdown.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/dropdown.rst:190
msgid ":ref:`widgets/dropdown/lv_dropdown_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:5
msgid "Image (lv_image)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:12
msgid "Images are Widgets that display images from flash (as arrays) or from files. Images can also display symbols (``LV_SYMBOL_...``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:15
msgid "Using the :ref:`Image decoder interface <overview_image_decoder>`, custom image formats can be supported as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:23
msgid ":cpp:enumerator:`LV_PART_MAIN` A background rectangle that uses the :ref:`typical background style properties <typical bg props>`, and the image itself uses the image style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:33
msgid "Image source"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:35
msgid "To provide maximum flexibility, the source of the image can be:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:37
msgid "a variable in code (a C array containing the pixels)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:38
msgid "a file stored externally (e.g. on an SD card)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:39
msgid "a :ref:`Symbol <fonts_symbols>` as text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:41
msgid "To set the source of an image, use :cpp:expr:`lv_image_set_src(img, src)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:43
msgid "To generate a pixel array from a PNG, JPG or BMP image, use the `Online image converter tool <https://lvgl.io/tools/imageconverter>`__ and set the converted image as the image source with its pointer with :cpp:expr:`lv_image_set_src(img1, &converted_img_var)`. To make the converted image variable accessible from the C file, declare it with :cpp:expr:`LV_IMAGE_DECLARE(converted_img_var)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:49
msgid "To use external files, you also need to convert the image files using the online converter tool, but select the binary output format. You also need to use LVGL's file system module and register a driver with some functions for basic file operations.  See :ref:`File system <file_system>` to learn more.  Then set the translated image as the image source with :cpp:expr:`lv_image_set_src(img, \"S:folder1/my_img.bin\")`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:56
msgid "You can also set a symbol as an image source similar to a :ref:`Labels <lv_label>`. In this case, the image will be rendered as text according to the *font* specified in the style. It enables the use of light-weight monochrome \"characters\" instead of real images. You can set a symbol as an image source with :cpp:expr:`lv_image_set_src(img1, LV_SYMBOL_OK)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:63
msgid "Label as an image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:65
msgid "Images and labels are sometimes used to convey the same thing, such as describing what a button does.  In this context, images and labels are somewhat interchangeable:  images can display text by using the macro :c:macro:`LV_SYMBOL_DUMMY` (which equates to a 3-byte C string containing a special code) as the prefix of the text.  For example, ``lv_image_set_src(img, LV_SYMBOL_DUMMY \"Some text\")``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:73
msgid "Transparency"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:75
msgid "The internal (pixel array) and external images support 2 transparency handling methods:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:78
msgid "**Alpha byte**: An alpha channel is added to every pixel that contains its opacity, typically a byte.  It is the 'A' in the various color formats that contain an alpha channel, such as ARGB8888, ARGB8565, ARGB1555, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:81
msgid "**Indexed transparent color**:  a specific index in a color palette serves to signal transparency for each pixel that uses it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:85
msgid "Palette and Alpha index"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:87
msgid "Besides the *True color* (RGB) color format, the following formats are supported:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:90
msgid "**Indexed**: Image has a color palette, and each pixel is an index into that palette."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:91
msgid "**Alpha indexed**: The values stored at pixel positions are alpha (opacity) values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:93
msgid "These options can be selected in the image converter. Learn more about color formats in the :ref:`overview_image_color_formats` section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:97
msgid "Recolor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:99
msgid "A color can be mixed with every pixel of an image with a given intensity. This can be useful to show different states (checked, inactive, pressed, etc.) of an image without storing more versions of the same image. This feature can be enabled in the style by setting ``img_recolor_opa`` between :cpp:enumerator:`LV_OPA_TRANSP` (no recolor, value: 0) and :cpp:enumerator:`LV_OPA_COVER` (full recolor, value: 255). The default value is :cpp:enumerator:`LV_OPA_TRANSP` causing this feature to be disabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:107
msgid "The color to mix is set by ``img_recolor``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:110
msgid "Offset"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:112
msgid "With :cpp:expr:`lv_image_set_offset_x(img, x_ofs)` and :cpp:expr:`lv_image_set_offset_y(img, y_ofs)`, you can add some offset to the displayed image. Useful if the Widget size is smaller than the image source size. Using the offset parameter a `Texture atlas <https://en.wikipedia.org/wiki/Texture_atlas>`__ or a \"running image\" effect can be created by :ref:`Animating <animation>` the x or y offset."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:119
msgid "Transformations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:121
msgid "You can zoom images in or out by using :cpp:expr:`lv_image_set_scale(img, factor)`. Set ``factor`` to ``256`` or :c:macro:`LV_SCALE_NONE` to disable zooming. A larger value enlarges the images (e.g. ``512`` double size), a smaller value shrinks it (e.g. ``128`` half size). Fractional scaling works using a value that is proportionally larger or smaller, e.g. ``281`` for 10% enlargement."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:127
msgid ":cpp:expr:`lv_image_set_scale_x(img, factor)` and :cpp:expr:`lv_image_set_scale_y(img, factor)` can also be used to set the horizontal and vertical scaling independently.  They can be different values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:131
msgid "To rotate the image use :cpp:expr:`lv_image_set_rotation(img, angle_x10)`. The ``angle_x10`` argument is an ``int32_t`` containing the angle (in degrees) multiplied by 10.  This gives 0.1-degree resolution.  Example:  458 means 45.8\\ |deg|\\ ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:135
msgid "By default, the pivot point of the rotation is the center of the image. This can be changed with :cpp:expr:`lv_image_set_pivot(img, pivot_x, pivot_y)` where the coordinates ``(0,0)`` represent the top left corner."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:139
msgid "The quality of the transformation can be adjusted with :cpp:expr:`lv_image_set_antialias(img, true)`. Enabling anti-aliasing causes the transformations to be of higher quality, but slower."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:143
msgid "Transformations require the whole image to be available. Therefore indexed images (``LV_COLOR_FORMAT_I1/2/4/8_...``) and alpha only images cannot be transformed. In other words transformations work only on normal (A)RGB or A8 images stored as a C array, or on images provided by a custom :ref:`overview_image_decoder` that returns the whole image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:149
msgid "Note that the real coordinates of image Widgets do not change with a transformation. That is :cpp:expr:`lv_obj_get_width/height/x/y()` will return the original, non-zoomed coordinates."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:153
msgid "**IMPORTANT**:  The transformation of the image is independent of the transformation properties :ref:`coming from styles <style_opacity_blend_modes_transformations>`. The main differences are that pure Image Widget transformations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:157
msgid "do not transform the children of the Image Widget, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:158
msgid "the image is transformed directly without creating an intermediate layer (buffer) to snapshot the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:161
msgid "Inner align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:163
msgid "By default the image Widget's width and height are :cpp:enumerator:`LV_SIZE_CONTENT`, meaning that the Widget will be sized automatically to the size of its image source."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:166
msgid "If the Widget's width or height is set to a different value, the value of the ``inner_align`` property (set using :cpp:expr:`lv_image_set_inner_align(widget, align)`) governs how the image source is aligned inside the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:170
msgid "``align`` can be any of these values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:172
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_DEFAULT`: Meaning top left"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:173
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_TOP_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:174
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_TOP_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:175
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_TOP_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:176
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_BOTTOM_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:177
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_BOTTOM_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:178
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_BOTTOM_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:179
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_LEFT_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:180
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_RIGHT_MID`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:181
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_CENTER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:182
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_STRETCH`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:183
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_TILE`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:184
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_CONTAIN`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:185
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_COVER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:187
msgid "Any ``offset`` value is applied after the image source is aligned. For example setting an offset of ``y=-10`` with ``align`` == :cpp:enumerator:`LV_IMAGE_ALIGN_CENTER` will move the image source up 10 pixels from the center of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:191
msgid "To automatically scale or tile the image, pass one of these ``align`` values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:193
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_STRETCH` Set X and Y scale to fill the Widget's area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:194
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_TILE` Tile image to fill Widget's area. Offset is applied to shift the tiling."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:195
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_CONTAIN` The image keeps its aspect ratio, but is resized to the maximum size that fits within the Widget's area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:196
msgid ":cpp:enumerator:`LV_IMAGE_ALIGN_COVER` The image keeps its aspect ratio and fills the Widget's area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:205
msgid "No special events are sent by Image Widgets.  By default, Image Widgets are created without the LV_OBJ_FLAG_CLICKABLE flag, but you can add it to make an Image Widget detect and emit LV_EVENT_CLICKED events if desired."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:222
msgid "No *Keys* are processed by Image Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/image/index.rst:3
msgid "Image from variable and symbol"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/image/index.rst:10
msgid "Image recoloring"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/image/index.rst:17
msgid "Rotate and zoom"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/image/index.rst:23
msgid "Image offset and styling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:271
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:119
msgid ":ref:`widgets/imagebutton/lv_imagebutton.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/image.rst:273
#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:121
msgid ":ref:`widgets/imagebutton/lv_imagebutton_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:5
msgid "Image Button (lv_imagebutton)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:11
msgid "The Image Button is very similar to the simple 'Button' Widget. The only difference is that it displays user-defined images for each state instead of drawing a rectangle.  The list of states is covered below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:15
msgid "You can set a left, right and middle image, and the middle image will be repeated to match the width of the Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:24
msgid ":cpp:enumerator:`LV_PART_MAIN` Refers to the image(s). If background style properties are used, a rectangle will be drawn behind the Image Button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:37
msgid "To set the image in a state, use the :cpp:expr:`lv_imagebutton_set_src(imagebutton, LV_IMAGEBUTTON_STATE_..., src_left, src_mid, src_right)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:40
msgid "The image sources work the same as described in the :ref:`Image Widget <lv_image>` except that \"Symbols\" are not supported by the Image Button. Any of the sources can be ``NULL``. Typically the middle image should be one of the set image sources."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:44
msgid "If only ``src_mid`` is specified, the width of the widget will be set automatically to the width of the image. However, if all three sources are set, the width needs to be set by the user (using e.g. :cpp:expr:`lv_obj_set_width`) and the middle image will be tiled to fill the given size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:48
msgid "The possible states are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:50
msgid ":cpp:enumerator:`LV_IMAGEBUTTON_STATE_RELEASED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:51
msgid ":cpp:enumerator:`LV_IMAGEBUTTON_STATE_PRESSED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:52
msgid ":cpp:enumerator:`LV_IMAGEBUTTON_STATE_DISABLED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:53
msgid ":cpp:enumerator:`LV_IMAGEBUTTON_STATE_CHECKED_RELEASED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:54
msgid ":cpp:enumerator:`LV_IMAGEBUTTON_STATE_CHECKED_PRESSED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:55
msgid ":cpp:enumerator:`LV_IMAGEBUTTON_STATE_CHECKED_DISABLED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:57
msgid "The image sources set for state :cpp:enumerator:`LV_IMAGEBUTTON_STATE_RELEASED` are used for any state that has not had image sources set for it.  If an image sources have been set for other states, e.g. :cpp:enumerator:`LV_IMAGEBUTTON_STATE_PRESSED`, they will be used instead when the Image Button is in that state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:63
msgid "Setting State Programmatically"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:65
msgid "Instead of the regular :cpp:func:`lv_obj_add_state` and :cpp:func:`lv_obj_remove_state` functions, use :cpp:expr:`lv_imagebutton_set_state(imagebutton, LV_IMAGEBUTTON_STATE_...)` to set the state of Image Buttons."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:76
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when Image Button's CHECKED state is toggled. This requires the Image Button's :cpp:enumerator:`LV_OBJ_FLAG_CHECKABLE` flag to be set."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:92
msgid "``LV_KEY_RIGHT/UP`` Go to CHECKED state if :cpp:enumerator:`LV_OBJ_FLAG_CHECKABLE` is enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:94
msgid "``LV_KEY_LEFT/DOWN`` Go to un-CHECKED state if :cpp:enumerator:`LV_OBJ_FLAG_CHECKABLE` is enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/imagebutton.rst:96
msgid ":cpp:enumerator:`LV_KEY_ENTER` Clicks the Image Button"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/imagebutton/index.rst:3
msgid "Simple Image button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/index.rst:5
msgid "All Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/index.rst:13
msgid "|hr_left_250|"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:5
msgid "Keyboard (lv_keyboard)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:11
msgid "The Keyboard Widget is a special :ref:`lv_buttonmatrix` with predefined keymaps and other features to provide an on-screen virtual keyboard to write text into a :ref:`lv_textarea`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:21
msgid "Similar to Button Matrix, the Keyboard Widget consists of 2 parts:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:23
msgid ":cpp:enumerator:`LV_PART_MAIN` The main part. Uses the :ref:`typical background style properties <typical bg props>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:25
msgid ":cpp:enumerator:`LV_PART_ITEMS` The buttons. Also uses the :ref:`typical background style properties <typical bg props>` as well as *text* properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:37
msgid "Keyboards have the following modes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:39
msgid ":cpp:enumerator:`LV_KEYBOARD_MODE_TEXT_LOWER` Display lower case letters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:40
msgid ":cpp:enumerator:`LV_KEYBOARD_MODE_TEXT_UPPER` Display upper case letters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:41
msgid ":cpp:enumerator:`LV_KEYBOARD_MODE_SPECIAL` Display special characters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:42
msgid ":cpp:enumerator:`LV_KEYBOARD_MODE_NUMBER` Display numbers, +/- sign, and decimal dot"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:43
msgid ":cpp:enumerator:`LV_KEYBOARD_MODE_USER_1` through :cpp:enumerator:`LV_KEYBOARD_MODE_USER_4` User-defined modes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:45
msgid "The layouts of the ``TEXT`` modes contain \"keys\" to change mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:47
msgid "To set the mode programmatically, use :cpp:expr:`lv_keyboard_set_mode(kb, mode)`. The default mode is :cpp:enumerator:`LV_KEYBOARD_MODE_TEXT_UPPER`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:51
msgid "Assign Text Area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:53
msgid "You can assign a :ref:`Text area <lv_textarea>` to the Keyboard to automatically put the clicked characters there. To assign the Text Area, use :cpp:expr:`lv_keyboard_set_textarea(kb, text_area)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:58
msgid "Key Pop-Overs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:60
msgid "To enable key pop-overs on press, like on common Android and iOS keyboards, use :cpp:expr:`lv_keyboard_set_popovers(kb, true)`. Default control maps are preconfigured to only show the pop-overs on keys that produce a symbol (i.e. not on space). If you use a custom keymap (see below), set the :cpp:enumerator:`LV_BUTTONMATRIX_CTRL_POPOVER` flag for each key for which a pop-over should be shown."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:67
msgid "Note that pop-overs for keys in the top row will draw outside the Widget boundaries. To account for this, reserve extra free space on top of the Keyboard or ensure that the Keyboard is added *after* any Widgets adjacent to its top boundary (placing it \"above\" those Widgets) so that pop-overs will be drawn over them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:73
msgid "Pop-overs currently are merely a visual effect and don't allow selecting additional characters such as accented characters yet."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:77
msgid "New Keymap"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:79
msgid "You can specify a new map (layout) for the Keyboard with :cpp:expr:`lv_keyboard_set_map(kb, LV_KEYBOARD_MODE_..., kb_map, kb_ctrl)`. See Button Matrix's :ref:`button map` section for more information about creating new maps."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:84
msgid "Keep in mind that using following keywords in the map will have the same effect as with the original map:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:87
msgid ":c:macro:`LV_SYMBOL_OK` Send :cpp:enumerator:`LV_EVENT_READY` to the assigned Text Area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:88
msgid ":c:macro:`LV_SYMBOL_CLOSE` or :c:macro:`LV_SYMBOL_KEYBOARD` Send :cpp:enumerator:`LV_EVENT_CANCEL` to the assigned Text Area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:89
msgid ":c:macro:`LV_SYMBOL_BACKSPACE` Delete character to the left."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:90
msgid ":c:macro:`LV_SYMBOL_LEFT` Move cursor left."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:91
msgid ":c:macro:`LV_SYMBOL_RIGHT` Move cursor right."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:92
msgid ":c:macro:`LV_SYMBOL_NEW_LINE` New line."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:93
msgid "``\"ABC\"`` Load upper-case map."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:94
msgid "``\"abc\"`` Load lower-case map."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:95
msgid "``\"1#\"`` Load number map."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:98
msgid "Key customization"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:100
msgid "Each key can be customized by using draw events such as :cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:102
msgid "Check out the examples to see how it can be used in the practice."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:110
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when the button is pressed/released or repeated after long press. The event data contains the ID of the pressed/released button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:113
msgid ":cpp:enumerator:`LV_EVENT_READY`: The *Ok* button was clicked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:114
msgid ":cpp:enumerator:`LV_EVENT_CANCEL`: The *Close* button was clicked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:116
msgid "The Keyboard has a **default event handler** callback called :cpp:func:`lv_keyboard_def_event_cb`, which handles the button pressing, map changing, sending events to the assigned text area, etc. You can remove it and replace it with a custom event handler if you wish, or add an additional call-back of your own."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:123
msgid "In LVGL v8.0 and newer, adding an event handler to the Keyboard does not remove the default event handler. This behavior differs from v7, where adding an event handler would replace the previous one."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:140
msgid "``LV_KEY_RIGHT/UP/LEFT/RIGHT`` To navigate among the buttons, selecting the one navigated to."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:142
msgid ":cpp:enumerator:`LV_KEY_ENTER` To press/release the selected button."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/keyboard/index.rst:3
msgid "Keyboard with text area"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/keyboard/index.rst:10
msgid "Keyboard with custom map"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/keyboard/index.rst:17
msgid "Keyboard with drawing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:167
msgid ":ref:`widgets/keyboard/lv_keyboard.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/keyboard.rst:169
msgid ":ref:`widgets/keyboard/lv_keyboard_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:5
msgid "Label (lv_label)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:11
msgid "A Label is the Widget used to display text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:19
msgid ":cpp:enumerator:`LV_PART_MAIN` Uses the :ref:`typical background <typical bg props>` and text properties. Padding values can be used to add space between the text and the edges of the Label's background."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:22
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR` The scrollbar that is shown when the text is larger than the Widget's size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:24
msgid ":cpp:enumerator:`LV_PART_SELECTED` Tells the style of the :ref:`selected text <lv_label_text_selection>`. Only ``text_color`` and ``bg_color`` style properties can be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:35
msgid "Set text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:37
msgid "You can set the text on a Label at runtime with :cpp:expr:`lv_label_set_text(label, \"New text\")`. This will allocate a buffer dynamically, and the provided string will be copied into that buffer. Therefore, you don't need to keep the text you pass to :cpp:func:`lv_label_set_text` in scope after that function returns."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:43
msgid "With :cpp:expr:`lv_label_set_text_fmt(label, fmt, ...)` printf formatting can be used to set the text.  Example:  :cpp:expr:`lv_label_set_text_fmt(label, \"Value: %d\", 15)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:46
msgid "Labels are able to show text from a static character buffer as well.  To do so, use :cpp:expr:`lv_label_set_text_static(label, \"Text\")`.  In this case, the text is not stored in dynamic memory and the given buffer is used directly instead.  This means that the contents of the character buffer *must* remain valid for the life of the label or until another buffer is set via one of the above functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:52
msgid "``const`` strings are safe to use with :cpp:func:`lv_label_set_text_static` since they are stored in ROM memory, which is always accessible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:57
msgid "Do not use ``const`` strings with :cpp:func:`lv_label_set_text_static` when the Label is being used in :cpp:enumerator:`LV_LABEL_LONG_DOT` mode since the Label will attempt to do an in-place edit of the string.  This will cause an MCU exception by attempting to modify program memory (ROM)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:66
msgid "If your Label is updated with new strings rapidly (e.g. > 30X / second, such as RPM in a dashboard, or an ADC value), and the length of those strings changes frequently, it is advisable to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:70
msgid "allocate a static string buffer large enough contain the largest possible string,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:71
msgid "update that buffer with the new strings only when they will make a visible difference for the end user, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:73
msgid "update the Label with :cpp:expr:`lv_label_set_text_static(label, buffer)` using that buffer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:75
msgid "Reason:  if you use :cpp:expr:`lv_label_set_text(label, new_text)`, a memory realloc() will be forced every time the length of the string changes.  That MCU overhead can be avoided by doing the above."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:82
msgid "Newline"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:84
msgid "Newline characters are handled automatically by the Label Widget. You can use ``\\n`` to make a line break. For example: ``\"line1\\nline2\\n\\nline4\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:91
msgid "Long modes"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:93
msgid "By default, the width and height of the Label are set to :c:macro:`LV_SIZE_CONTENT`. Thus, the size of the Label is automatically expanded to the text size + padding + border width. Otherwise, if the width or height are explicitly set (using e.g.\\ :cpp:func:`lv_obj_set_width` or a layout), the lines wider than the Label's width can be manipulated according to several long mode policies. Similarly, the policies can be applied if the height of the text is greater than the height of the Label."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:101
msgid ":cpp:enumerator:`LV_LABEL_LONG_WRAP` Wrap lines that are too long. If the height is :c:macro:`LV_SIZE_CONTENT` the Label's height will be expanded, otherwise the text will be clipped. (Default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:103
msgid ":cpp:enumerator:`LV_LABEL_LONG_DOT` Replaces the last 3 characters from bottom right corner of the Label with dots (``.``)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:104
msgid ":cpp:enumerator:`LV_LABEL_LONG_SCROLL` If the text is wider than the label, scroll it horizontally back and forth. If it's higher, scroll vertically. Only one direction is scrolled and horizontal scrolling has higher precedence."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:106
msgid ":cpp:enumerator:`LV_LABEL_LONG_SCROLL_CIRCULAR` If the text is wider than the Label, scroll it horizontally continuously. If it's higher, scroll vertically. Only one direction is scrolled and horizontal scrolling has higher precedence."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:108
msgid ":cpp:enumerator:`LV_LABEL_LONG_CLIP` Simply clip the parts of the text outside the Label."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:110
msgid "You can specify the long mode with :cpp:expr:`lv_label_set_long_mode(label, LV_LABEL_LONG_...)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:112
msgid "Note that :cpp:enumerator:`LV_LABEL_LONG_DOT` manipulates the text buffer in-place in order to add/remove the dots. When :cpp:func:`lv_label_set_text` or :cpp:func:`lv_label_set_array_text` are used, a separate buffer is allocated and this implementation detail is unnoticed. This is not the case with :cpp:func:`lv_label_set_text_static`. The buffer you pass to :cpp:func:`lv_label_set_text_static` must be writable if you plan to use :cpp:enumerator:`LV_LABEL_LONG_DOT`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:123
msgid "Text recolor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:125
msgid "In the text, you can use commands to recolor parts of the text. For example: ``Write a #ff0000 red# word``. This feature can be enabled individually for each label by :cpp:expr:`lv_label_set_recolor(label, en)` function. In the context of word-wrapped text, any Recoloring started on a line will be terminated at the end of the line where the line is wrapped if it was not already terminated by an ending ``#`` in the text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:135
msgid "Text selection"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:137
msgid "If enabled by :c:macro:`LV_LABEL_TEXT_SELECTION` part of the text can be selected. It's similar to when you use your mouse on a PC to select text. The whole mechanism (click and select the text as you drag your finger/mouse) is implemented in :ref:`lv_textarea` and the Label Widget only allows programmatic text selection with :cpp:expr:`lv_label_get_text_selection_start(label, start_char_index)` and :cpp:expr:`lv_label_get_text_selection_end(label, end_char_index)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:148
msgid "Text alignment"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:150
msgid "To horizontally align the lines of a Label the `text_align` style property can be used with :cpp:func:`lv_obj_set_style_text_align` or :cpp:func:`lv_style_set_text_align`, passing one of the ``LV_TEXT_ALIGN_...`` enumeration values. Note that this has a visible effect only if:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:155
msgid "the Label Widget's width is larger than the width of the longest line of text, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:156
msgid "the text has multiple lines with different line lengths."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:161
#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:161
msgid "Very long text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:163
msgid "LVGL can efficiently handle very long (e.g. > 40k characters) Labels by saving some extra data (~12 bytes) to speed up drawing. To enable this feature, set ``LV_LABEL_LONG_TXT_HINT`` to ``1`` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:170
msgid "Custom scrolling animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:172
msgid "Some aspects of the scrolling animations in long modes :cpp:enumerator:`LV_LABEL_LONG_SCROLL` and :cpp:enumerator:`LV_LABEL_LONG_SCROLL_CIRCULAR` can be customized by setting the Label's animation style property, using :cpp:func:`lv_style_set_anim`. It will be treated as a template which will be used to create the scroll animations."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:181
msgid "Symbols"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:183
msgid "The Labels can display symbols alongside letters (or on their own). Read the :ref:`font` section to learn more about symbols."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:193
msgid "No special events are sent by Label Widgets.  By default, Label Widgets are created without the LV_OBJ_FLAG_CLICKABLE flag, but you can add it to make a Label Widget emit LV_EVENT_CLICKED events if desired."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:210
msgid "No *Keys* are processed by Label Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/label/index.rst:3
msgid "Line wrap, recoloring and scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/label/index.rst:9
msgid "Text shadow"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/label/index.rst:15
msgid "Show LTR, RTL and Chinese texts"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/label/index.rst:21
msgid "Draw label with gradient color"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/label/index.rst:27
msgid "Customize circular scrolling animation"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/label/index.rst:33
msgid "Monospace font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:235
msgid ":ref:`widgets/label/lv_label.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/label.rst:237
msgid ":ref:`widgets/label/lv_label_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:5
msgid "LED (lv_led)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:10
msgid "LEDs are rectangle-like (or circle) Widgets whose brightness can be adjusted. With lower brightness the color of the LED becomes darker."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:18
msgid ":cpp:enumerator:`LV_LED_PART_MAIN` uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:29
msgid "You can set the color of the LED with :cpp:expr:`lv_led_set_color(led, lv_color_hex(0xff0080))`. This will be used as its background color, border color, and shadow color."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:34
msgid "Brightness"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:36
msgid "You can set their brightness with :cpp:expr:`lv_led_set_brightness(led, brightness)`. The ``brightness`` value should be in the range 0 (darkest) to 255 (lightest)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:40
msgid "Toggle"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:42
msgid "Use :cpp:expr:`lv_led_on(led)` and :cpp:expr:`lv_led_off(led)` to set the brightness to a predefined ON or OFF value. The :cpp:expr:`lv_led_toggle(led)` toggles between the ON and OFF state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:46
msgid "You can set custom LED ON and OFF brightness values by defining macros ``LV_LED_BRIGHT_MAX`` and ``LV_LED_BRIGHT_MIN`` in your project.  Their default values are 80 and 255. These too must be in the range [0..255]."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:57
msgid "No special events are sent by LED Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:72
msgid "No *Keys* are processed by LED Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/led/index.rst:3
msgid "LED with custom style"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:95
msgid ":ref:`widgets/led/lv_led.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/led.rst:97
msgid ":ref:`widgets/led/lv_led_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:5
msgid "Line (lv_line)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:10
msgid "The Line Widget is capable of drawing straight lines between a set of points."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:18
msgid ":cpp:enumerator:`LV_PART_MAIN` uses the :ref:`typical background <typical bg props>` and line style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:27
msgid "Set points"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:29
msgid "A Line's points have to be stored in an :cpp:struct:`lv_point_precise_t` array and passed to the Widget by the :cpp:expr:`lv_line_set_points(lines, point_array, point_cnt)` function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:33
msgid "Their coordinates can either be specified as raw pixel coordinates (e.g. ``{5, 10}``), or as a percentage of the Line's bounding box using :cpp:expr:`lv_pct(x)`. In the latter case, the Line's width/height may need to be set explicitly using :cpp:func:`lv_obj_set_width` and :cpp:func:`lv_obj_set_height`, as percentage values do not automatically expand the bounding box."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:40
msgid "Auto-size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:42
msgid "By default, the Line's width and height are set to :c:macro:`LV_SIZE_CONTENT`. This means it will automatically set its size to fit all the points. If the size is set explicitly, parts on the Line may not be visible."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:47
msgid "Invert y"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:49
msgid "By default, the *y == 0* point is at the top of the Widget. It might be counterintuitive in some cases, so the y coordinates can be inverted with :cpp:expr:`lv_line_set_y_invert(line, true)`. In this case, *y == 0* will be at the bottom of the Widget. *y invert* is disabled by default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:61
msgid "Only :ref:`generic events <events>` are sent by Line Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:76
msgid "No *Keys* are processed by Line Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/line/index.rst:3
msgid "Simple Line"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:99
msgid ":ref:`widgets/line/lv_line.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/line.rst:101
msgid ":ref:`widgets/line/lv_line_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:5
msgid "List (lv_list)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:11
msgid "The List Widget is basically a rectangle with vertical layout to which Buttons and Text can be added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:20
msgid "**Background**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:22
msgid ":cpp:enumerator:`LV_PART_MAIN` The main part of the List that uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:24
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR` The scrollbar. See :ref:`base_widget` documentation for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:27
msgid "**Buttons and Text**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:29
msgid "See the :ref:`Button <lv_button>`'s and :ref:`Label <lv_label>`'s documentation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:38
msgid "Buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:40
msgid ":cpp:expr:`lv_list_add_button(list, icon, text)` adds a full-width button with an icon (that can be an image or symbol) and text.  This function returns a pointer to the button created, which you can use to, for example, add an event call-back."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:44
msgid "The text is scrolled horizontally if it is longer than the button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:49
msgid ":cpp:expr:`lv_list_add_text(list, text)` adds a text string.  This function returns a pointer to the label created, which you can use to, for example, change its text with one of the ``lv_label_set_text...()`` functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:60
msgid "No special events are sent by List Widgets, but events can be sent by Buttons as usual."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:75
msgid "No *Keys* are processed by List Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/list/index.rst:3
msgid "Simple List"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/list/index.rst:10
msgid "Sorting a List using up and down buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/list.rst:100
msgid ":ref:`widgets/list/lv_list.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:5
msgid "Lottie (lv_lottie)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:10
msgid "The Lottie Widget is capable of parsing, rasterizing, and playing `Lottie animations <https://lottiefiles.com>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:12
msgid "The Lottie animations are vector-based animations. Think of them as the modern combination of SVG and GIF."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:14
msgid "The animations can be downloaded from various sources, such as `https://lottiefiles.com/ <https://lottiefiles.com/>`__ or you can create your own animations using, for example, Adobe After Effects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:17
msgid "The Lottie Widget is based on :ref:`lv_canvas` because in order to render the animation the user needs to provide a buffer where the current animation frame is stored."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:25
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the Lottie animation. The typical background style properties apply but usually it is left transparent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:35
msgid "The Lottie Widget uses the `ThorVG <https://github.com/thorvg/thorvg>`__ library which is `integrated into LVGL <https://github.com/lvgl/lvgl/tree/master/src/libs/thorvg>`__. In order to use Lottie animations :c:macro:`LV_USE_THORVG_INTERNAL` (to use the built-in ThorVG) or :c:macro:`LV_USE_THORVG_EXTERNAL` (to link it externally) needs to be enabled in ``lv_conf.h``. For vector graphics in general :c:macro:`LV_USE_VECTOR_GRAPHIC` also needs to be enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:40
msgid "As ThorVG is written in C++, when using :c:macro:`LV_USE_THORVG_INTERNAL` be sure that you can compile the cpp files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:44
msgid "Set a buffer"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:46
msgid "In order to render the animation a buffer needs to be assigned to the Lottie Widget. The animations are rendered in ARGB8888 format, therefore the buffer's size should be equal to ``target_width x target_height x 4`` bytes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:50
msgid "To keep the buffer size and the animation size consistent, the size of the Widget (i.e. the size of the animation) is set to the dimensions of the buffer internally."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:53
msgid "The buffer can be set with either :cpp:expr:`lv_lottie_set_buffer(lottie, w, h, buf)` or :cpp:expr:`lv_lottie_set_draw_buf(lottie, draw_buf)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:56
msgid "When a draw buffer is used, it must be already initialized by the user with :cpp:enumerator:`LV_COLOR_FORMAT_ARGB8888_PREMULTIPLIED` color format."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:59
msgid "Set a source"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:61
msgid "``lv_example_lottie_approve.c`` contains an example animation. Instead of storing the JSON string, a hex array is stored for the following reasons:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:64
msgid "to avoid escaping ``\"`` character in the JSON file, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:65
msgid "some compilers don't support very long strings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:67
msgid "``lvgl/scripts/filetohex.py`` can be used to convert a Lottie file to a hex array. E.g.:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:74
msgid "``--filter-character`` filters out non-ASCII characters and ``--null-terminate`` makes sure that a trailing zero is appended to properly close the string."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:76
msgid "To create an animation from data use :cpp:expr:`lv_lottie_set_src_data(lottie, data, sizeof(data))`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:79
msgid "Lottie animations can be opened from JSON files by using :cpp:expr:`lv_lottie_set_src_file(lottie, \"path/to/file.json\")`. Note that the Lottie loader doesn't support LVGL's File System interface but a \"normal path\" should be used without a driver letter."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:83
msgid "Get the animation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:89
msgid "returns the LVGL animation which controls the Lottie animation. By default it is running infinitely at 60FPS however the LVGL animation can be freely adjusted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:100
msgid "No events are emitted by Lottie Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:115
msgid "No keys are processed by Lottie Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/lottie/index.rst:2
msgid "Load a Lottie animation from an array"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/lottie/index.rst:8
msgid "Load a Lottie animation from file"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:138
msgid ":ref:`widgets/lottie/lv_lottie.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/lottie.rst:140
msgid ":ref:`widgets/lottie/lv_lottie_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:5
msgid "Menu (lv_menu)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:11
msgid "The Menu Widget can be used to create multi-level menus that automatically handle navigation among menu levels, and enable its user to capture page navigation and click events."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:21
msgid "The Menu Widget is built from the following Widgets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:23
msgid "Main container: :cpp:type:`lv_menu_main_cont`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:24
msgid "Main header: :cpp:type:`lv_menu_main_header_cont`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:25
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:30
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:55
msgid "Back button: :ref:`lv_button`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:26
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:31
#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:57
msgid "Back button icon: :ref:`lv_image`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:27
msgid "Main Page: :cpp:type:`lv_menu_page`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:28
msgid "Sidebar container: :cpp:type:`lv_menu_sidebar_cont`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:29
msgid "Sidebar header: :cpp:type:`lv_menu_sidebar_header_cont`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:32
msgid "Sidebar Page: :cpp:type:`lv_menu_page`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:42
msgid "Create a Menu"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:44
msgid ":cpp:expr:`lv_menu_create(parent)` creates a new empty Menu."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:46
msgid "This creates a Menu Widget with this object hierarchy:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:48
msgid "Menu: :cpp:type:`lv_menu_t`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:50
msgid "Hidden Sub-Page Storage: :cpp:type:`lv_obj_t`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:51
msgid "Main container: :cpp:var:`lv_menu_main_cont_class`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:53
msgid "Main header: :cpp:var:`lv_menu_main_header_cont_class`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:59
msgid "Main header title: :ref:`lv_label` (default hidden)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:61
msgid "Note that no sidebar is created. You can create one later if you wish."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:65
msgid "Header mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:67
msgid "The following header modes exist:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:69
msgid ":cpp:enumerator:`LV_MENU_HEADER_TOP_FIXED` Header is positioned at the top.  (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:70
msgid ":cpp:enumerator:`LV_MENU_HEADER_TOP_UNFIXED` Header is positioned at the top and can be scrolled out of view."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:71
msgid ":cpp:enumerator:`LV_MENU_HEADER_BOTTOM_FIXED` Header is positioned at the bottom."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:73
msgid "You can set header modes with :cpp:expr:`lv_menu_set_mode_header(menu, LV_MENU_HEADER...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:76
msgid "Root back button mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:78
msgid "The following root back button modes exist:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:80
msgid ":cpp:enumerator:`LV_MENU_ROOT_BACK_BTN_DISABLED`  (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:81
msgid ":cpp:enumerator:`LV_MENU_ROOT_BACK_BTN_ENABLED`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:83
msgid "You can set root back button modes with :cpp:expr:`lv_menu_set_mode_root_back_button(menu, LV_MENU_ROOT_BACK_BTN...)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:87
msgid "Create a Menu Page"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:89
msgid ":cpp:expr:`lv_menu_page_create(menu, title)` creates a new empty Menu Page. You can add any Widgets to the Page."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:93
msgid "Set a Menu Page in the main area"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:95
msgid "Once a Menu Page has been created, you can set it to the main area with :cpp:expr:`lv_menu_set_page(menu, page)`. ``NULL`` to clear main and clear Menu history."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:100
msgid "Set a Menu Page in the sidebar"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:102
msgid "Once a Menu Page has been created, you can set it to the sidebar with :cpp:expr:`lv_menu_set_sidebar_page(menu, page)`. ``NULL`` to clear sidebar."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:106
msgid "Linking between Menu Pages"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:108
msgid "If you have, for instance, created a button obj in the main Page. When you click the button Widget, you want it to open up a new Page, use :cpp:expr:`lv_menu_set_load_page_event(menu, btn, new page)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:113
msgid "Create a Menu container, section, separator"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:115
msgid "The following objects can be created so that it is easier to style the Menu:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:118
msgid ":cpp:expr:`lv_menu_cont_create(parent_page)` creates a new empty container."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:119
msgid ":cpp:expr:`lv_menu_section_create(parent_page)` creates a new empty section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:120
msgid ":cpp:expr:`lv_menu_separator_create(parent_page)` creates a separator."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:129
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when a Page is shown."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:131
msgid ":cpp:expr:`lv_menu_get_cur_main_page(menu)` returns a pointer to Menu Page that is currently displayed in the main container."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:133
msgid ":cpp:expr:`lv_menu_get_cur_sidebar_page(menu)` returns a pointer to Menu Page that is currently displayed in the sidebar container."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:136
msgid ":cpp:enumerator:`LV_EVENT_CLICKED` Sent when a back button in a header from either main or sidebar is clicked. :cpp:enumerator:`LV_OBJ_FLAG_EVENT_BUBBLE` is enabled on the buttons so you can add events to the Menu itself."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:140
msgid ":cpp:expr:`lv_menu_back_button_is_root(menu, button)` to check if button is root back button."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:156
msgid "No *Keys* are processed by Menu Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/menu/index.rst:3
msgid "Simple Menu"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/menu/index.rst:9
msgid "Simple Menu with root btn"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/menu/index.rst:15
msgid "Simple Menu with custom header"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/menu/index.rst:21
msgid "Simple Menu with floating btn to add new menu page"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/menu/index.rst:27
msgid "Complex Menu"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:179
msgid ":ref:`widgets/menu/lv_menu.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/menu.rst:181
msgid ":ref:`widgets/menu/lv_menu_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:5
msgid "Message Box (lv_msgbox)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:11
msgid "Message boxes act as pop-ups. They are built from a content area with a helper to add text, an optional header (which can have a title, a close button, and other buttons), and an optional footer with buttons."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:16
msgid "The text will be broken into multiple lines, and the height will be set automatically. If the height is set programmatically, the content will become scrollable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:20
msgid "The message box can be modal (blocking clicks on the rest of the screen) or not modal."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:30
msgid "The message box is built from other Widgets, so you can check these Widgets' documentation for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:33
msgid "Content, header, and footer: :ref:`base_widget`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:34
msgid "Buttons: :ref:`lv_button`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:35
msgid "Title and content text: :ref:`lv_label`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:46
msgid "Create a message box"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:48
msgid ":cpp:expr:`lv_msgbox_create(parent)` creates a message box. If ``parent`` is ``NULL`` the message box will be modal, and will use the :ref:`default_display`'s Top :ref:`Layer <display_screen_layers>` as a parent."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:54
msgid "Adding buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:55
msgid "If you want to add an [OK] or [Cancel] or other buttons for the user to have a choice of responses, add each button using the :cpp:expr:`lv_msgbox_add_footer_button(msgbox, btn_text)` function.  Calling this function adds a footer (container) if one was not already present, and it returns a pointer to the button created, which can be used to add ``LV_EVENT_CLICKED`` (or other) events to detect and act on the user's response."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:62
msgid "Footer buttons so added are evenly spaced and centered."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:64
msgid "Buttons can also be added to the header if desired with :cpp:expr:`lv_msgbox_add_header_button(msgbox, symbol)`. Buttons so added are added to the right end of the header."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:70
#: ../../lvgl/docs/intermediate/details/widgets/win.rst:89
msgid "Getting the parts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:72
msgid "The building blocks of the message box can be obtained using the following functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:82
msgid "Functions that add something to the message box return a pointer to the newly added Widget:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:94
msgid "Close the message box"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:96
msgid ":cpp:expr:`lv_msgbox_close(msgbox)` closes (deletes) the message box."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:98
msgid ":cpp:expr:`lv_msgbox_close_async(msgbox)` closes (deletes) the message box asynchronously. This is useful if you want the message box to close the on the next call to ``lv_timer_handler`` instead of immediately."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:109
msgid "No special events are sent by Message Box Widgets. See these Widgets' documentation for details:  :ref:`lv_button` and :ref:`lv_label`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:125
msgid "No *Keys* are processed by Message Box Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/msgbox/index.rst:3
msgid "Simple Message box"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/msgbox/index.rst:9
msgid "Scrolling and styled Message box"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:148
msgid ":ref:`widgets/msgbox/lv_msgbox.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/msgbox.rst:150
msgid ":ref:`widgets/msgbox/lv_msgbox_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/new_widget.rst:5
msgid "New Widget"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:5
msgid "Roller (lv_roller)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:11
msgid "Roller allows the end user to select an item from a list by scrolling through it. The item in the middle is the selected item and normally stands out from the other items due to different styles applied to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:23
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the roller uses the :ref:`typical background <typical bg props>` and text style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:26
msgid "Style ``text_line_space`` adjusts the space between list items. Use :cpp:func:`lv_obj_set_style_text_line_space` to set this value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:29
msgid "When the Roller is scrolled and doesn't stop exactly on an item, it will automatically scroll to the nearest valid item in ``anim_time`` milliseconds as specified in the ``anim_duration`` style.  Use :cpp:func:`lv_obj_set_style_anim_duration` to set this value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:34
msgid ":cpp:enumerator:`LV_PART_SELECTED` The selected item (displayed in the  middle of the Roller).  Besides the typical background properties, it uses text style properties to change the appearance of the text of the selected item."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:46
msgid "Setting the list items"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:48
msgid "List items are passed to the Roller as a string with :cpp:expr:`lv_roller_set_options(roller, string_list, LV_ROLLER_MODE_NORMAL)`. The items should be separated by ``\\n``. For example: ``\"First\\nSecond\\nThird\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:53
msgid ":cpp:enumerator:`LV_ROLLER_MODE_INFINITE` makes the Roller circular."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:55
msgid "You can select an option programmatically with :cpp:expr:`lv_roller_set_selected(roller, id, LV_ANIM_ON)`, where *id* is the zero-based index of the list item to be selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:59
msgid "If you don't know the index of an option can also select an item with :cpp:expr:`lv_roller_set_selected_str(roller, str, LV_ANIM_ON)`, where *str* is the string equal to one of the list items."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:66
msgid "To get the *index* of the currently selected item use :cpp:expr:`lv_roller_get_selected(roller)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:68
msgid ":cpp:expr:`lv_roller_get_selected_str(roller, buf, buf_size)` will copy the name of the selected item to ``buf``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:71
msgid "Visible rows"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:73
msgid "The number of visible rows can be adjusted with :cpp:expr:`lv_roller_set_visible_row_count(roller, num)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:75
msgid "This function calculates the height with the current style. If the font, line space, border width, etc. of the Roller changes, this function needs to be called again."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:86
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when a new list item is selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:101
msgid "``LV_KEY_RIGHT/DOWN`` Select next option"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:102
msgid "``LV_KEY_LEFT/UP`` Select previous option"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:103
msgid ":cpp:enumerator:`LY_KEY_ENTER` Accept the selected option (sends :cpp:enumerator:`LV_EVENT_VALUE_CHANGED` event)"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/roller/index.rst:3
msgid "Simple Roller"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/roller/index.rst:9
msgid "Styling the roller"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/roller/index.rst:15
msgid "add fade mask to roller"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:132
msgid ":ref:`widgets/roller/lv_roller.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/roller.rst:134
msgid ":ref:`widgets/roller/lv_roller_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:5
msgid "Scale (lv_scale)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:11
msgid "Scale Widgets show linear or circular scales with configurable ranges, tick counts, placement, labeling, and subsections (:ref:`scale_sections`) with custom styling."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:21
msgid "The Scale Widget has the following three parts:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:23
msgid ":cpp:enumerator:`LV_PART_MAIN` Main line --- the blue line in example image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:24
msgid ":cpp:enumerator:`LV_PART_ITEMS` Minor ticks --- the red minor ticks in example image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:25
msgid ":cpp:enumerator:`LV_PART_INDICATOR` Major ticks and their labels (if enabled) --- the green major ticks and pink labels in example image."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:40
msgid "When a Scale Widget is created, it starts out in MODE :cpp:enumerator:`LV_SCALE_MODE_HORIZONTAL_BOTTOM`.  This makes the scale horizontal with tick marks below the line.  If you need it to have a different shape, orientation or tick position, use :cpp:expr:`lv_scale_set_mode(scale, mode)`, where ``mode`` can be any of these values:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:46
msgid ":cpp:enumerator:`LV_SCALE_MODE_HORIZONTAL_TOP`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:47
msgid ":cpp:enumerator:`LV_SCALE_MODE_HORIZONTAL_BOTTOM`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:48
msgid ":cpp:enumerator:`LV_SCALE_MODE_VERTICAL_LEFT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:49
msgid ":cpp:enumerator:`LV_SCALE_MODE_VERTICAL_RIGHT`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:50
msgid ":cpp:enumerator:`LV_SCALE_MODE_ROUND_INNER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:51
msgid ":cpp:enumerator:`LV_SCALE_MODE_ROUND_OUTER`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:55
msgid "Setting range"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:57
msgid "A Scale starts its life with a default numeric range of [0..100] and a default angular range of 270.  You can change these ranges with:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:60
msgid ":cpp:expr:`lv_scale_set_range(scale, min, max)`, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:61
msgid ":cpp:expr:`lv_scale_set_angle_range(scale, angle_range)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:63
msgid "where ``min`` and ``max`` will become the numeric low and high values for the Scale, and ``angle_range`` is the angle between the low and high ends of the Scale."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:68
msgid "Tick drawing order"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:70
msgid "Normally ticks and their labels are drawn first and the main line is drawn next, giving the ticks and their labels the appearance of being underneath the main line when there is overlap.  You can reverse this sequence if you wish, making the ticks and labels appear on top the main line, using :cpp:expr:`lv_scale_set_draw_ticks_on_top(scale, true)`.  (This effect can be reversed by passing ``false`` instead.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:77
msgid "Example with with ticks and labels drawn *under* the main line (default):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:81
msgid "Example with ticks and labels drawn *on top of* the main line:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:87
msgid "Configuring ticks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:89
msgid "You configure the major and minor ticks of a Scale by calling 2 functions:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:91
msgid ":cpp:expr:`lv_scale_set_total_tick_count(scale, total_tick_count)`, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:92
msgid ":cpp:expr:`lv_scale_set_major_tick_every(scale, nth_tick)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:94
msgid "If you want labels to be drawn with the major ticks, call :cpp:expr:`lv_scale_set_label_show(scale, true)`.  (Pass ``false`` to hide them again.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:97
msgid "By default, the labels shown are the numeric values of the scale at the major tick points.  Can you specify different label content by calling :cpp:expr:`lv_scale_set_text_src(scale, custom_labels)` where ``custom_labels`` is an array of string pointers.  Example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:106
msgid "Note that a ``NULL`` pointer is used to terminate the list."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:108
msgid "The content of the buffers pointed to need to remain valid for the life of the Scale."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:110
msgid "For a Scale in one of the ``..._ROUND_...`` modes, you can optionally get it to rotate the major-tick labels to match the rotation of the major ticks using :cpp:expr:`lv_obj_set_style_transform_rotation(scale, LV_SCALE_LABEL_ROTATE_MATCH_TICKS, LV_PART_INDICATOR)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:114
msgid "Alternately, labels can be rotated by a fixed amount (for any Scale mode).  This example rotates labels by 20 degrees: :cpp:expr:`lv_obj_set_style_transform_rotation(scale, 200, LV_PART_INDICATOR)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:118
msgid "Or both of the above can be done at the same time: :cpp:expr:`lv_obj_set_style_transform_rotation(scale, LV_SCALE_LABEL_ROTATE_MATCH_TICKS + 200, LV_PART_INDICATOR)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:121
msgid "Some labels of the Scale might be drawn upside down (to match the tick) if the Scale includes a certain angle range. If you don't want this, to automatically rotate the labels to keep them upright, an additional flag can be used. Labels that would be upside down are then rotated 180 :cpp:expr:`lv_obj_set_style_transform_rotation(scale, LV_SCALE_LABEL_ROTATE_MATCH_TICKS | LV_SCALE_LABEL_ROTATE_KEEP_UPRIGHT, LV_PART_INDICATOR)`. Labels can also be moved a fixed distance in X and Y pixels using :cpp:expr:`lv_obj_set_style_translate_x(scale, 10, LV_PART_INDICATOR)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:130
msgid "The major tick value is calculated with the :cpp:expr:`lv_map` API (when not setting custom labels), this calculation takes into consideration the total number of ticks and the Scale range, so the label drawn can present rounding errors when the calculated value is a floating-point value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:135
msgid "The length of the ticks can be configured with the length Style property on the :cpp:enumerator:`LV_PART_INDICATOR` for major ticks and :cpp:enumerator:`LV_PART_ITEMS` for minor ticks.  Example with local Style: :cpp:expr:`lv_obj_set_style_length(scale, 5, LV_PART_INDICATOR)` for major ticks and :cpp:expr:`lv_obj_set_style_length(scale, 5, LV_PART_ITEMS)` for minor ticks. The ticks can be padded in either direction (outwards or inwards) for ``..._ROUND_...`` Scales only with: :cpp:expr:`lv_obj_set_style_radial_offset(scale, 5, LV_PART_INDICATOR)` for major ticks and :cpp:expr:`lv_obj_set_style_radial_offset(scale, 5, LV_PART_ITEMS)` for minor. Using length and radial offset together allows total control of the tick position."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:145
msgid "It is also possible to offset the labels from the major ticks (either positive or negative) using :cpp:expr:`lv_obj_set_style_pad_radial(scale, 5, LV_PART_INDICATOR)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:152
msgid "Sections"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:154
msgid "Sections make it possible for portions of a Scale to *convey meaning* by using different Style properties to draw them (colors, line thicknesses, font, etc.)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:157
msgid "A Section represents a sub-range of the Scale, whose Styles (like Cascading Style Sheets) take precedence while drawing the PARTS (lines, arcs, ticks and labels) of the Scale that are within the range of that Section."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:161
msgid "If a PART of a Scale is within the range of 2 or more Sections (i.e. those Sections overlap), the Style's properties belonging to the most recently added Section takes precedence over the same style properties of other Section(s) that \"involve\" that PART."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:170
msgid "Creating Sections"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:172
msgid "A Section is created using :cpp:expr:`lv_scale_add_section(scale)`, which returns a pointer to a :cpp:type:`lv_scale_section_t` object.  This creates a Section with range [0..0] and no Styles added to it, which ensures that Section will not be drawn yet:  it needs both a range inside the Scale's range and at least one :ref:`Style <styles>` added to it before it will be used in drawing the Scale."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:178
msgid "Next, set the range using :cpp:expr:`lv_scale_section_set_range(section, min, max)` where ``min`` and ``max`` are the Section's boundary values that should normally be within the Scale's value range.  (If they are only partially within the Scale's range, the Scale will only use that portion of the Section that overlaps the Scale's range.  If a Section's range is not within the Scale's range at all, it will not be used in drawing.  That can be useful to temporarily \"disable\" a Section, e.g. :cpp:expr:`lv_scale_section_set_range(section, 0, -1)`.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:190
msgid "Styling Sections"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:192
msgid "You set a Section's Style properties by creating a :cpp:type:`lv_style_t` object for each \"section\" you want to appear different than the parent Scale.  Add style properties as is documented in :ref:`style_initialize`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:196
msgid "You attach each :cpp:type:`lv_style_t` object to each Section it will apply to using :cpp:expr:`lv_scale_section_set_style(section, PART, style_pointer)`, where:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:199
msgid "``style_pointer`` should point to the contents of a global or static variable (can be dynamically-allocated), since it needs to remain valid through the life of the Scale; and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:203
msgid "``PART`` indicates which single :ref:`PART <lv_scale_parts_and_styles>` of the parent Scale it will apply to, namely :cpp:enumerator:`LV_PART_MAIN`, :cpp:enumerator:`LV_PART_ITEMS` or :cpp:enumerator:`LV_PART_INDICATOR`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:207
msgid "Unlike adding normal styles to Widgets, you cannot combine PARTs by bit-wise OR-ing the PART values together to get the style to apply to more than one part.  However, you can do something like this to accomplish the same thing:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:219
msgid "to get that one Style object to apply to both major and minor ticks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:221
msgid ":cpp:type:`lv_style_t` objects can be shared among Sections and among PARTs, but unlike normal Styles added to a Widget, a Section can only have 1 style per PART. Thus, doing this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:230
msgid "replaces ``tick_style_1`` with ``tick_style_2`` for part :cpp:enumerator:`LV_PART_INDICATOR` rather than adding to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:235
msgid "Useful Style Properties for Sections"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:237
msgid "The Style properties that are used during Scale drawing (and are thus useful) are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:239
msgid "For main line *when it is a straight line* (:cpp:enumerator:`LV_PART_MAIN`):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_LINE_WIDTH"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:241
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:255
msgid ":cpp:func:`lv_style_set_line_width`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_LINE_COLOR"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:242
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:256
msgid ":cpp:func:`lv_style_set_line_color`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_LINE_OPA"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:243
#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:257
msgid ":cpp:func:`lv_style_set_line_opa`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:245
msgid "For main line *when it is an arc* (:cpp:enumerator:`LV_PART_MAIN`):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_ARC_WIDTH"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:247
msgid ":cpp:func:`lv_style_set_arc_width`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_ARC_COLOR"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:248
msgid ":cpp:func:`lv_style_set_arc_color`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_ARC_OPA"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:249
msgid ":cpp:func:`lv_style_set_arc_opa`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_ARC_ROUNDED"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:250
msgid ":cpp:func:`lv_style_set_arc_rounded`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_ARC_IMAGE_SRC"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:251
msgid ":cpp:func:`lv_style_set_arc_image_src`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:253
msgid "For tick lines (:cpp:enumerator:`LV_PART_ITEMS` and :cpp:enumerator:`LV_PART_INDICATOR`):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:259
msgid "For labels on major ticks (:cpp:enumerator:`LV_PART_INDICATOR`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_TEXT_COLOR"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:261
msgid ":cpp:func:`lv_style_set_text_color`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_TEXT_OPA"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:262
msgid ":cpp:func:`lv_style_set_text_opa`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_TEXT_LETTER_SPACE"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:263
msgid ":cpp:func:`lv_style_set_text_letter_space`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:0
msgid "LV_STYLE_TEXT_FONT"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:264
msgid ":cpp:func:`lv_style_set_text_font`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:273
msgid "No special events are sent by Scale Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:275
msgid "In :cpp:enumerator:`LV_EVENT_DRAW_TASK_ADDED` events, a major or minor line draw descriptor's members ``id1`` and ``id2`` will be the tick index and tick value, respectively. If the part is :cpp:enumerator:`LV_PART_INDICATOR`, it is a major tick. If the part is :cpp:enumerator:`LV_PART_ITEMS` it is a minor tick."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:294
msgid "No *Keys* are processed by Scale Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:2
msgid "A simple horizontal scale"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:8
msgid "An vertical scale with section and custom styling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:14
msgid "A simple round scale"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:20
msgid "A round scale with section and custom styling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:26
msgid "A scale with section and custom styling"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:32
msgid "A round scale with multiple needles, resembling a clock"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:38
msgid "Customizing scale major tick label color with `LV_EVENT_DRAW_TASK_ADDED` event"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:44
msgid "A round scale with labels rotated and translated"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:50
msgid "A horizontal scale with labels rotated and translated"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:56
msgid "A round scale style simulating a Heart Rate monitor"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:62
msgid "A round scale style simulating a sunset/sunrise widget"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:68
msgid "A round scale style simulating a compass"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/scale/index.rst:74
msgid "Axis ticks and labels with scrolling on a chart"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:316
msgid ":ref:`lv_scale` .. Autogenerated"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:319
msgid ":ref:`widgets/scale/lv_scale.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/scale.rst:321
msgid ":ref:`widgets/scale/lv_scale_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:5
msgid "Slider (lv_slider)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:12
msgid "The Slider Widget looks like a :ref:`lv_bar` supplemented with a knob. The knob can be dragged to set the Slider's value. Like Bar, a Slider can be vertical or horizontal."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:23
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the Slider. Uses the :ref:`typical background style properties <typical bg props>`. ``padding`` makes the indicator smaller in the respective direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:26
msgid ":cpp:enumerator:`LV_PART_INDICATOR` The indicator that shows the current state of the Slider; also uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:28
msgid ":cpp:enumerator:`LV_PART_KNOB` A rectangle (or circle) drawn at the current value; also uses the :ref:`typical background style properties <typical bg props>` to describe the knob(s).  By default, the knob is round (radius-style can modify this) with side length equal to the smaller dimension of the Slider.  The knob can be made larger with the ``padding`` values.  Padding values can be asymmetric as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:42
msgid "Value, range and orientation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:44
msgid "Once a Slider is created, it has:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:46
msgid "value == 0"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:47
msgid "default range of [0..100],"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:48
msgid "horizontal orientation, with"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:49
msgid "default width of approximately 2 inches (according to configured value of :c:macro:`LV_DPI_DEF`),"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:50
msgid "default height of approximately 1/10 inch (according to configured value of :c:macro:`LV_DPI_DEF`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:52
msgid "To set different values use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:54
msgid ":cpp:expr:`lv_slider_set_value(slider, new_value, LV_ANIM_ON/OFF)` (animation time is set by the styles' ``anim_time`` property);"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:56
msgid ":cpp:expr:`lv_slider_set_range(slider, min , max)`; and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:57
msgid "for orientation, width and height, simply set width and height properties;"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:58
msgid ":cpp:expr:`lv_slider_set_orientation(slider, orientation)` to override orientation caused by ``width`` and ``height``.  Valid values for ``orientation`` are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:61
msgid ":cpp:enumerator:`LV_SLIDER_ORIENTATION_AUTO`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:62
msgid ":cpp:enumerator:`LV_SLIDER_ORIENTATION_HORIZONTAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:63
msgid ":cpp:enumerator:`LV_SLIDER_ORIENTATION_VERTICAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:65
msgid "The default drawing direction is from left to right in horizontal orientation and bottom to top in vertical orientation.  If the minimum value is set to be greater than the maximum value (e.g. [100..0]), the drawing direction is reversed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:72
msgid "The Slider can be in one of the following modes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:74
msgid ":cpp:enumerator:`LV_SLIDER_MODE_NORMAL` A normal Slider as described above (default)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:75
msgid ":cpp:enumerator:`LV_SLIDER_SYMMETRICAL` Draw the indicator from the zero value to current value. Requires negative minimum range and positive maximum range."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:77
msgid ":cpp:enumerator:`LV_SLIDER_RANGE` Allows setting the start value as well by :cpp:expr:`lv_bar_set_start_value(slider, new_value, LV_ANIM_ON/OFF)`. The start value must always be smaller than the end value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:81
msgid "The mode can be changed with :cpp:expr:`lv_slider_set_mode(slider, LV_SLIDER_MODE_...)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:84
msgid "Knob-only mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:86
msgid "Normally, the Slider can be adjusted either by dragging the knob, or by clicking on the Slider bar. In the latter case the knob moves to the point clicked and the Slider value changes accordingly. In some cases it is desirable to set the Slider to react on dragging the knob only. This feature is enabled by adding the :cpp:enumerator:`LV_OBJ_FLAG_ADV_HITTEST` flag: :cpp:expr:`lv_obj_add_flag(slider, LV_OBJ_FLAG_ADV_HITTEST)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:93
msgid "Any extended click area (set by :cpp:expr:`lv_obj_set_ext_click_area(slider, value)`) increases the knob's click area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:103
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent while the Slider is being dragged or changed with keys. The event is sent continuously while the Slider is being dragged."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:106
msgid ":cpp:enumerator:`LV_EVENT_RELEASED` Sent once when Slider is released."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:110
msgid ":ref:`Bar Events <lv_bar_events>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:123
msgid "``LV_KEY_UP/RIGHT`` Increment Slider's value by 1."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:124
msgid "``LV_KEY_DOWN/LEFT`` Decrement Slider's value by 1."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/slider/index.rst:3
msgid "Simple Slider"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/slider/index.rst:9
msgid "Slider with custom style"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/slider/index.rst:15
msgid "Slider with extended drawer"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/slider/index.rst:21
msgid "Slider with opposite direction"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:153
msgid ":ref:`widgets/slider/lv_slider.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/slider.rst:155
msgid ":ref:`widgets/slider/lv_slider_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:5
msgid "Spangroup (lv_spangroup)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:11
msgid "The Spangroup Widget is used to display rich text.  Different from the Label Widget, Spangroups can render text styled with different fonts, colors, and sizes into the Spangroup Widget. See example below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:16
msgid "A Spangroup contains 0 or more Span Descriptors (\"Spans\").  Each Span contains its own text and style properties for that text.  You add 1 Span (as a child) to the Spangroup for each \"span\" of uniquely-styled text needed.  Each Span so added is appended to the end of the list.  The list sequence determines the order in which the Spans are displayed.  Spans can be added to, and removed from, the Spangroup throughout its life.  The number of Spans that can be added is limited only by available RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:31
msgid ":cpp:enumerator:`LV_PART_MAIN` Spangroup has only one part."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:41
msgid "Set text and style"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:43
msgid "Add each needed Span to a Spangroup like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:49
msgid "After a Span is created, use the following functions to set its text and style properties:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:52
msgid ":cpp:expr:`lv_span_set_text(span, \"text\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:53
msgid ":cpp:expr:`lv_style_set_<property_name>(&span->style, value)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:55
msgid "Example of the latter:  :cpp:expr:`lv_style_set_text_color(&span->style, lv_palette_main(LV_PALETTE_RED))`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:57
msgid "If the Spangroup Widget's ``mode != LV_SPAN_MODE_FIXED`` call :cpp:expr:`lv_spangroup_refr_mode(spangroup)` after you have modifying any of its Spans to ensure it is redrawn appropriately."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:63
msgid "Retrieving a Span child"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:65
msgid "Spangroups store their children differently from normal Widgets, so normal functions for getting children won't work."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:68
msgid ":cpp:expr:`lv_spangroup_get_child(spangroup, id)` will return a pointer to the child Span at index ``id``. In addition, ``id`` can be negative to index from the end of the Spangroup where ``-1`` is the youngest child, ``-2`` is second youngest, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:73
msgid "E.g. ``lv_span_t * span = lv_spangroup_get_child(spangroup, 0)`` will return the first child of the Spangroup. ``lv_span_t * span = lv_spangroup_get_child(spangroup, -1)`` will return the last (or most recent) child."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:80
msgid "Child count"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:82
msgid "Use :cpp:expr:`lv_spangroup_get_span_count(spangroup)` to get the number of contained Spans."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:85
msgid "E.g. ``uint32_t size = lv_spangroup_get_span_count(spangroup)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:89
msgid "Removing a Span"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:90
msgid "You can remove a Span at any time during the Spangroup's life using the function :cpp:expr:`lv_spangroup_delete_span(spangroup, span)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:95
msgid "Text align"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:97
msgid "Like the Label Widget, a Spangroup can be set to one the following text-alignment modes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:99
msgid ":cpp:enumerator:`LV_TEXT_ALIGN_LEFT` Align text to left."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:100
msgid ":cpp:enumerator:`LV_TEXT_ALIGN_CENTER` Center text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:101
msgid ":cpp:enumerator:`LV_TEXT_ALIGN_RIGHT` Align text to right edge."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:102
msgid ":cpp:enumerator:`LV_TEXT_ALIGN_AUTO` Align auto."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:104
msgid "Use function :cpp:expr:`lv_spangroup_set_align(spangroup, LV_TEXT_ALIGN_...)` to set text alignment."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:111
msgid "A Spangroup can be set to one the following modes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:113
msgid ":cpp:enumerator:`LV_SPAN_MODE_FIXED` Fixes its size."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:114
msgid ":cpp:enumerator:`LV_SPAN_MODE_EXPAND` Expand size to text size but stay on one line."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:115
msgid ":cpp:enumerator:`LV_SPAN_MODE_BREAK` Keep width; break lines that are too long and auto-expand height."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:117
msgid "Use :cpp:expr:`lv_spangroup_set_mode(spangroup, LV_SPAN_MODE_BREAK)` to set its mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:121
msgid "Overflow"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:123
msgid "A Spangroup can be set to handle text overflow in one of the following ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:125
msgid ":cpp:enumerator:`LV_SPAN_OVERFLOW_CLIP` truncates text at the limit of the area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:126
msgid ":cpp:enumerator:`LV_SPAN_OVERFLOW_ELLIPSIS` display an ellipsis (``...``) when text overflows the area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:128
msgid "Use :cpp:expr:`lv_spangroup_set_overflow(spangroup, LV_SPAN_OVERFLOW_CLIP)` to set the Spangroup's overflow mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:133
msgid "First line indent"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:135
msgid "Use :cpp:expr:`lv_spangroup_set_indent(spangroup, 20)` to set the indent of the first line. All modes support pixel units. In addition, :cpp:enumerator:`LV_SPAN_MODE_FIXED` and :cpp:enumerator:`LV_SPAN_MODE_BREAK` modes support :ref:`percentage units <coord_units>`. as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:142
msgid "Lines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:144
msgid "Use :cpp:expr:`lv_spangroup_set_max_lines(spangroup, 10)` to set the maximum number of lines to be displayed in :cpp:enumerator:`LV_SPAN_MODE_BREAK` mode. A negative value indicates no limit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:155
msgid "No special events are sent by Span Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:170
msgid "No *Keys* are processed by Span Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/span/index.rst:3
msgid "Span with custom styles"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:195
msgid ":ref:`widgets/span/lv_span.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spangroup.rst:197
msgid ":ref:`widgets/span/lv_span_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:5
msgid "Spinbox (lv_spinbox)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:11
msgid "Spinbox contains an integer displayed as a decimal number with a possible fixed decimal point position and a configurable number of digits.  The value can be increased or decreased by *Keys* or API functions.  Under the hood Spinbox is a :ref:`lv_textarea` with behaviors extended to enable a numeric value to be viewed and modified with configurable constraints."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:24
msgid "Spinbox's parts are identical to those of :ref:`Text Area <lv_textarea_parts_and_styles>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:27
msgid "Value, range and step"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:29
msgid ":cpp:expr:`lv_spinbox_set_value(spinbox, 1234)` sets a new value for the Spinbox."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:30
msgid ":cpp:expr:`lv_spinbox_increment(spinbox)` and :cpp:expr:`lv_spinbox_decrement(spinbox)` increments/decrements the value of the Spinbox according to the currently-selected digit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:32
msgid ":cpp:expr:`lv_spinbox_set_range(spinbox, -1000, 2500)` sets its range. If the value is changed by :cpp:expr:`lv_spinbox_set_value(spinbox)`, by *Keys*, by :cpp:expr:`lv_spinbox_increment(spinbox)` or :cpp:expr:`lv_spinbox_decrement(spinbox)` this range will be respected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:36
msgid ":cpp:expr:`lv_spinbox_set_step(spinbox, 100)` sets which digit to change on increment/decrement. Only multiples of ten can be set."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:38
msgid ":cpp:expr:`lv_spinbox_set_cursor_pos(spinbox, 1)` sets the cursor to a specific digit to change on increment/decrement. Position '0' sets the cursor to the least significant digit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:42
msgid "If an encoder is used as input device, the selected digit is shifted to the right by default whenever the encoder button is clicked. To change this behavior to shifting to the left, the :cpp:expr:`lv_spinbox_set_digit_step_direction(spinbox, LV_DIR_LEFT)` can be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:47
msgid "Format"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:49
msgid ":cpp:expr:`lv_spinbox_set_digit_format(spinbox, digit_count, separator_position)` sets the number format. ``digit_count`` is the total number of digits to display. ``separator_position`` is the number of leading digits before the decimal point. Pass 0 for ``separator_position`` to display no decimal point."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:55
msgid "Rollover"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:57
msgid ":cpp:expr:`lv_spinbox_set_rollover(spinbox, true/false)` enables/disables rollover mode. If either the minimum or maximum value is reached with rollover enabled, and the user attempts to continue changing the value in the same direction, the value will change to the other limit.  If rollover is disabled the value will stop at the minimum or maximum value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:70
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when value has changed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:74
msgid ":ref:`Textarea Events <lv_textarea_events>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:87
msgid "``LV_KEY_LEFT/RIGHT`` With *Keypad* move the cursor left/right. With *Encoder* decrement/increment the selected digit."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:89
msgid "``LV_KEY_UP/DOWN`` With *Keypad* and *Encoder* increment/decrement the value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:91
msgid ":cpp:enumerator:`LV_KEY_ENTER` With *Encoder*, move focus to next digit.  If focus is on last digit, focus moves to first digit."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/spinbox/index.rst:3
msgid "Simple Spinbox"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:115
msgid ":ref:`widgets/spinbox/lv_spinbox.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinbox.rst:117
msgid ":ref:`widgets/spinbox/lv_spinbox_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:5
msgid "Spinner (lv_spinner)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:11
msgid "The Spinner Widget is a spinning arc over a ring, typically used to show some type of activity is in progress."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:21
msgid "Spinner's parts are identical to those of :ref:`Arc <lv_arc_parts_and_styles>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:31
msgid "Create a spinner"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:33
msgid "To create a spinner use :cpp:expr:`lv_spinner_create(parent)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:36
msgid "Use :cpp:expr:`lv_spinner_set_anim_params(spinner, spin_duration, angle)` to customize the duration of one revolution and the length of the arc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:46
msgid "No special events are sent by Spinner Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:50
msgid ":ref:`Arc Events <lv_arc_events>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:63
msgid "No *Keys* are processed by Spinner Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/spinner/index.rst:3
msgid "Simple spinner"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/spinner.rst:86
msgid ":ref:`widgets/spinner/lv_spinner.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:5
msgid "Switch (lv_switch)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:11
msgid "Switch Widgets look like little sliders and are used to display, and optionally modify, a value that can be \"on\" or \"off\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:14
msgid "By default, a Switch is oriented horizontally. Its orientation will be vertical if you set ``width`` < ``height``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:24
msgid ":cpp:enumerator:`LV_PART_MAIN` Switch's background; uses the :ref:`typical background style properties <typical bg props>`. ``padding`` makes the indicator smaller in the respective direction."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:27
msgid ":cpp:enumerator:`LV_PART_INDICATOR` The indicator that shows the current state of the Switch; also uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:29
msgid ":cpp:enumerator:`LV_PART_KNOB` A rectangle (or circle) drawn at the left or right side of the indicator; also uses the :ref:`typical background style properties <typical bg props>` to modify the knob's appearance. By default, the knob is round (radius-style can modify this) with diameter slightly smaller than the smaller side of the slider.  The knob can be made larger with the ``padding`` values. Padding values can be asymmetric as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:44
msgid "Change state"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:46
msgid "The Switch uses the standard :cpp:enumerator:`LV_STATE_CHECKED` state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:48
msgid "To get the current state of the Switch (with ``true`` being ON), use :cpp:expr:`lv_obj_has_state(widget, LV_STATE_CHECKED)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:51
msgid "Call :cpp:expr:`lv_obj_add_state(widget, LV_STATE_CHECKED)` to turn it on, or :cpp:expr:`lv_obj_remove_state(widget, LV_STATE_CHECKED)` to turn it off programmatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:56
msgid "Change orientation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:58
msgid "With a Switch is created, its default orientation is :cpp:enumerator:`LV_SWITCH_ORIENTATION_AUTO`, which causes it to be oriented based on ``width`` and ``height``.  You can change this behavior using :cpp:expr:`lv_switch_set_orientation(widget, orientation)`.  Possible values for ``orientation`` are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:64
msgid ":cpp:enumerator:`LV_SWITCH_ORIENTATION_AUTO`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:65
msgid ":cpp:enumerator:`LV_SWITCH_ORIENTATION_HORIZONTAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:66
msgid ":cpp:enumerator:`LV_SWITCH_ORIENTATION_VERTICAL`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:75
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when Switch changes state."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:90
msgid "``LV_KEY_UP/RIGHT`` Turns Switch ON"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:91
msgid "``LV_KEY_DOWN/LEFT`` Turns Switch OFF"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:92
msgid ":cpp:enumerator:`LV_KEY_ENTER` Toggles the Switch"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/switch/index.rst:3
msgid "Simple Switch"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/switch/index.rst:10
msgid "Switch Orientation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:115
msgid ":ref:`widgets/switch/lv_switch.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/switch.rst:117
msgid ":ref:`widgets/switch/lv_switch_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:5
msgid "Table (lv_table)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:11
msgid "Tables are built from rows, columns, and cells containing text."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:13
msgid "The Table Widget is very lightweight because only the text strings are stored. No real Widgets are created for cells --- they are just drawn on the fly."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:16
msgid "The Table is added to the default group (if one is set). Table is an editable Widget, allowing selection of a cell with encoder and keyboard navigation as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:27
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the Table; uses the :ref:`typical background style properties <typical bg props>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:29
msgid ":cpp:enumerator:`LV_PART_ITEMS` The cells of the Table also use the :ref:`typical background style properties <typical bg props>` as well as text style properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:41
msgid "Set cell value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:43
msgid "Cells can store only text so numbers need to be converted to text before displaying them in a Table."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:46
msgid ":cpp:expr:`lv_table_set_cell_value(table, row, col, \"Content\")`. The text is saved by the Table so the buffer containing the string can be a local variable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:49
msgid "Line breaks can be used in the text like ``\"Value\\n60.3\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:51
msgid "New rows and columns are automatically added as required."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:54
msgid "Rows and Columns"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:56
msgid "To explicitly set number of rows and columns use :cpp:expr:`lv_table_set_row_count(table, row_cnt)` and :cpp:expr:`lv_table_set_column_count(table, col_cnt)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:61
msgid "Width and Height"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:63
msgid "Column width can be set with :cpp:expr:`lv_table_set_column_width(table, col_id, width)`. The overall width of the Table Widget will be set to the sum of all column widths."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:67
msgid "Height is calculated automatically from the cell styles (font, padding etc) and the number of rows."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:71
msgid "Merge cells"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:73
msgid "Cells can be merged horizontally with :cpp:expr:`lv_table_set_cell_ctrl(table, row, col, LV_TABLE_CELL_CTRL_MERGE_RIGHT)`. To merge more adjacent cells, call this function for each cell."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:80
msgid "If a Table's width or height is set to :c:macro:`LV_SIZE_CONTENT` that size will be used to show the whole Table in the respective direction. E.g. :cpp:expr:`lv_obj_set_size(table, LV_SIZE_CONTENT, LV_SIZE_CONTENT)` automatically sets the Table size to show all columns and rows."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:85
msgid "If the width or height is set to a smaller number than its \"intrinsic\" size then the Table becomes scrollable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:95
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when a new cell is selected with keys."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:111
msgid "The following *Keys* are processed by Table Widgets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:113
msgid "``LV_KEY_RIGHT/LEFT/UP/DOWN/`` Select a cell."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:118
msgid ":cpp:expr:`lv_table_get_selected_cell(table, &row, &col)` can be used to get the currently selected cell. Row and column will be set to :c:macro:`LV_TABLE_CELL_NONE` if no cell is selected."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/table/index.rst:4
msgid "Simple table"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/table/index.rst:10
msgid "Lightweighted list from table"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:138
msgid "No examples yet."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:150
msgid ":ref:`widgets/table/lv_table.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/table.rst:152
msgid ":ref:`widgets/table/lv_table_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:5
msgid "Tab View (lv_tabview)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:11
msgid "The Tab View Widget can be used to organize content in tabs. The Tab View is built from other Widgets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:14
msgid "Main container: :ref:`base_widget`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:15
msgid "Tab buttons: an :ref:`base_widget` with :ref:`lv_button`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:16
msgid "Container for the tabs: :ref:`base_widget`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:17
msgid "Content of the tabs: :ref:`base_widget`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:19
msgid "The tab buttons can be positioned on the top, bottom, left, and right side of the Tab View."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:22
msgid "A new tab can be selected either by clicking on a tab button or by sliding horizontally on the content."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:33
msgid "There are no special parts on the Tab View but the :ref:`base_widget` and :ref:`lv_button` Widgets are used to create the Tab View."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:44
msgid "Creating a Tab View"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:46
msgid ":cpp:expr:`lv_tabview_create(parent)` creates a new empty Tab View."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:49
msgid "Adding tabs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:51
msgid "New tabs can be added with :cpp:expr:`lv_tabview_add_tab(tabview, \"Tab name\")`. This will return a pointer to a :ref:`base_widget` where the tab's content can be created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:56
msgid "Renaming tabs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:58
msgid "A tab can be renamed with :cpp:expr:`lv_tabview_rename_tab(tabview, tab_id, \"New Name\")`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:62
msgid "Navigating to a new tab"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:64
msgid "To select a new tab you can:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:66
msgid "Click on its tab button"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:67
msgid "Slide horizontally"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:68
msgid "Use :cpp:expr:`lv_tabview_set_active(tabview, tab_id, LV_ANIM_ON / OFF)` function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:72
msgid "Setting tab bar position"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:74
msgid "Using the :cpp:expr:`lv_tabview_set_tab_bar_position(tabview, LV_DIR_LEFT/RIGHT/TOP/BOTTOM)` the tab bar can be moved to any side."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:78
msgid "Setting tab bar size"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:80
msgid "The size of the tab bar can be adjusted by :cpp:expr:`lv_tabview_set_tab_bar_size(tabview, size)` When tabs are on the top or bottom, this means the height of the tab bar, and when they are on the sides, it means the width."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:85
msgid "Accessing the parts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:87
msgid ":cpp:expr:`lv_tabview_get_content(tabview)` returns a pointer to the container for tabs content (a :ref:`base_widget`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:89
msgid ":cpp:expr:`lv_tabview_get_tab_bar(tabview)` returns a pointer to the container for tab buttons (a :ref:`base_widget`)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:99
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when a new tab is selected by sliding or clicking the tab button. :cpp:expr:`lv_tabview_get_tab_active(tabview)` returns the zero based index of the current tab."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:116
msgid "Keys have effect only on the tab buttons. Programmatically add these buttons to a group if required."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/tabview/index.rst:3
msgid "Simple Tabview"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/tabview/index.rst:9
msgid "Tabs on the left, styling and no scrolling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:142
msgid ":ref:`widgets/tabview/lv_tabview.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tabview.rst:144
msgid ":ref:`widgets/tabview/lv_tabview_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:5
msgid "Text Area (lv_textarea)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:11
msgid "The Text Area is a :ref:`base_widget` with a :ref:`lv_label` and a cursor on it.  Text or characters can be added to it.  Long lines are wrapped and when the text becomes long enough, the Text Area can be scrolled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:15
msgid "One-line mode and password modes are supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:24
msgid ":cpp:enumerator:`LV_PART_MAIN` The background of the Text Area; uses the :ref:`typical background style properties <typical bg props>` and the text related style properties including ``text_align`` to align the text to the left, right or center."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:28
msgid ":cpp:enumerator:`LV_PART_SCROLLBAR` The scrollbar that is shown when the text is longer than its height."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:30
msgid ":cpp:enumerator:`LV_PART_SELECTED` Determines the style of the :ref:`selected text <lv_label_text_selection>`. Only ``text_color`` and ``bg_color`` style properties can be used. ``bg_color`` should be set directly on the label of the Text Area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:34
msgid ":cpp:enumerator:`LV_PART_CURSOR` Marks the position where the characters are inserted. The cursor's area is always the bounding box of the current character. A block cursor can be created by adding a background color and background opacity to :cpp:enumerator:`LV_PART_CURSOR`\\ 's style. To create a \"bar\" cursor leave the cursor transparent and set a left border. The ``anim_time`` style property sets the cursor's blink time."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:40
msgid ":cpp:enumerator:`LV_PART_TEXTAREA_PLACEHOLDER` Unique to Text Area; allows styling the :ref:`placeholder text <textarea_placeholder_text>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:51
msgid "Adding text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:53
msgid "You can insert text or characters to the current cursor's position with:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:55
msgid ":cpp:expr:`lv_textarea_add_char(textarea, 'c')`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:56
msgid ":cpp:expr:`lv_textarea_add_text(textarea, \"insert this text\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:58
msgid "To add wide characters like ``'á'``, ``'ß'`` or CJK characters, use :cpp:expr:`lv_textarea_add_text(textarea, \"á\")`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:61
msgid ":cpp:expr:`lv_textarea_set_text(textarea, \"New text\")` replaces all existing text with \"New text\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:67
msgid "Placeholder text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:69
msgid "Placeholder text is text that is displayed when the Text Area is empty.  This can be a handy way to provide the end user with a hint about what to type there."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:72
msgid "Specify placeholder text using :cpp:expr:`lv_textarea_set_placeholder_text(textarea, \"Placeholder text\")`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:76
msgid "Delete character"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:78
msgid "To delete the character to the left of the current cursor position, use :cpp:expr:`lv_textarea_delete_char(textarea)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:81
msgid "To delete to the right, use :cpp:expr:`lv_textarea_delete_char_forward(textarea)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:84
msgid "Moving the cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:86
msgid "The cursor position can be modified programmatically using :cpp:expr:`lv_textarea_set_cursor_pos(textarea, cursor_pos)` where ``cursor_pos`` is the zero-based index of the character the cursor should be placed in front of. :cpp:enumerator:`LV_TEXTAREA_CURSOR_LAST` can be passed to mean \"after the last character\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:92
msgid "You can move the cursor one character-position (or line) at a time with"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:94
msgid ":cpp:expr:`lv_textarea_cursor_right(textarea)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:95
msgid ":cpp:expr:`lv_textarea_cursor_left(textarea)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:96
msgid ":cpp:expr:`lv_textarea_cursor_up(textarea)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:97
msgid ":cpp:expr:`lv_textarea_cursor_down(textarea)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:99
msgid "If :cpp:expr:`lv_textarea_set_cursor_click_pos(textarea, true)` is applied, the cursor will jump to the position where the Text Area was clicked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:103
msgid "Hiding the cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:105
msgid "The cursor is normally always visible. It can be a good idea to style it to be visible only in :cpp:enumerator:`LV_STATE_FOCUSED` state. See :ref:`styles` for more information about how to do this."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:110
msgid "One-line mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:112
msgid "The Text Area can be configured to keep all text on a single line with :cpp:expr:`lv_textarea_set_one_line(textarea, true)`. In this mode:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:115
msgid "the height is set automatically to show only one line,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:116
msgid "line break characters are ignored, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:117
msgid "word wrap is disabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:120
msgid "Password mode"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:122
msgid "The Text Area supports password mode which can be enabled with :cpp:expr:`lv_textarea_set_password_mode(textarea, true)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:125
msgid "By default, if the ``•`` (`Bullet, U+2022 <http://www.fileformat.info/info/unicode/char/2022/index.htm>`__) character exists in the font, the entered characters are converted to it after a configurable delay after each new character is entered. If ``•`` does not exist in the font, ``*`` will be used. You can override the default \"masking\" character with :cpp:expr:`lv_textarea_set_password_bullet(textarea, str)` where ``str`` is a NUL-terminated C string.  Example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:137
msgid "In password mode :cpp:expr:`lv_textarea_get_text(textarea)` returns the actual text entered, not the bullet characters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:140
msgid "The visibility time can be adjusted with :c:macro:`LV_TEXTAREA_DEF_PWD_SHOW_TIME` in ``lv_conf.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:143
msgid "Accepted characters"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:145
msgid "You can set a list of accepted characters with :cpp:expr:`lv_textarea_set_accepted_chars(textarea, list)` where ``list`` is a pointer to a NUL-terminated string, or NULL to accept all characters.  Characters entered not in this list will be ignored."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:155
msgid "Max text length"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:157
msgid "The maximum number of characters can be limited using :cpp:expr:`lv_textarea_set_max_length(textarea, max_char_num)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:163
msgid "If the text in the Text Area is very long (e.g. > 20k characters), scrolling and drawing might be slow.  However, by setting :c:macro:`LV_LABEL_LONG_TXT_HINT` in ``lv_conf.h`` to a non-zero value, the performance with long text is significantly improved.  It does this by saving some additional information about the current vertical position of the text shown.  With this mode configured, scrolling and drawing is as fast as with \"normal\" short text.  The cost is 12 extra bytes per label in RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:170
msgid "This value is set to ``1`` by default.  If you do not use long text, you can save 12 bytes per label by setting it to ``0``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:174
msgid "Selecting text"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:176
msgid "If :c:macro:`LV_LABEL_TEXT_SELECTION` is set to a non-zero value in ``lv_conf.h``, some additional functionality (and 8 bytes per label) are added to Label Widgets and Text Area Widgets, and text-selection functionality is automated in Text Area Widgets.  (If you do not use selected text in your application, you can save 8 bytes per label in RAM by setting that macro to equate to ``0``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:182
msgid "Any part of the text can be selected if enabled with :cpp:expr:`lv_textarea_set_text_selection(textarea, true)`.  This works much like when you select text on your PC by clicking and dragging with your mouse or other pointer input device.  If you pass ``false`` to this function to disable text selection, any text selected time of the call will be de-selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:188
msgid "Shift+click and keyboard-only text selection with Shift+Arrow keys is expected to be added in the future."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:191
msgid "If you need to programmatically deal with selected text, in addition to the :cpp:expr:`lv_textarea_set_text_selection(textarea, enable)` function, the following is your tool set for doing so.  (``ta_label`` is a pointer to the Text Area's Label retrieved with ``ta_label = lv_textarea_get_label(textarea);``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:196
msgid ":cpp:expr:`lv_textarea_get_text_selection(textarea)` tells whether text selection is enabled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:197
msgid ":cpp:expr:`lv_textarea_text_is_selected(textarea)` tells whether any text is currently selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:198
msgid ":cpp:expr:`lv_textarea_clear_selection(textarea)` clears current text selection."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:199
msgid ":cpp:expr:`lv_label_set_text_selection_start(ta_label, index)` where ``index`` is the zero-based index of the first character of the selected text. Pass :c:macro:`LV_DRAW_LABEL_NO_TXT_SEL` to specify no text selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:202
msgid ":cpp:expr:`lv_label_set_text_selection_end(ta_label, index)` where ``index`` is the zero-based index of the character just after the selected text. Pass :c:macro:`LV_DRAW_LABEL_NO_TXT_SEL` to specify no text selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:205
msgid ":cpp:expr:`lv_label_get_text_selection_start(ta_label)` zero-based index of the first character of the selected text. :c:macro:`LV_DRAW_LABEL_NO_TXT_SEL` indicates no text selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:208
msgid ":cpp:expr:`lv_label_get_text_selection_end(ta_label)` zero-based index of the character just after the selected text. :c:macro:`LV_DRAW_LABEL_NO_TXT_SEL` indicates no text selected."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:212
msgid "Normally you won't need these since Text Area automates the text selection process, but if you do need to change the selection programmatically, the above are your tools to do so."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:222
msgid ":cpp:enumerator:`LV_EVENT_INSERT` Sent right before a character or text is inserted. The event parameter is the text about to be inserted. :cpp:expr:`lv_textarea_set_insert_replace(textarea, \"New text\")` can be called from within that event to replace the text to be inserted.  The contents of the buffer passed must be survive long enough for the call to `lv_timer_handler()` that is driving the event to return (after which the Text Area's label will have copied the text).  So it should not be a local buffer (created on the stack) where its contents will be destroyed before that happens.  Passing ``\"\"`` means \"do not insert anything\"."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:231
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent when the content of the Text Area has changed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:233
msgid ":cpp:enumerator:`LV_EVENT_READY` Sent when :cpp:enumerator:`LV_KEY_ENTER` is pressed (or sent) to a one-line Text Area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:249
msgid "``LV_KEY_UP/DOWN/LEFT/RIGHT`` Move the cursor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:250
msgid "``Any character`` Add the character to the current cursor position"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/textarea/index.rst:3
msgid "Simple Text area"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/textarea/index.rst:10
msgid "Text area with password field"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/textarea/index.rst:16
msgid "Text auto-formatting"
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/textarea/index.rst:22
msgid "Text area cursor styling"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:275
msgid ":ref:`widgets/textarea/lv_textarea.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/textarea.rst:277
msgid ":ref:`widgets/textarea/lv_textarea_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:5
msgid "Tile View (lv_tileview)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:11
msgid "The Tile View is a container Widget whose elements (called *tiles*) can be arranged in grid form. A user can navigate between the tiles by swiping. Any direction of swiping can be disabled on the tiles individually to not allow moving from one tile to another."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:16
msgid "If the Tile View is screen sized, the user interface resembles what you may have seen on smartwatches."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:26
msgid "The Tile View is built from a :ref:`base_widget` container and :ref:`base_widget` tiles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:29
msgid "The parts and styles work the same as for :ref:`base_widget`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:39
msgid "Add a tile"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:41
msgid ":cpp:expr:`lv_tileview_add_tile(tileview, col_id, row_id, dir)` creates a new tile on the ``col_id``\\ -th column and ``row_id``\\ -th row. ``dir`` can be ``LV_DIR_LEFT/RIGHT/TOP/BOTTOM/HOR/VER/ALL`` or OR-ed values to enable moving to the adjacent tiles in the given direction by swiping."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:46
msgid "The returned value is a pointer to the tile (a :ref:`base_widget`) on which the content of the tab can be created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:50
msgid "Change tile"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:52
msgid "The Tile View can scroll to a specified tile with :cpp:expr:`lv_tileview_set_tile(tileview, tile, LV_ANIM_ON/OFF)` or :cpp:expr:`lv_tileview_set_tile_by_index(tileview, col_id, row_id, LV_ANIM_ON/OFF)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:63
msgid ":cpp:enumerator:`LV_EVENT_VALUE_CHANGED` Sent after a new tile is displayed by scrolling. :cpp:expr:`lv_tileview_get_tile_active(tileview)` can be used within the event to get a pointer to the newly-displayed tile."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:80
msgid "No *Keys* are processed by Tileview Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/tileview/index.rst:3
msgid "Tileview with content"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:105
msgid ":ref:`widgets/tileview/lv_tileview.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/tileview.rst:107
msgid ":ref:`widgets/tileview/lv_tileview_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:5
msgid "Window (lv_win)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:11
msgid "The Window Widget is built from a header (like a title bar) with title and buttons and a content area."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:21
msgid "The Window is built from other Widgets so you can check their documentation for details:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:24
msgid "Background: :ref:`base_widget`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:25
msgid "Header on the background: :ref:`base_widget`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:26
msgid "Title on the header: :ref:`lv_label`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:27
msgid "Buttons on the header: :ref:`lv_button`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:28
msgid "Content Area on the background: :ref:`base_widget`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:39
msgid "Create a Window"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:41
msgid ":cpp:expr:`lv_win_create(parent)` creates a Window that is initially composed of the following Widget structure:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:44
msgid "Background (a :ref:`base_widget`, the main window container), is set up to be a Flex-Flow container that flows its contained Widgets vertically (:cpp:enumerator:`LV_FLEX_FLOW_COLUMN`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:48
msgid "Header (like a title bar) is initially empty, and is a Flex-Flow container set up to flow its contained Widgets horizontally (:cpp:enumerator:`LV_FLEX_FLOW_ROW`), left to right.  The Header occupies the full width of the Background (its parent) and the top approximately 1/2 inch (according to :c:macro:`LV_DPI_DEF`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:53
msgid "Content Area (a :ref:`base_widget`) occupies the full width of the Background (its parent) the remainder of the available Background area below the Header.  It is *not itself* a Flex-Flow container, but you can make it so if you wish.  See :ref:`flex` for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:60
msgid "Title and buttons"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:62
msgid "You can add Button and Label Widgets to the Header using these two functions.  They will be placed in the Header in left-to-right order as they are added.  These functions can be called in any order, any number of times."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:66
msgid ":cpp:expr:`lv_win_add_title(win, \"The title\")` adds a Label to the header, with long mode :c:enumerator:`LV_LABEL_LONG_DOT` so that if its text contents are wider than the area it has, the text will be truncated with an ellipsis (\"...\") placed at the end of the text.  It is set to be FLEX GROW 1, so if it is the only Label in the header, it will occupy all available space after any Buttons are added. If more than one label is added, each label will share that space equally unless its FLEX GROW value is altered.  See :ref:`flex` for details about how this works. Because of this, any buttons added after the last Label added will be \"stacked\" on the far right of the Header."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:76
msgid ":cpp:expr:`lv_win_add_button(win, icon, button_width)` adds a Button with the specified width that occupies the full height of the Header (its parent).  If ``icon`` is not NULL, an image is created, centered on the button, using ``icon`` as its image source.  All valid image sources are supported, but a common source to use is one of the ``LV_SYMBOL_...`` macros, such as :c:macro:`LV_SYMBOL_CLOSE` to provide an \"x\" (close) symbol.  You get back a pointer to the Button created so you can add an event callback with it and/or whatever else might be needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:91
msgid ":cpp:expr:`lv_win_get_header(win)` returns a pointer to the header, :cpp:expr:`lv_win_get_content(win)` returns a pointer to the content container to which the content of the window can be added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:102
msgid "No special events are sent by Window Widgets, however events can be added to any Buttons added."
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:118
msgid "No *Keys* are processed by Window Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/examples/widgets/win/index.rst:3
msgid "Simple window"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:141
msgid ":ref:`drivers/windows/lv_windows_context.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:143
msgid ":ref:`drivers/windows/lv_windows_display.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:145
msgid ":ref:`drivers/windows/lv_windows_input.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:147
msgid ":ref:`widgets/win/lv_win.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/widgets/win.rst:149
msgid ":ref:`widgets/win/lv_win_private.h`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:5
msgid "Fonts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:14
msgid "A ``<fonts>`` section can be added in ``globals.xml`` files. Later, it might be supported in Components and Widgets to define local fonts and keep the global space cleaner."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:23
msgid "The following section creates a mapping between font names and their paths with various attributes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:33
msgid "In ``<styles>`` and ``<view>``, fonts can then be referenced by their name, e.g.,"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:39
msgid "The tag name determines how the font is loaded. Currently, only ``tiny_ttf as_file=\"true\"`` is supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:41
msgid "``bin``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:43
msgid "If ``as_file=\"true\"``: Converts the font file to ``bin`` (see `lv_font_conv`) which will be loaded by ``lv_binfont_create()``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:45
msgid "If ``as_file=\"false\"`` (default): On export, the font file will be converted to a C array LVGL font that can be used directly by LVGL."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:48
msgid "``tiny_ttf``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:50
msgid "If ``as_file=\"true\"``: Can be loaded directly by ``lv_tiny_ttf_create_file()``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:51
msgid "If ``as_file=\"false\"`` (default): The font file will be converted to a raw C array on export that will be loaded by ``lv_tiny_ttf_create_data()``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:54
msgid "``freetype``: The file can be loaded directly by ``lv_freetype_font_create()``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:56
msgid "For simplicity, if ``as_file=\"false\"``, fonts will be loaded as files in the preview. Setting ``as_file=\"false\"`` affects only the C export."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:59
msgid "If the UI is created from XML at runtime and a ``globals.xml`` is parsed, the ``as_file=\"false\"`` tags are skipped because it is assumed that the user manually creates the mapping.  This is because the XML parser cannot automatically map an LVGL font definition like:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:76
msgid "Exported Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:78
msgid "When C code is exported, global ``const lv_font_t * <font_name>`` variables are created, and in the initialization function of the Component Library (e.g., ``my_lib_init_gen()``), the actual font is assigned."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:88
msgid "In ``lv_style_set_text_font(&style1, <font_name>)``, the created font is referenced."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:92
msgid "Default Font"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:94
msgid "``\"lv_font_default\"`` can be used to access ``LV_FONT_DEFAULT``.  Other built-in fonts are not exposed by default."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:99
msgid "Registering fonts"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:101
msgid "If the UI is created from XML at runtime and a ``globals.xml`` is parsed, the ``<... as_file=\"false\">`` tags are skipped because it is assumed that the user manually created the mapping. This is because the XML parser cannot automatically map fonts like:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:115
msgid "To register a font in the XML engine use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:121
msgid "``scope`` is usually ``NULL`` to register the font in the global scope. To register a font locally for a component you can get its scope with:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:128
msgid "After calling this function, when ``\"font_name\"`` is used as a font in XML, ``&my_font``   will be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:131
#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:72
msgid "Notes for the UI Editor"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/fonts.rst:133
msgid "For simplicity, in the UI editor's preview, fonts are always loaded as tinyttf fonts. It makes the preview dynamic as no code export and compilation is needed when a font changes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:13
msgid "An ``<images>`` section can be added to ``globals.xml`` files.  If present, it describes how to map images with names."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:26
msgid "``<file>`` means that the image source is used as a file path:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:27
msgid "``<data>`` means that the image is converted to a C array on export."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:29
msgid "In both cases in the exported C code global ``const void * <image_name>`` variables are created and in the initialization function of the Component Library (e.g. ``my_lib_init_gen()``) either the path or the pointer to the converted :cpp:type:`lv_image_dsc_t` pointers are assigned to that variable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:33
msgid "In :cpp:expr:`lv_image_set_src(image, image_name)` ``image_name`` is used instead of the path or :cpp:type:`lv_image_dsc_t` pointer."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:38
msgid "Registering images"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:40
msgid "If the UI is created from XML at runtime and a ``globals.xml`` is parsed, the ``<data>`` tags are skipped because it is assumed that the user manually created the mapping. This is because the XML parser cannot automatically map an image like:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:54
msgid "To register an image path or data in the XML engine use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:60
msgid "``scope`` is usually ``NULL`` to register the image in the global scope. To register an image locally for a component you can get its scope with:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:67
msgid "After calling this function, when ``\"image_name\"`` is used as an image source in XML, ``data`` (can be a path or a pointer to an image descriptor) will be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/images.rst:74
msgid "For simplicity, in the UI editor's preview, images are always loaded as files. It makes the preview dynamic so no code export and compilation is needed when an image changes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/assets/index.rst:5
msgid "Assets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:10
msgid "There are several ways to define events for user interactions. These events can be added as children of any widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:13
msgid "Triggers"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:15
msgid "In all event types, the ``trigger`` attribute defines what kind of user action should trigger the event. All LVGL event types are supported with straightforward mapping:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:18
msgid ":cpp:enumerator:`LV_EVENT_ALL`: ``\"all\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:19
msgid ":cpp:enumerator:`LV_EVENT_CLICKED`: ``\"clicked\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:20
msgid ":cpp:enumerator:`LV_EVENT_PRESSED`: ``\"pressed\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:24
msgid "Call function"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:26
msgid "User-defined functions can be called like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:37
msgid "When the XML is loaded at runtime, the callback name needs to be mapped to a function using :cpp:expr:`lv_xml_register_event_cb(\"my_callback_1\", an_event_handler)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:40
msgid "The callback should follow the standard LVGL event callback signature: ``void an_event_handler(lv_event_t * e);``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:43
msgid "In the exported C code, it is assumed that a function with the exact name exists. For example, ``callback=\"my_callback_1\"`` will be exported as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:52
msgid "The ``user_data`` is optional. If omitted, ``NULL`` will be passed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:60
msgid "Screen Load and Create events"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:62
msgid "By using the ``<screen_load_event>`` and ``<screen_create_event>`` tags as a child of a widget or component, screens can be loaded or created on a trigger (e.g. click)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:65
msgid "The difference between load and create is that:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:67
msgid "**load**: Just loads an already existing screen. After leaving the screen, it remains in memory, so all states are preserved."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:69
msgid "**create**: The screen is created dynamically, and when leaving the screen, it is deleted, so all changes are lost (unless they are saved in ``subjects``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:72
msgid "Both tags support the following optional attributes:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:74
msgid "``trigger``: Event code that triggers the action (e.g. ``\"clicked\"``, ``\"long_pressed\"``, etc). Default: ``\"clicked\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:75
msgid "``anim_type``: Describes how the screen is loaded (e.g. ``\"move_right\"``, ``\"fade_in\"``). Default: ``\"none\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:76
msgid "``duration``: Length of the animation in milliseconds. Default: ``0``. Only used if ``anim_type`` is not ``\"none\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:77
msgid "``delay``: Wait time before loading the screen in milliseconds. Default: ``0``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:79
msgid "This is a simple example of both load and create:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:115
msgid "Set subject value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:117
msgid "It's possible to set a :ref:`Subject <observer_subject>` value on user interaction by adding a special child to any widget:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:130
msgid "The usage is straightforward: the specified ``subject`` will be set to the given ``value`` when the ``trigger`` occurs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:133
msgid "Increment subject value"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:135
msgid "Incrementing or decrementing a :ref:`Subject <observer_subject>` value can be defined as follows:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:147
msgid "The ``<subject_increment_event>`` element defines a ``step`` to be added to the subject's current value when the ``trigger`` occurs. Optionally, ``min`` and/or ``max`` can be set to limit the subject's value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:150
msgid "``subject`` must be an ``int`` or ``float`` subject."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:152
msgid "If ``step`` is **negative**, the subject's value will be decremented. Only integer ``step`` values are supported now."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/events.rst:155
msgid "**Note:** Only integer subjects are supported by ``<subject_increment>``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/index.rst:5
msgid "Build UIs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:5
msgid "Animations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:10
msgid "XML animations are built on top of :ref:`Timeline animations <animations_timeline>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:12
msgid "Timelines are composed of simple animations. For example: *\"change the ``bg_opa`` of ``my_button_2`` from 0 to 255 in 500 ms.\"*"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:15
msgid "Each component can define its own timeline animations, which can then be played by the component itself or by any parent components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:19
msgid "Defining Timelines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:21
msgid "Timelines can be defined inside ``<screen>``\\ s and ``<component>``\\ s. For ``<widget>``\\ s, timelines are supported only in LVGL's UI Editor, where C code can also be exported from them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:53
msgid "In summary: inside ``<animations>``, you can define ``<timeline>``\\ s, each with a unique name that you can reference later."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:56
msgid "Inside a ``<timeline>``, you add ``<animation>``\\ s to describe each step. Supported properties of ``<animation>`` are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:59
msgid "``prop``: Style property to animate. All integer style properties are supported (colors are not)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:60
msgid "``selector``: Style selector, e.g. ``knob|pressed``. Default: ``main|default``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:61
msgid "``target``: Name of the UI element to animate. ``self`` refers to the root element of the component (the ``<view>``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:62
msgid "``start``: Start value (integer only)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:63
msgid "``end``: End value (integer only)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:64
msgid "``duration``: Duration of the animation in milliseconds."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:65
msgid "``delay``: Delay before starting in milliseconds."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:66
msgid "``early_apply``: If ``true``, the start value is applied immediately, even during the delay."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:69
msgid "Playing Timelines"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:71
msgid "Timelines can be triggered by events (e.g. click) using ``<play_timeline_event>`` as a child of any widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:86
msgid "You set a ``target`` UI element and select one of its ``timeline``s to play. If ``target=\"self\"``, the timeline is looked up in the current component/widget/screen (i.e. in the current XML file)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:90
msgid "You can also set ``delay`` and ``reverse=\"true\"`` when playing a timeline."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:93
msgid "Under the Hood"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:95
msgid "Understanding how timelines work internally helps use them effectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:97
msgid "When an XML file is registered, the contents of the ``<animations>`` section are parsed, and the animation data is stored as a blueprint."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:100
msgid "When an instance of a component or screen is created, ``lv_anim_timeline``\\ s are created and initialized from the saved blueprint. Each instance gets its own copy."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:103
msgid "When a ``<play_timeline_event>`` is added to a UI element, the target and timeline names are saved as strings. (It can't use pointers as the event can reference UI elements that will be created only later in the ``<view>``.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:107
msgid "Finally, when the trigger event happens, LVGL finds the target widget by the saved name, retrieves the specified timeline, and starts it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/animations.rst:110
msgid "Since each instance has its own timeline, you can have multiple components (e.g. 10 ``<list_item>``\\ s) and play their ``load`` timelines independently with different delays."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:7
msgid "The ``<api>`` tag can be a child of ``<widget>`` and ``<component>`` tags. (``<screen>``\\ s don't support custom APIs.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:10
msgid "The only common point is that both Widgets and Components support having ``<prop>`` (properties) in the ``<api>`` tag to describe their interface."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:13
msgid "However, as Widgets and Components work very differently (Widgets have C code, but Components are pure XML), even properties are interpreted differently."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:22
msgid "While Widgets can have complex ``set``/``get`` APIs, Components are very simple."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:24
msgid "When their XML is converted to a C file, only a ``create`` function is generated, where all the ``<prop>``\\ s are arguments. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:34
msgid "This generates the following C function:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:40
msgid "These properties are set once (at creation time), and there are no specific ``set`` functions to modify the property later. LVGL's general API can still be used to modify any widget in the component, but no dedicated API functions are generated."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:45
msgid "Referencing properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:47
msgid "``<prop>``\\ s are simply forwarded to widget or component APIs. For example, if a component has ``<prop name=\"button_label\" type=\"string\"/>``, it can be used in a label as ``<lv_label text=\"$button_label\"/>``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:51
msgid "In the generated code, these are passed as arguments in create/set functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:54
msgid "Default values"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:56
msgid "Since each property is passed as an argument to the create function, each must have a value. This can be ensured by:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:59
msgid "Simply setting them in the XML instance"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:60
msgid "Providing a default value in the ``<api>``, e.g., ``<prop name=\"foo\" type=\"string\" default=\"bar\"/>``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:65
msgid "Note that none of the Widget API features such as ``<param>``, ``<enumdef>``, or ``<element>`` can be used for Components. Only simple properties that are forwarded are supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:96
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:5
#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:78
msgid "Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:99
msgid "Properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:101
msgid "Properties are the core part of describing a Widget's API."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:112
msgid "Some properties take multiple parameters. For example: :cpp:expr:`lv_label_set_bind_text(label, subject, \"%d °C\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:115
msgid "It's described as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:126
msgid "And used as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:132
msgid "Parameters with the same name as the property can be referenced directly. Other parameters use ``property-param`` notation."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:135
msgid "Unset parameters fall back to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:137
msgid "Their default value (if defined)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:138
msgid "Type-specific defaults (e.g., 0, false, NULL)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:141
msgid "Mapping"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:143
msgid "Each ``<prop>`` is mapped to a ``set`` function. This mapping is implemented in the Widget's XML parser. See `the LVGL XML parsers <https://github.com/lvgl/lvgl/tree/master/src/others/xml/parsers>`_."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:147
msgid "If ``<param>``s are used, they are passed to the same ``set`` function. If a property is not set on a Widget instance, it is skipped and the Widget's built-in default is used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:152
msgid "<enumdef>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:154
msgid "Only used with Widgets, this tag defines enums for parameter values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:168
msgid "Enum values are ignored in export; the names are used and resolved by the compiler. XML parsers must handle mapping enum names to C enums."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:174
msgid "<element>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:176
msgid "Also exclusive to Widgets, elements define sub-widgets or internal structures (e.g., chart series, dropdown list, tab views)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:179
msgid "They support ``<arg>`` and ``<prop>``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:181
msgid "``<arg>``\\ s are required and used when creating/getting the element."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:182
msgid "``<prop>``\\ s are optional and mapped to setters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:184
msgid "Elements are referenced as ``<widget-element>`` in views."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:186
msgid "Name parts are separated by `-` ( as `-` is not allowed inside names)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:188
msgid "Element `access` types:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:190
msgid "``add``: Create multiple elements dynamically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:191
msgid "``get``: Access implicitly created elements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:192
msgid "``set``: Access indexed parts (e.g., table cells)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:193
msgid "``custom``: Map custom C function to XML."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:195
msgid "As ``add`` and ``get`` elements return an object they also have a type. This type can be any custom type, for example, `type=\"my_data\"`. In the exported code the return value will be saved in a ``my_data_t *`` variable."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:199
msgid "If the type is ``type=\"lv_obj\"`` it allows the element to have children widgets or components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:201
msgid "Note that, only the API can be defined in XML for elements; implementations must be in C."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:204
msgid "access=\"add\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:206
msgid "Elements are created via an ``add`` function:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:220
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:249
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:279
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:308
msgid "Used in a view:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:228
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:257
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:287
#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:316
msgid "Generates:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:236
msgid "access=\"get\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:238
msgid "Used for internal/implicit elements:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:265
msgid "access=\"set\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:267
msgid "Used for indexed access, like setting values in a table:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:295
msgid "access=\"custom\""
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/api.rst:297
msgid "Used to describe any custom API functions with a custom name. \"custom\" elements can have only arguments and no `type` so they are pure setters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:5
msgid "Constants"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:10
msgid "Constants can be defined to replace any value with a selected type or to be used as special values."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:12
msgid "The supported types are: - ``color`` - ``px`` - ``percentage`` - ``string`` - ``opa`` - ``bool``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:31
msgid "Constants can be used in:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:33
msgid "Style properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:34
msgid "Widget and Component properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/consts.rst:36
msgid "And they can be used like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/index.rst:5
msgid "Main tags"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:5
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:71
msgid "Preview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:13
msgid "In ``<component>`` and ``<widget>``, it is possible to define ``<preview>`` tags. These are **not** exported to code and are **not** loaded from XML."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:16
msgid "They are used only by the UI |nbsp| Editor to describe the context of the Component. For example, you might want to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:19
msgid "Change the background of the Editor's preview to dark."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:20
msgid "Center the Component."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:21
msgid "Set margins."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:22
msgid "Change the size of the preview."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:24
msgid "``style_radius`` can be used to make preview rounded."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:30
msgid "You can think of a ``<preview>`` tag as an ``lv_obj`` where the following properties can be used:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:32
msgid "``width``, ``height``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:33
msgid "Any local style properties, for example, ``style_bg_color=\"0x333\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:34
msgid "``flex`` and ``flex_flow``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/preview.rst:36
msgid "It is also possible to define multiple previews, and in the UI |nbsp| Editor, you can select one of them."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:10
msgid "In XML files, both style sheets (:cpp:expr:`lv_style_t`) and local styles can be used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:14
msgid "Style Sheets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:16
msgid "In the ``<styles>`` section, styles and their properties can be defined like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:25
msgid "Styles can be referenced like this in the ``<view>``\\ :"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:37
msgid "As shown in the example, parts and states can be set as ``selector``\\ ."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:43
msgid "Local styles can be used directly in a Widget, for example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:53
msgid "Before the ``<styles>`` tag, the ``<gradients>`` tag can be used to describe various gradients, which can later be referenced in styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:56
msgid "When a gradient is created, it can be referenced by its name, like:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:70
msgid "Horizontal or Vertical Gradient"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:72
msgid "To define a simple ``<horizontal>`` or ``<vertical>`` gradients:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:85
msgid "Linear Gradient"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:87
msgid "To define a skewed gradient from two points:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:100
msgid "Radial Gradient"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:102
msgid "To define a radial gradient:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:115
msgid "Conical Gradient"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/styles.rst:117
msgid "To define a conical gradient:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:5
msgid "View"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:10
msgid "The ``<view>`` tag can be used in:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:12
msgid "``<component>``\\ s"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:13
msgid "``<widget>``\\ s"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:14
msgid "``<screen>``\\ s"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:15
msgid "``<test>``\\ s"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:17
msgid "to describe how these items look. Inside ``<view>``, children can be added in a nested way using already defined ``widget``\\ s and ``component``\\ s. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:30
msgid "Extends"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:32
msgid "The ``<view>`` itself is also a widget or component, which will become the parent of the children. To define the type of the ``<view>``, use the ``extends`` attribute. For example, ``extends=\"lv_slider\"``. In this case, an ``lv_slider`` will be created first, and the children will be added to it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:36
msgid "By adding properties to the ``<view>``, the extended type can be customized. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:46
msgid "Rules for the allowed values of ``extends``:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:48
msgid "``<component>``: can extend both ``<widget>``\\ s and ``<component>``\\ s"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:49
msgid "``<widget>``: can extend only ``<widget>``\\ s"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:50
msgid "``<screen>``: cannot extend anything"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/main_tags/view.rst:51
msgid "``<test>``: can extend ``<widget>``, ``<component>``, or ``<screen>``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:10
msgid "Components are one of the main building blocks for creating new UI elements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:12
msgid "``<component>``\\ s support the following child XML tags:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:14
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:23
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:18
msgid ":ref:`<consts> <xml_consts>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:15
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:19
msgid ":ref:`<api> <xml_api>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:16
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:24
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:20
msgid ":ref:`<styles> <xml_styles>`, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:17
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:25
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:21
msgid ":ref:`<view> <xml_view>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:18
#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:22
msgid ":ref:`<previews> <xml_preview>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:20
msgid "Although they can't contain C code, they are very powerful:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:22
msgid "They can extend another Component or Widget (the base can be defined)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:23
msgid "Components can be built from Widgets and other Components"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:24
msgid "A custom API can be defined"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:25
msgid "Local styles can be defined, and the global styles can be used"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:26
msgid "Local constants can be defined, and the global constants can be used"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:27
msgid "Function calls, subject changes, or screen load/create events can be added. See :ref:`XML Events <xml_events>`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:28
msgid "Previews can be defined to preview the components in various settings"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:30
msgid "Unlike Widgets (which are always compiled into the application), Components can either:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:32
msgid "be loaded at runtime from XML, or"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:33
msgid "be exported to C code and compiled with the application."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:36
msgid "Usage from XML"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:39
msgid "In XML Files"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:41
msgid "Using Components in XMLs is very intuitive. The name of the components can be used as XML tag in the ``<view>`` of other Components, Screens, and Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:44
msgid "The Component properties are just XML attributes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:46
msgid "To load Components from file, it's assumed that the XML files are saved to the device either as data (byte array) or as file. Once the data is saved, each component can be registered, and instances can be created after that."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:60
msgid ":ref:`Styles <xml_styles>`, :ref:`Constants <xml_consts>`, and :ref:`custom API <component_custom_api>` can also be described in the XML files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:64
msgid "Registration"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:66
msgid "Once a Component is created (e.g., ``my_button``), it can be registered by calling either:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:68
msgid ":cpp:expr:`lv_xml_component_register_from_file(\"A:lvgl/examples/others/xml/my_button.xml\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:69
msgid ":cpp:expr:`lv_xml_component_register_from_data(\"my_button\", xml_data_of_my_button)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:71
msgid "These registration functions process the XML data and store relevant information internally. This is required to make LVGL recognize the Component by name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:74
msgid "Note that the \"A:\" in the above path is a file system \"driver identifier letter\" from :ref:`file_system` and used accordingly. See that documentation for details."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:77
msgid "When loaded from a file, the file name is used as the Component name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:79
msgid "During registration, the ``<view>`` of the Component is saved in RAM."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:82
msgid "Instantiation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:84
msgid "After registration, a new instance of any registered Component can be created with:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:90
msgid "The created Widget is a normal LVGL Widget that can be used like any other manually-created Widget."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:92
msgid "The last parameter can be ``NULL`` or an attribute list, like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:107
msgid "Usage from Exported Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:109
msgid "From each Component XML file, a C and H file is exported with a single function inside:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:115
msgid "where 'component_name' (in the function above) is replaced by the Component's XML file name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:118
msgid "When a Component is used in another Component's XML code and the code is exported, this ``create`` function will be called. This means that Components do not have a detailed set/get API but can be created with a fixed set of parameters."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:122
msgid "If the user needs to access or modify values dynamically, it is recommended to use a :ref:`Data bindings via Subject  <xml_subjects>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:125
msgid "The user can also call these ``..._create()`` functions at any time from application code to create new components on demand."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:129
msgid "Extending"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:131
msgid "Additionally, when a Component is created, it can use the extended Widget's attributes (see ``<view extends=\"...\">`` in the code examples below)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:134
msgid "This means that Components inherit the API of the extended Widget as well."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:139
msgid "Custom Properties"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:141
msgid "The properties of child elements can be adjusted, such as:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:147
msgid "However, it's also possible to define custom properties in the ``<api>`` tag. The properties then can be passed to any properties of the children by referencing them by ``$``. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:164
msgid "And it can be used like"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:177
msgid "In this setup, the ``btn_text`` property is mandatory, however it can be made optional by setting a default value:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:184
msgid "See :ref:`<api> <xml_api>` for more details and :ref:`XML Syntax <xml_syntax>` for all the supported types."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:189
msgid "The following example demonstrates parameter passing and the use of the ``text`` label property on a Component. Styles and Constants are also shown."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/components.rst:239
msgid "Live Example"
msgstr ""

#: ../../lvgl/examples/others/xml/index.rst:2
msgid "Load components at runtime"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/index.rst:5
msgid "Root elements"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:13
msgid "Screens work very similarly to Components. Both can be:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:15
msgid "Loaded from XML"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:16
msgid "Contain Widgets and Components as children"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:18
msgid "Screens are wrapped in the ``<screen>`` XML root element and used to organize the content of the UI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:21
msgid "Screens can have only the following child XML tags:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:27
msgid "That is, Screens **cannot** have an :ref:`<api> <xml_api>` or :ref:`<preview> <xml_preview>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:32
msgid "Each XML file describes a :ref:`Screen <screens>`. The name of the XML file will also be the name of the Screen."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:35
msgid "This example illustrates a screen in XML. In the example, a ``<my_header>`` and a ``<my_main_cont>`` component is used to keep the screen simple."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:63
msgid "Code export"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:65
msgid "When the C code is exported from the UI |nbsp| Editor, ``screen_name_gen.c/h`` files are exported, containing only a single ``lv_obj_t * screen_name_create(void)`` create function."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:68
msgid "By using this function, any number of screen instances can be created and loaded as needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:73
msgid "Screens don't support the :ref:`<preview> <xml_preview>` tag because it doesn't make sense to preview each screen in different resolutions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:76
msgid "As Screens are related to the target hardware in the ``project.xml`` file, multiple ``<display>`` elements can be defined. In the UI |nbsp| Editor, when a Screen is being developed, the user can select from all the defined displays in the Preview, and the Screen will be shown with the given resolution and color depth."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:81
msgid "This is useful for verifying responsive designs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:86
msgid "It's very common to load or create Screens on a button click or other events."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:88
msgid "Both are supported by adding special XML tags as children of Components or Widgets:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/screens.rst:107
msgid "Learn more on :ref:`XML Events <xml_events_screen>` page."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:13
msgid "Besides components and Screens, Widgets are the other main building blocks of UIs. The XML file of the Widgets is wrapped in a ``<widget>`` XML root element."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:16
msgid "``<widget>``\\ s support the following child XML tags:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:24
msgid "Just like Components, Widgets also can be the children of other Widgets and Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:26
msgid "The main difference is that Widgets are written in C and compiled into the application. It means unlike Components, Widgets can contain custom C code. For example, when a property is set, any complex C code can run to set that value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:30
msgid "To connect the C code to XML, XML parser functions need to be implemented and registered. It's pretty simple as LVGL already provides all the helper functions and the required libraries. Also there are `many XML parser examples here. <https://github.com/lvgl/lvgl/tree/master/src/others/xml/parsers>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:35
msgid "Built-in Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:37
msgid "The built-in LVGL widgets (e.g. :ref:`lv_slider`, :ref:`lv_label`, :ref:`lv_chart`, etc.) already have XML parsers and therefore are available in XML."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:48
msgid "The built-in widgets are"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:50
msgid "pure C code (e.g. `lv_slider.c <https://github.com/lvgl/lvgl/tree/master/src/widgets/slider/lv_slider.c>`__)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:52
msgid "an XML file to define only the API (e.g. `lv_slider.xml <https://github.com/lvgl/lvgl/blob/master/xmls/lv_slider.xml>`__). It is used only in the UI |nbsp| Editor to validate and autocomplete properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:55
msgid "an XML parser C file to map the XML attributes to C functions. (e.g. `lv_xml_slider_parser.c <https://github.com/lvgl/lvgl/blob/master/src/others/xml/parsers/lv_xml_slider_parser.c>`__)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:59
msgid "Creating New Widgets"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:61
msgid "It's possible to create new widgets in the same way as the built-in LVGL widgets are handled."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:63
msgid "However, using the UI |nbsp| Editor it's much faster and simpler. When an XML file is created and the ``<widget>`` root element is used, the following .C/.H files are generated automatically:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:0
msgid "<widget_name>_gen.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:66
msgid "Contains the generated API implementation of the widget (overwritten on each code export)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:0
msgid "<widget_name>_private_gen.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:68
msgid "Contains private API and the data for the widget (overwritten on each code export)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:0
msgid "<widget_name>_gen.c"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:70
msgid "Contains the internals of the Widget, e.g. constructor with the children, destructors, event handler, etc. (overwritten on each code export)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:0
msgid "<widget_name>.h"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:72
msgid "Includes ``<widget_name>_gen.h`` and allows the user to define custom APIs. Only a skeleton is exported once."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:0
msgid "<widget_name>.c"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:74
msgid "Contains hooks from ``<widget_name>_gen.c`` and allows the user to write custom code. Only a skeleton is exported once."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:0
msgid "<widget_name>_xml_parser.c"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:77
msgid "Processes the XML strings and calls the required functions according to the set attributes. Only a skeleton is exported once."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:85
msgid "XML Parser"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:87
msgid "To make the Widgets accessible from XML, an XML parser needs to be created and registered for each Widget. The XML parser for the label Widget looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:127
msgid "A Widget XML processor can be registered like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:133
msgid "After registration, a Widget can be created like this from C code:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:145
msgid "And in XML it can be used like"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:154
msgid "Adding Custom Code"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:156
msgid "``<widget_name>.c`` contains three hooks:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:158
msgid "**Constructor hook**: Called when the Widget and all its children are created. Any modifications can be done on the children here."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:160
msgid "**Destructor hook**: Called when the Widget is deleted. All manually allocated memory needs to be freed here."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:162
msgid "**Event hook**: Called at the beginning of the Widget's event callback to perform any custom action."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:165
msgid "In this C file, the ``set`` functions for each API ``<prop>`` also need to be implemented. The declaration of these functions is automatically exported in ``<widget_name>_gen.h``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:169
msgid "Besides these, any custom code and functions can be freely implemented in this file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:172
msgid "Elements"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:174
msgid "Elements are internal parts of the widget that can be accessed and/or created dynamically. For example, tabs of a tabview, list of a dropdown, series of a chart, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:177
msgid "Just like any other Widget API properties, Elements also can be defined in the ``<api>`` tag of the Widget's XML."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/root_elements/widgets.rst:180
msgid "Learn more about the Elements in the documentation page of :ref:`<api> <xml_widget_element>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:5
msgid "Data binding (Subjects)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:10
msgid "With the help of :ref:`Subjects <observer_subject>`, the interface of the UI can be created."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:12
msgid "A subject is a global data item whose value can be set either from the application or the UI, and whose value can be bound to widget properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:15
msgid "For example, a ``room1_temperature`` subject's value can be set in the application when the temperature is measured, and can be bound to a label like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:23
msgid "Defining subjects"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:25
msgid "Subjects can be created in ``globals.xml`` like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:36
msgid "As the example shows, a subject consists of a type, name, and initial value. Currently, only integer and string types are supported."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:40
msgid "Simple binding"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:42
msgid "Some widgets (e.g., label, slider) support binding the subject's value directly to the widget. These bindings use attributes that start with ``bind_*`` and reference a subject."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:50
msgid "Once a binding is created, if the subject's value changes (e.g., by adjusting the slider), all bound widgets will be updated automatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:54
msgid "Complex binding"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:56
msgid "In more complex cases—when a binding requires multiple parameters—the binding can be added as a child element of a widget. This allows binding multiple subjects with different parameters. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:66
msgid "Explanation of complex bindings:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:68
msgid "``<lv_obj-bind_flag_if_eq>`` — Set a flag if the subject's value **equals** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:69
msgid "``<lv_obj-bind_flag_if_not_eq>`` — Set a flag if the subject's value **does not equal** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:70
msgid "``<lv_obj-bind_flag_if_gt>`` — Set a flag if the subject's value is **greater than** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:71
msgid "``<lv_obj-bind_flag_if_ge>`` — Set a flag if the subject's value is **greater than or equal to** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:72
msgid "``<lv_obj-bind_flag_if_lt>`` — Set a flag if the subject's value is **less than** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:73
msgid "``<lv_obj-bind_flag_if_le>`` — Set a flag if the subject's value is **less than or equal to** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:75
msgid "``<lv_obj-bind_state_if_eq>`` — Set a state if the subject's value **equals** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:76
msgid "``<lv_obj-bind_state_if_not_eq>`` — Set a state if the subject's value **does not equal** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:77
msgid "``<lv_obj-bind_state_if_gt>`` — Set a state if the subject's value is **greater than** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:78
msgid "``<lv_obj-bind_state_if_ge>`` — Set a state if the subject's value is **greater than or equal to** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:79
msgid "``<lv_obj-bind_state_if_lt>`` — Set a state if the subject's value is **less than** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:80
msgid "``<lv_obj-bind_state_if_le>`` — Set a state if the subject's value is **less than or equal to** the reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/subjects.rst:82
msgid "Note: The ``lv_obj-`` prefix can be omitted. For example, you can simply write ``<bind_state_if_gt>`` instead."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:5
msgid "Translations"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:10
msgid "The XML translation module allows defining and using translated strings directly within XML files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:12
msgid "It's built on top of :ref:`LVGL's translation module <translation>`. Check it out to learn more about selecting the active language, retrieving translations, and fallback behavior."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:19
msgid "Example XML translation definition:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:29
msgid "In the root ``<translations>`` tag, the ``languages`` attribute defines the available languages, e.g., ``languages=\"en de hu\"``. Language codes are free-form, but ISO-style codes are recommended."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:32
msgid "Each ``<translation>`` defines a ``tag``, which acts as the lookup key, and attributes for each language."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:34
msgid "Translations may be omitted—:ref:``Fallbacks <xml_translations_fallback>`` will be applied when needed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:36
msgid "To register XML translations:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:38
msgid ":cpp:expr:`lv_xml_translation_register_from_file(\"path/to/file.xml\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:39
msgid ":cpp:expr:`lv_xml_translation_register_from_data(xml_string)`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:41
msgid "Multiple XML sources can be registered; they will be merged and searched collectively."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:46
msgid "Usage in XML"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:48
msgid "Some widget properties support a ``*-translated`` suffix to refer to translation tags. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/build_ui/translation.rst:54
msgid "This sets the label's text to the translated string for ``\"dog\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/index.rst:5
msgid "XML - Declarative UI"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:5
msgid "License"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:7
msgid "**Version 1.0 – June 2025**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:9
msgid "**Copyright (c) 2025 LVGL LLC**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:13
msgid "1. Overview"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:15
msgid "The LVGL XML Specification (the \"Specification\") defines an XML-based language for describing user interfaces within the LVGL ecosystem."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:17
msgid "This Specification is protected by copyright. It is provided with limited rights of use as outlined below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:19
msgid "The purpose of this license is to ensure that the Specification remains freely usable for application developers working with LVGL, while restricting its use in third-party UI editors or design tools. This protects the long-term integrity and sustainability of the LVGL ecosystem by preventing unlicensed tools from reusing or replicating the Specification in ways that compete with official LVGL offerings."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:26
msgid "2. Permitted Usage"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:28
msgid "You are permitted to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:30
msgid "Use this Specification in **any firmware or embedded application** built on top of the official `LVGL library <https://github.com/lvgl/lvgl>`_ (MIT-licensed)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:31
msgid "Use the LVGL XML loader freely in accordance with its MIT license."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:32
msgid "Use the Specification with the **LVGL UI editor** and **official LVGL tools such as the CLI or XML loader**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:33
msgid "Write, load, edit, or generate user interfaces described in the LVGL XML Specification for **internal use** only, including automation or configuration tools used solely inside your organization."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:34
msgid "Create **internal scripts or plugins** that help your own developers use or manage this Specification, as long as these are **not shared outside your organization or made publicly available**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:35
msgid "Share XML-based UI files within customer firmware or projects that target LVGL-based embedded systems."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:39
msgid "3. Restrictions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:41
msgid "You are **not permitted** to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:43
msgid "Create, release, or distribute any **UI editor, visual builder, layout designer, code generator, or tool** that reads, writes, or interprets XML files using this Specification — **whether commercial, open-source, or intended for public use, use by customers or partners, or any use outside your own organization** — without written permission from LVGL LLC."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:44
msgid "Implement or extend this Specification in any **software or platform that provides UI creation, editing, or design capabilities similar to those in the LVGL UI Editor**."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:45
msgid "Build public APIs, plugins, converters, or SDKs based on this Specification."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:46
msgid "Share or publish internal tooling built around this Specification."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:47
msgid "Use this Specification into general-purpose design tools or frameworks outside the LVGL ecosystem."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:49
msgid "These restrictions apply regardless of whether the software is commercial, free, or open-source."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:52
msgid "4. Clarification for LVGL Users"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:54
msgid "You are **explicitly permitted** to:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:56
msgid "Use XML files with this Specification in your own projects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:57
msgid "Load XMLs at runtime using LVGL’s XML loader."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:58
msgid "Generate XMLs using the LVGL UI editor."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:59
msgid "Customize XMLs manually or with internal utilities."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:60
msgid "Share LVGL-based projects with XML files as part of a commercial product or firmware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:62
msgid "If you are building embedded software using LVGL, **this license does not affect you**. This license only applies to **UI development tools** that **read, generate, or process XML files using this Specification for UI development purposes** in a public or commercial manner."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:65
msgid "You may create **internal tools** to aid development using the Specification, but these must not be published, sold, or shared externally without a license."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:69
msgid "5. Trademarks"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:71
msgid "This license does not grant any rights to use the LVGL name, logo, or trademarks."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:75
msgid "6. Licensing and Permissions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:77
msgid "To request permission for broader use or commercial licensing (e.g. using this Specification in your own UI tool), contact:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:79
msgid "**lvgl@lvgl.io**"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/license.rst:81
msgid "All rights not expressly granted herein are reserved by LVGL LLC."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:5
msgid "Component Library"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:13
msgid "The collection of Components, Widgets, Screens, Images, Fonts, etc., is called a Component Library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:16
msgid "A Component Library can be fully self-sufficient, but it can also reference data from other Component Libraries."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:19
msgid "LVGL itself is a Component Library that supplies the built-in Widgets, data types, etc. You can find the XML files that describe the LVGL Widgets `here <https://github.com/lvgl/lvgl/tree/master/xmls>`__."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:24
msgid "A project always has at least 2 Component Libraries:  that of LVGL as mentioned above, and its own where the Screens, Components, and Widgets of the project are defined.  A project may include additional Component Libraries."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:30
msgid "Structure"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:32
msgid "A typical structure for a Component Library looks like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:67
msgid "Visibility"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:69
msgid "The content of all ``globals.xml`` files is part of a common global scope, and any Components, Widgets or Screens defined therein can be used in all .XML files."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:72
msgid "Styles, constants, and other data defined in the XML file of Components, Widgets, or Screens are local to that XML file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:75
msgid "Thus, there are two namespaces:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:77
msgid "**local namespace** within the given XML file of Components, Widgets and Screens."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:78
msgid "**global namespace** created from the data in the ``globals.xml`` file from each Component Library included."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:81
msgid "To find names referenced in XML files, the local namespace is checked first, and if a name is not found there, then the global namespace is checked."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:84
msgid "The names of defined Components, Widgets and Screens become part of the global namespace and must be unique therein.  This ensures that each Component has a unique name."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:88
msgid "All data belonging to the LVGL core Component Library is prefixed by ``lv_`` (e.g., ``lv_label``, ``lv_font_default``)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:91
msgid "A custom Component can be prefixed with ``watch_``, ``small_``, ``light_``, or anything else the developer deems appropriate."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:94
msgid "LVGL's UI |nbsp| Editor will show an error if there is a name conflict."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:99
msgid "``globals.xml``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:101
msgid "A single ``globals.xml`` file should be created in the root directory of each Component Library.  The definitions in it do not belong to any specific Widget but are available throughout the entire UI, Widgets, and all XML files.  The valid tags in it are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
msgid "<config>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:106
msgid "Can specify name and help."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:0
msgid "<api>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:107
msgid "Used with ``<enumdefs>`` to show possible values for Widget or Component attributes."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
msgid "<subjects>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:108
msgid "List of :ref:`Subjects <observer_subject>`. Can be considered the API of a Component Library."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:0
msgid "<consts>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:109
msgid "Globally available constants."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:0
msgid "<styles>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:110
msgid "Globally available styles."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
msgid "<fonts>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:111
msgid "Globally available fonts."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
msgid "<images>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:112
msgid "Globally available images."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
msgid "<const_variants>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:113
#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:114
msgid "See below."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:0
msgid "<style_variants>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:116
msgid "The ``globals.xml`` must be the only ``globals.xml`` file within the Component Library's folder tree."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:119
msgid "From each ``globals.xml`` file, a ``<config.name>.h`` file is generated, which is included by all generated header files --- not only in the sub-folders where ``globals.xml`` is created, but in all exported .C and .H files.  This ensures that constants, fonts, and other global data are available for all Widgets and new Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/component_library.rst:128
msgid "A ``globals.xml`` file of a Component Library might look like this:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:10
msgid "The LVGL XML Module implements LVGL's Declarative UI by loading UI elements written in XML.  The XML file can be written by hand, but it's highly recommended to use `LVGL's UI editor  <https://lvgl.io/editor>`__ to write the XML files.  This UI editor provides features like:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:15
msgid "Instant preview of the XML files"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:16
msgid "Autocomplete and Syntax highlighting"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:17
msgid "Online preview for collaboration and testing"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:18
msgid "`Figma <https://www.figma.com/>`__ integration to easily reimplement Figma designs"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:22
msgid "The UI editor and the XML loader are still under development and not production-ready.  Consider them as an open beta or experimental features."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:25
msgid "Describing the UI in XML in a declarative manner offers several advantages:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:27
msgid "XML files can be loaded at runtime (e.g. from an SD card) allowing you to change the application's UI without changing the firmware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:29
msgid "XML files can be loaded dynamically as well, which allows for things like creating UIs from plugins or apps that are downloaded by the firmware."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:31
msgid "XML is simpler to write than C, enabling people with different skill sets to create LVGL UIs."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:32
msgid "XML is textual data, making it easy to parse and manipulate with a large number of programming and scripting languages."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:34
msgid "XML can be used to generate LVGL code in any language."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:35
msgid "XML helps to separate the view from the internal logic."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:36
msgid "The XML syntax uses the same properties as the C API, so it's easy to learn. E.g. style properties like bg_color, line_width, or widget properties like width, height, label text, etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:39
msgid "A powerful data binding engine allows you to easily bind the widgets to global data."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:44
msgid "Concept"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:46
msgid "The XML files are Component-oriented. To be more specific, they are ``Component-Library`` oriented. That is, they are structured in a way to make it easy to create reusable Component Libraries."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:49
msgid "For example, a company can have a Component Library for the basic Widgets for all its products (generic widgets for all smart devices), and create other industry-specific Libraries (smart-home specific, smart-watch specific, etc.) containing only a few extra Widgets and Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:53
msgid "These Component Libraries are independent, can be reused across many products, and can be independently versioned and managed.  Imagine a Component Library as a collection of XML files that describe Widgets, Components, Screens, images, fonts, and other assets stored in a git repository, which can be a submodule in many projects.  If someone finds a bug in the Component Library, they can simply fix it in one place and push it back to the git repository so that other projects can be updated from it."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:60
msgid "The built-in Widgets of LVGL are considered ``the core Component Library`` which is always available."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:63
msgid "A UI editor project can have any number of Component Libraries but will always have at least 2:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:66
msgid "LVGL's built-in Widgets, and"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:67
msgid "XML-based definitions of Screen contents, along with other project-specific Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:72
msgid "Widgets, Components, and Screens"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:74
msgid "It is important to distinguish between :dfn:`Widgets`, :dfn:`Components`, and :dfn:`Screens`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:80
msgid ":dfn:`Widgets` are the core building blocks of the UI and are **not meant to be loaded at runtime** but rather compiled into the application as C code.  The main characteristics of Widgets are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:83
msgid "In XML, they start with a ``<widget>`` root element."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:84
msgid "They are similar to LVGL's built-in Widgets."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:85
msgid "They are built using ``lv_obj_class`` objects."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:86
msgid "They have custom and complex logic inside."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:87
msgid "They cannot be loaded from XML at runtime because the custom code cannot be loaded."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:88
msgid "They can have a large API with ``set/get/add`` functions."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:89
msgid "They can themselves contain Widgets as children (e.g. ``Tabview``'s tabs, ``Dropdown``'s lists)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:91
msgid "Any handwritten Widget can be accessed from XML by:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:93
msgid "Defining its API in an XML file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:94
msgid "Writing and registering an XML parser for it. `See some examples here. <https://github.com/lvgl/lvgl/tree/master/src/others/xml/parsers>`__"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:101
msgid ":dfn:`Components` are built from Widgets and/or other Components, and **can be loaded at runtime**. The main characteristics of Components are:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:104
msgid "In XML, they start with a ``<component>`` root element."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:105
msgid "They are built in XML only and cannot have custom C code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:106
msgid "They can be loaded from XML as they don't contain custom C code, only XML."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:107
msgid "They are built from Widgets and/or other Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:108
msgid "They can be used for styling Widgets and other Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:109
msgid "They can contain (as children) Widgets and/or other Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:110
msgid "They can have a simple API to pass properties to their children (e.g. ``btn_text`` to a Label's text)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:112
msgid "Regardless of whether the XML was written manually or by the UI |nbsp| editor, the XML files defining Components can be registered in LVGL, and after that, instances can be created. In other words, LVGL can just read the XML files, \"learn\" the Components from them, and thereafter create children as part of Screens and other Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:121
msgid ":dfn:`Screens` are similar to Components:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:123
msgid "In XML, they start with a ``<screen>`` root element."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:124
msgid "They are built from Widgets and/or other Components to describe the :ref:`Screen <screens>`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:125
msgid "They can be loaded from XML at runtime as they describe only visual aspects of the UI."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:126
msgid "They do not have an API."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:127
msgid "They can be referenced in Screen load events."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:132
msgid "Syntax Teaser"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:134
msgid "Each Widget, Component, or Screen XML file describes a single UI element. The root element for Widgets, Components, and Screens is ``<widget>``, ``<component>``, and ``<screen>`` respectively. Other than that, the contained XML elements are almost identical. This is a high-level overview of the most important XML elements that will be children of these root elements:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:140
msgid "Describes the properties that can be ``set`` for a Widget or Component. Properties can be referenced by ``$``. For Widgets, custom enums can also be defined with the ``<enumdef>`` tag."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:143
msgid "Specifies constants (local to the Widget or Component) for colors, sizes, and other values. Constant values can be referenced using ``#``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:145
msgid "Describes style (``lv_style_t``) objects that can be referenced (and shared) by Widgets and Components later."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:0
msgid "<view>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:147
msgid "Specifies the appearance of the Widget or Component by describing the children and their properties."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:150
msgid "This is a simple example illustrating what an LVGL XML Component looks like. Note that only the basic features are shown here."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:182
msgid "Usage Teaser"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:184
msgid "LVGL's UI editor can be used in two different ways."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:187
msgid "Export C and H Files"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:189
msgid "The Widgets, Components, Screens, images, fonts, etc., can be converted to .C/.H files having plain LVGL code. The exported code works the same way as if it was written by the user."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:193
msgid "In this case, the XML files are not required anymore to run the C code (unless modifications may be made later and code is exported again)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:196
msgid "The XML files were used only during editing/implementing the Widgets and Components to save recompilation time and optionally leverage other useful UI |nbsp| Editor features."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:200
msgid "Load the UI from XML"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:202
msgid "Although the Widgets' code always needs to be exported in C and compiled into the application (just like the built-in LVGL Widgets are also part of the application), the Components' XML can be loaded and any number of instances can be created at runtime."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:206
msgid "In the simplest case, a Component can be registered with :cpp:expr:`lv_xml_component_register_from_file(path)` and an instance can be created with :cpp:expr:`lv_obj_t * obj = lv_xml_create(parent, \"my_button\", NULL)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:210
msgid "Note that loading the UI from XML practically has no impact on performance. Once the XML files are registered and the UI is created, it behaves the same way as if it were created from C code."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/intro.rst:214
msgid "Registering XMLs and creating instances is not memory hungry nor slow. The biggest memory overhead is that the ``<view>`` of the Components is saved in RAM (typically 1–2 kB/component)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:5
msgid "Project"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:13
msgid "A single ``project.xml`` file should be created for each project where the following content is specified:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:0
msgid "<folders>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:16
msgid "Specifies the path to Component Libraries. LVGL's base Widgets are always loaded automatically."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:0
msgid "<targets>"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:18
msgid "Describes various hardware configurations, allowing the UI |nbsp| Editor to check if the UI is out of resources and to select different previews for each Screen according to the specified displays."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/project.rst:23
msgid "In LVGL's Editor the ``folders``, ``memory`` and `` <display color_format=\"...\"/>`` are not supported yet."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:5
msgid "Syntax"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:8
msgid "Naming conventions"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:13
msgid "A standard XML syntax is used."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:14
msgid "Lowercase letters with ``_`` separation are used for attribute names."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:15
msgid "Tag names follow the usual variable-name rules: they must start with a letter or ``'_'`` and the rest of the name may be comprised of letters, ``'_'`` and digits."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:17
msgid "The LVGL API is followed as much as possible, e.g., ``align=\"center\"``, ``bg_color=\"0xff0000\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:18
msgid "For colors, all these syntaxes are supported (similar to CSS colors): ``0x112233``, ``#112233``, ``112233``, ``0x123``, ``#123``, ``123``.  Note that like CSS, ``0x123``, ``#123`` and ``123`` all mean ``#112233``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:21
msgid "``params`` can be referenced with ``$``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:22
msgid "``consts`` can be referenced with ``#``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:23
msgid "``styles`` can be attached to states and/or parts like this: ``styles=\"style1 style2:pressed style3:focused:scrollbar\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:25
msgid "Local styles (i.e. styles that are stored within the Component and thus not shared by any other Components) can be used like this: ``<lv_label style_text_color=\"0xff0000\" style_text_color:checked=\"0x00ff00\"/>``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:32
msgid "Types"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:34
msgid "All of the types can be used as API property types, but only a subset of them can be used as constant and :ref:`Subject <observer_subject>` types."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:39
msgid "Simple types"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:41
msgid "The following simple built-in types are supported:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "bool"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:43
msgid "a ``true`` or ``false``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "int"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:45
msgid "Integer number in the range of roughly -2B to 2B by default. (Same as ``int32_t`` in C.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "px"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:48
msgid "Simple pixel units.  The unit ``px`` can be omitted."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "%"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:50
msgid "Percentage.  ``%`` must be appended to the value as the unit. (Means the same as :cpp:expr:`lv_pct()`.)"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:53
msgid "Means ``LV_SIZE_CONTENT``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "string"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:55
msgid "Simple NUL-terminated string.  When multiple strings are used in a property or string array, ``'`` should be used.  E.g. ``foo=\"'a' 'b'\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:58
msgid "A color stored as 24-bit RGB (:cpp:expr:`lv_color_t`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:60
msgid "Opacity value in the range of 0 to 255 or 0 to 100%.  Like CSS, percentage values must be be followed by '%'."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "lv_obj"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:63
msgid "Pointer to a Widget (:cpp:expr:`lv_obj_t *`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "screen"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:65
msgid "Pointer to a screen (also :cpp:expr:`lv_obj_t *`)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "time_ms"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:67
msgid "Means some time in milliseconds unit"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "deg_0.1"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:69
msgid "Degrees with 0.1 resolution"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "scale_1/256"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:71
msgid "Scale/Zoom, where 256 means 100%, 128 means 50%, 512 means 200% etc."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:74
msgid "Name-based types"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:76
msgid "In XML files, fonts, images, styles, etc., are not used by pointer but by string names.  For example, a style is defined like ``<style name=\"red\" bg_color=\"0xff0000\"/>``. Later, they can be referenced by their names."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:80
msgid "This means that the actual values need to be bound to the names when the UI is loaded from XML, otherwise, LVGL wouldn't know what a name means."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:83
msgid "Most of these connections are done automatically (e.g., for styles, fonts, images, animations, gradients, etc.), but others need to be connected manually (e.g., event callbacks where the callback itself is available only in the code)."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:87
msgid "For fonts and images, the connections are created automatically if the source is a file. If the font or image is compiled into the application (as a C array), the user needs to specify which variable a given name refers to."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:91
msgid "To create these connections, functions like"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:93
msgid "``lv_xml_register_image(scope, name, pointer)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:94
msgid "``lv_xml_register_font(scope, name, pointer)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:95
msgid "``lv_xml_register_event_cb(scope, name, callback)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:98
msgid "can be used.  Later, a pointer to the object can be retrieved by"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:100
msgid "``lv_xml_get_image(scope, name)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:101
msgid "``lv_xml_get_font(scope, name)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:102
msgid "``lv_xml_get_event_cb(scope, name)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:105
msgid "``scope`` can be ``NULL`` to use the global scope or :cpp:expr:`lv_xml_component_get_scope(\"my_component\")` returns the a component's local scope."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "style"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:108
msgid "Name of a style. :cpp:expr:`lv_xml_get_style_by_name(&ctx, name)` returns an :cpp:expr:`lv_style_t *`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:109
msgid "Name of a font. :cpp:expr:`lv_xml_get_font(&ctx, name)` returns an :cpp:expr:`lv_font_t *`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "image"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:110
msgid "Name of an image. :cpp:expr:`lv_xml_get_image(&ctx, name)` returns an :cpp:expr:`const void *`, which can be :cpp:expr:`lv_image_dsc_t *` or a NUL-terminated string path to a file."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "animation"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:112
msgid "Name of an animation descriptor. :cpp:expr:`lv_xml_get_anim(&ctx, name)` returns an :cpp:expr:`lv_anim_t *`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "subject"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:113
msgid "Name of a :ref:`Subject <observer_subject>`. :cpp:expr:`lv_xml_get_subject(&ctx, name)` returns an :cpp:expr:`lv_subject_t *`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:114
msgid "Name of a gradient. :cpp:expr:`lv_xml_get_grad(&ctx, name)` returns an :cpp:expr:`lv_grad_dsc_t *`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "event_cb"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:115
msgid "Name of an event callback. :cpp:expr:`lv_xml_get_event_cb(&ctx, name)` returns an :cpp:expr:`lv_event_cb_t`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "screen_create_cb"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:116
msgid "In XML it's the name of a screen XML file. In exported code it's a function like ``lv_obj_t * my_screen_create(void)``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:119
msgid "Arrays"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:121
msgid "An array of any type can be defined in four ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "int[N]"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:123
msgid "An integer array with ``N`` elements. In the exported code ``N`` is passed a parameter after the array."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "string[...NULL]"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:125
msgid "An array terminated with a ``NULL`` element. ``NULL`` can be replaced by any value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "string[5]"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:127
msgid "An array that must have exactly 5 elements. In the exported code only the array will be passed as the Widget assumes the given number of elements."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:0
msgid "string[]"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:129
msgid "No ``NULL`` termination and no count parameter, used when the number of elements is not known or delivered via another mechanism, such as via a function parameter."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:134
msgid "Enums"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:136
msgid "``<enumdef>`` can be used in the ``<api>`` tags to create custom enums for **Widgets**.  This is not supported for Components."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:152
msgid "When used as a type, a ``+`` suffix means multiple values can be selected and ORed. For example: ``type=\"axis+\"``.  In this case, the options should be separated by ``|``, for example: ``axis=primary_x|secondary_y``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:158
msgid "Compound types"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:160
msgid "Types can be compound, meaning multiple options/types are possible.  For example, for width: ``type=\"px|%|content\"``."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:165
msgid "Limiting accepted values"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:167
msgid "It is also possible to limit the possible options the user can select from an enum. For example:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:170
msgid "Enums: ``type=\"dir(top bottom)\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:171
msgid "Colors: ``type=\"color(0xff0000 0x00ff00 0x0000ff)\"``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:172
msgid "Strings: ``type=\"string('Ok' 'Cancel')``"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/overview/syntax.rst:174
msgid "Limiting accepted values is not supported yet, however in the UI |nbsp| Editor if an invalid option is selected, it will be highlighted as an error."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:10
msgid "The XML test module is a powerful and flexible way to define functional UI tests."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:12
msgid "Test XML files are similar to components but are wrapped in a ``<test>`` tag and consist of two main parts:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:14
msgid "**UI Definition**: Use ``<styles>``, ``<consts>``, and ``<view>`` to define how the UI should look. This is identical to how ``<component>``\\ s are structured."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:15
msgid "**Test Steps**: Encapsulated in a ``<steps>`` tag, these define the actions and assertions for the test."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:18
msgid "Step Types"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:20
msgid "The following step types are currently supported (with example parameters):"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:22
msgid "``<move_to x=\"10\" y=\"30\"/>``: Move the mouse to the specified screen coordinates."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:23
msgid "``<click_at x=\"10\" y=\"30\"/>``: Simulates a click at the specified screen coordinates."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:24
msgid "``<press/>``: Press on the current screen coordinate."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:25
msgid "``<release/>``: Release on the current screen coordinate."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:26
msgid "``<wait ms=\"100\"/>``: Waits for the given number of milliseconds. LVGL continues running, including animations and timers."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:27
msgid "``<freeze ms=\"100\"/>``: Pauses the UI and LVGL's internal time. Useful for visual debugging."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:28
msgid "``<subject_set subject=\"subject1\" value=\"5>`` Set an integer or string subject's value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:29
msgid "``<subject_compare subject=\"subject1\" value=\"10\">`` Compare an integer or strings subject's value against a reference value."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:30
msgid "``<screenshot_compare path=\"path/to/image.png\"/>``: Compares the current screen with a reference image. - If the image doesn't exist, it is created. - If the comparison fails, an image with `_err` suffix is saved for inspection."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:56
msgid "Registering Tests"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:58
msgid "Tests can be registered in two ways:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:60
msgid "From file: :cpp:expr:`lv_xml_test_register_from_file(\"path/to/test.xml\", \"A:ref_images\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:61
msgid "From string: :cpp:expr:`lv_xml_test_register_from_data(xml_data, \"A:ref_images\")`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:63
msgid "The second parameter specifies a prefix for screenshot comparison paths."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:65
msgid "To unregister tests, use:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:67
msgid ":cpp:expr:`lv_xml_test_unregister()`"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:69
msgid "This is called automatically when registering a new test, so manual calls are usually unnecessary."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:72
msgid "Running Tests"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:75
msgid "All steps"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:77
msgid "To execute the registered test, use :cpp:expr:`lv_xml_test_run_all(slowdown)`."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:79
msgid "It will clean the screen and create a fresh instance of the ``view`` to be tested."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:81
msgid "The `slowdown` parameter controls playback speed:"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:83
msgid "`0`: Maximum speed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:84
msgid "`1`: Real-time speed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:85
msgid "`2`: Half-speed"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:86
msgid "`10`: 10× slower"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:87
msgid "...and so on"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:89
msgid "`lv_xml_test_run_all()` blocks until all steps are completed. It is safe to call it multiple times."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:91
msgid "The return value is the number of failed tests."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:94
msgid "Step-by-step"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:96
msgid "It's also possible to run each step separately, one after another."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:98
msgid "First, call :cpp:expr:`lv_xml_test_run_init()` to prepare for executing the steps. It will clean the screen and create a fresh instance of the ``view`` to be tested."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:101
msgid "Get the number of steps using :cpp:expr:`lv_xml_test_get_step_count()` and then call :cpp:expr:`lv_xml_test_run_next(slowdown)` as many times."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:104
msgid ":cpp:expr:`lv_xml_test_run_next()` returns ``true`` if the given step passed, or ``false`` if it failed."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:106
msgid "Finally, call :cpp:expr:`lv_xml_test_run_stop()` to clean up and exit testing mode."
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:110
msgid "Getting the Test Results"
msgstr ""

#: ../../lvgl/docs/intermediate/details/xml/test.rst:112
msgid "Currently, only `screenshot_compare` steps can fail. However, the result of each step can be queried:"
msgstr ""
